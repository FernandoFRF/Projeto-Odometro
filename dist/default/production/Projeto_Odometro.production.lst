

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Nov 26 19:46:31 2019

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           ; Version 1.40
    43                           ; Generated 01/12/2016 GMT
    44                           ; 
    45                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4550 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataCOMRAM
    78  001334                     __pidataCOMRAM:
    79                           	opt stack 0
    80                           
    81                           ;initializer for EscreveInteiroLCD@F3948
    82  001334  30                 	db	48
    83  001335  30                 	db	48
    84  001336  30                 	db	48
    85  001337  30                 	db	48
    86  001338  30                 	db	48
    87  001339  30                 	db	48
    88  00133A  00                 	db	0
    89                           
    90                           ;initializer for _odoParcial
    91  00133B  30                 	db	48
    92  00133C  30                 	db	48
    93  00133D  30                 	db	48
    94  00133E  30                 	db	48
    95  00133F  2C                 	db	44
    96  001340  30                 	db	48
    97  001341  00                 	db	0
    98                           
    99                           ;initializer for _odoTotal
   100  001342  30                 	db	48
   101  001343  30                 	db	48
   102  001344  30                 	db	48
   103  001345  30                 	db	48
   104  001346  30                 	db	48
   105  001347  30                 	db	48
   106  001348  00                 	db	0
   107  0000                     _TMR0	set	4054
   108  0000                     _ADCON0	set	4034
   109  0000                     _ADCON0bits	set	4034
   110  0000                     _ADCON1	set	4033
   111  0000                     _ADCON2	set	4032
   112  0000                     _ADRESH	set	4036
   113  0000                     _ADRESL	set	4035
   114  0000                     _CCP1CON	set	4029
   115  0000                     _EEADR	set	4009
   116  0000                     _EECON1	set	4006
   117  0000                     _EECON1bits	set	4006
   118  0000                     _EECON2	set	4007
   119  0000                     _EEDATA	set	4008
   120  0000                     _INTCON	set	4082
   121  0000                     _INTCON2	set	4081
   122  0000                     _INTCON3	set	4080
   123  0000                     _INTCONbits	set	4082
   124  0000                     _IPR1	set	3999
   125  0000                     _IPR2	set	4002
   126  0000                     _LATA	set	3977
   127  0000                     _LATB	set	3978
   128  0000                     _LATD	set	3980
   129  0000                     _PIE1	set	3997
   130  0000                     _PIE1bits	set	3997
   131  0000                     _PIE2	set	4000
   132  0000                     _PIR1	set	3998
   133  0000                     _PIR1bits	set	3998
   134  0000                     _PIR2	set	4001
   135  0000                     _PORTB	set	3969
   136  0000                     _PORTCbits	set	3970
   137  0000                     _PORTDbits	set	3971
   138  0000                     _PORTEbits	set	3972
   139  0000                     _RCON	set	4048
   140  0000                     _T0CON	set	4053
   141  0000                     _T1CON	set	4045
   142  0000                     _T3CONbits	set	4017
   143  0000                     _TRISA	set	3986
   144  0000                     _TRISB	set	3987
   145  0000                     _TRISC	set	3988
   146  0000                     _TRISCbits	set	3988
   147  0000                     _TRISD	set	3989
   148  0000                     _TRISDbits	set	3989
   149  0000                     _TRISE	set	3990
   150  0000                     _T0IF	set	32658
   151                           
   152                           	psect	smallconst
   153  000800                     __psmallconst:
   154                           	opt stack 0
   155  000800  00                 	db	0
   156  000801                     STR_1:
   157  000801  4B                 	db	75	;'K'
   158  000802  6D                 	db	109	;'m'
   159  000803  00                 	db	0
   160  000804  00                 	db	0	; dummy byte at the end
   161  0000                     
   162                           ; #config settings
   163                           
   164                           	psect	cinit
   165  001190                     __pcinit:
   166                           	opt stack 0
   167  001190                     start_initialization:
   168                           	opt stack 0
   169  001190                     __initialization:
   170                           	opt stack 0
   171                           
   172                           ; Initialize objects allocated to COMRAM (21 bytes)
   173                           ; load TBLPTR registers with __pidataCOMRAM
   174  001190  0E34               	movlw	low __pidataCOMRAM
   175  001192  6EF6               	movwf	tblptrl,c
   176  001194  0E13               	movlw	high __pidataCOMRAM
   177  001196  6EF7               	movwf	tblptrh,c
   178  001198  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   179  00119A  6EF8               	movwf	tblptru,c
   180  00119C  EE00  F03C         	lfsr	0,__pdataCOMRAM
   181  0011A0  EE10 F015          	lfsr	1,21
   182  0011A4                     copy_data0:
   183  0011A4  0009               	tblrd		*+
   184  0011A6  CFF5 FFEE          	movff	tablat,postinc0
   185  0011AA  50E5               	movf	postdec1,w,c
   186  0011AC  50E1               	movf	fsr1l,w,c
   187  0011AE  E1FA               	bnz	copy_data0
   188                           
   189                           ; Clear objects allocated to BANK0 (20 bytes)
   190  0011B0  EE00  F060         	lfsr	0,__pbssBANK0
   191  0011B4  0E14               	movlw	20
   192  0011B6                     clear_0:
   193  0011B6  6AEE               	clrf	postinc0,c
   194  0011B8  06E8               	decf	wreg,f,c
   195  0011BA  E1FD               	bnz	clear_0
   196                           
   197                           ; Clear objects allocated to COMRAM (28 bytes)
   198  0011BC  EE00  F020         	lfsr	0,__pbssCOMRAM
   199  0011C0  0E1C               	movlw	28
   200  0011C2                     clear_1:
   201  0011C2  6AEE               	clrf	postinc0,c
   202  0011C4  06E8               	decf	wreg,f,c
   203  0011C6  E1FD               	bnz	clear_1
   204  0011C8                     end_of_initialization:
   205                           	opt stack 0
   206  0011C8                     __end_of__initialization:
   207                           	opt stack 0
   208  0011C8  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   209  0011CA  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   210  0011CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   211  0011CE  6EF8               	movwf	tblptru,c
   212  0011D0  0100               	movlb	0
   213  0011D2  EF89  F009         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	bssCOMRAM
   224  000020                     __pbssCOMRAM:
   225                           	opt stack 0
   226  000020                     _porcentagemTensao:
   227                           	opt stack 0
   228  000020                     	ds	4
   229  000024                     _atualizaOdoParcial:
   230                           	opt stack 0
   231  000024                     	ds	2
   232  000026                     _atualizaOdoTotal:
   233                           	opt stack 0
   234  000026                     	ds	2
   235  000028                     _bordaParcial:
   236                           	opt stack 0
   237  000028                     	ds	2
   238  00002A                     _bordaTotal:
   239                           	opt stack 0
   240  00002A                     	ds	2
   241  00002C                     _countLed:
   242                           	opt stack 0
   243  00002C                     	ds	2
   244  00002E                     _tempoCombustivel:
   245                           	opt stack 0
   246  00002E                     	ds	2
   247  000030                     _valorADCMedia:
   248                           	opt stack 0
   249  000030                     	ds	2
   250  000032                     _valorTensao:
   251                           	opt stack 0
   252  000032                     	ds	2
   253  000034                     _numeroC:
   254                           	opt stack 0
   255  000034                     	ds	1
   256  000035                     _primeiroFiltro:
   257                           	opt stack 0
   258  000035                     	ds	1
   259  000036                     _reserva:
   260                           	opt stack 0
   261  000036                     	ds	1
   262  000037                     odometroParcial@i:
   263                           	opt stack 0
   264  000037                     	ds	1
   265  000038                     _valorADC:
   266                           	opt stack 0
   267  000038                     	ds	4
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           postdec1	equ	0xFE5
   275                           fsr1l	equ	0xFE1
   276                           
   277                           	psect	dataCOMRAM
   278  00003C                     __pdataCOMRAM:
   279                           	opt stack 0
   280  00003C                     EscreveInteiroLCD@F3948:
   281                           	opt stack 0
   282  00003C                     	ds	7
   283  000043                     _odoParcial:
   284                           	opt stack 0
   285  000043                     	ds	7
   286  00004A                     _odoTotal:
   287                           	opt stack 0
   288  00004A                     	ds	7
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           postdec1	equ	0xFE5
   296                           fsr1l	equ	0xFE1
   297                           
   298                           	psect	bssBANK0
   299  000060                     __pbssBANK0:
   300                           	opt stack 0
   301  000060                     _combArray:
   302                           	opt stack 0
   303  000060                     	ds	20
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           postdec1	equ	0xFE5
   311                           fsr1l	equ	0xFE1
   312                           
   313                           	psect	cstackBANK0
   314  000074                     __pcstackBANK0:
   315                           	opt stack 0
   316  000074                     ?___lldiv:
   317                           	opt stack 0
   318  000074                     ___lldiv@dividend:
   319                           	opt stack 0
   320                           
   321                           ; 4 bytes @ 0x0
   322  000074                     	ds	4
   323  000078                     ___lldiv@divisor:
   324                           	opt stack 0
   325                           
   326                           ; 4 bytes @ 0x4
   327  000078                     	ds	4
   328  00007C                     ??_Combustivel:
   329                           
   330                           ; 1 bytes @ 0x8
   331  00007C                     	ds	2
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec1	equ	0xFE5
   339                           fsr1l	equ	0xFE1
   340                           
   341                           	psect	cstackCOMRAM
   342  000001                     __pcstackCOMRAM:
   343                           	opt stack 0
   344  000001                     ??_isr:
   345  000001                     
   346                           ; 1 bytes @ 0x0
   347  000001                     	ds	14
   348  00000F                     ??_ADCRead:
   349  00000F                     ?___lwdiv:
   350                           	opt stack 0
   351  00000F                     ?___lmul:
   352                           	opt stack 0
   353  00000F                     Delay@Cnt1:
   354                           	opt stack 0
   355  00000F                     EEPROM_ReadByte@MemoryAddress:
   356                           	opt stack 0
   357  00000F                     EEPROM_WriteByte@WriteData:
   358                           	opt stack 0
   359  00000F                     ___lwdiv@dividend:
   360                           	opt stack 0
   361  00000F                     ___lmul@multiplier:
   362                           	opt stack 0
   363                           
   364                           ; 4 bytes @ 0xE
   365  00000F                     	ds	1
   366  000010                     Delay@Cnt2:
   367                           	opt stack 0
   368  000010                     EEPROM_WriteByte@WriteMemoryAddress:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0xF
   372  000010                     	ds	1
   373  000011                     EscreveComandoLCD@cmd:
   374                           	opt stack 0
   375  000011                     EnderecoCursor@endereco:
   376                           	opt stack 0
   377  000011                     EscreveCaractereLCD@data:
   378                           	opt stack 0
   379  000011                     ___lwdiv@divisor:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x10
   383  000011                     	ds	1
   384  000012                     ??_ConfiguraLCD:
   385  000012                     PosicaoCursorLCD@coluna:
   386                           	opt stack 0
   387  000012                     EscreveFraseRamLCD@buffer:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x11
   391  000012                     	ds	1
   392  000013                     PosicaoCursorLCD@linha:
   393                           	opt stack 0
   394  000013                     ___lwdiv@quotient:
   395                           	opt stack 0
   396  000013                     ___lmul@multiplicand:
   397                           	opt stack 0
   398                           
   399                           ; 4 bytes @ 0x12
   400  000013                     	ds	1
   401  000014                     PosicaoCursorLCD@EnderecoLCD:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x13
   405  000014                     	ds	1
   406  000015                     odometroTotal@memoria:
   407                           	opt stack 0
   408  000015                     odometroParcial@position:
   409                           	opt stack 0
   410  000015                     ___lwdiv@counter:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x14
   414  000015                     	ds	1
   415  000016                     odometroTotal@memoria_378:
   416                           	opt stack 0
   417  000016                     odometroParcial@trava:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x15
   421  000016                     	ds	1
   422  000017                     odometroTotal@i:
   423                           	opt stack 0
   424  000017                     ___lmul@product:
   425                           	opt stack 0
   426                           
   427                           ; 4 bytes @ 0x16
   428  000017                     	ds	1
   429  000018                     odometroTotal@i_379:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x17
   433  000018                     	ds	1
   434  000019                     odometroTotal@j:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x18
   438  000019                     	ds	1
   439  00001A                     odometroTotal@j_380:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x19
   443  00001A                     	ds	1
   444  00001B                     ___lldiv@quotient:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x1A
   448  00001B                     	ds	4
   449  00001F                     ___lldiv@counter:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x1E
   453  00001F                     	ds	1
   454  000020                     tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1l	equ	0xFE1
   462                           
   463                           ; 1 bytes @ 0x1F
   464 ;;
   465 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   466 ;;
   467 ;; *************** function _main *****************
   468 ;; Defined at:
   469 ;;		line 47 in file "main.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;		None
   472 ;; Auto vars:     Size  Location     Type
   473 ;;		None
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   483 ;;      Params:         0       0       0       0       0       0       0       0       0
   484 ;;      Locals:         0       0       0       0       0       0       0       0       0
   485 ;;      Temps:          0       0       0       0       0       0       0       0       0
   486 ;;      Totals:         0       0       0       0       0       0       0       0       0
   487 ;;Total ram usage:        0 bytes
   488 ;; Hardware stack levels required when called:    5
   489 ;; This function calls:
   490 ;;		_Combustivel
   491 ;;		_ConfiguraLCD
   492 ;;		_Init_EEPROM
   493 ;;		_display
   494 ;;		_initHw
   495 ;;		_initInterrupt
   496 ;;		_odometroParcial
   497 ;;		_odometroTotal
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text0
   504  001312                     __ptext0:
   505                           	opt stack 0
   506  001312                     _main:
   507                           	opt stack 26
   508                           
   509                           ;main.c: 48: ConfiguraLCD();
   510                           
   511                           ;incstack = 0
   512  001312  EC9D  F006         	call	_ConfiguraLCD	;wreg free
   513                           
   514                           ;main.c: 49: initInterrupt();
   515  001316  EC4D  F009         	call	_initInterrupt	;wreg free
   516                           
   517                           ;main.c: 50: initHw();
   518  00131A  ECEB  F008         	call	_initHw	;wreg free
   519                           
   520                           ;main.c: 51: Init_EEPROM();
   521  00131E  ECAC  F009         	call	_Init_EEPROM	;wreg free
   522                           
   523                           ;main.c: 52: display();
   524  001322  EC1E  F008         	call	_display	;wreg free
   525  001326                     l2332:
   526                           
   527                           ;main.c: 55: {
   528                           ;main.c: 56: odometroTotal();
   529  001326  EC80  F005         	call	_odometroTotal	;wreg free
   530                           
   531                           ;main.c: 57: odometroParcial();
   532  00132A  ECE6  F005         	call	_odometroParcial	;wreg free
   533                           
   534                           ;main.c: 58: Combustivel();
   535  00132E  EC03  F004         	call	_Combustivel	;wreg free
   536  001332  D7F9               	goto	l2332
   537  001334                     __end_of_main:
   538                           	opt stack 0
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548 ;; *************** function _odometroTotal *****************
   549 ;; Defined at:
   550 ;;		line 17 in file "Odometro_Total_Parcial.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;		None
   553 ;; Auto vars:     Size  Location     Type
   554 ;;  memoria         1   20[COMRAM] unsigned char 
   555 ;;  j               1   25[COMRAM] unsigned char 
   556 ;;  i               1   23[COMRAM] unsigned char 
   557 ;;  j               1   24[COMRAM] unsigned char 
   558 ;;  i               1   22[COMRAM] unsigned char 
   559 ;;  memoria         1   21[COMRAM] unsigned char 
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   569 ;;      Params:         0       0       0       0       0       0       0       0       0
   570 ;;      Locals:         6       0       0       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0
   572 ;;      Totals:         6       0       0       0       0       0       0       0       0
   573 ;;Total ram usage:        6 bytes
   574 ;; Hardware stack levels used:    1
   575 ;; Hardware stack levels required when called:    4
   576 ;; This function calls:
   577 ;;		_EEPROM_ReadByte
   578 ;;		_EEPROM_WriteByte
   579 ;;		_EscreveFraseRamLCD
   580 ;;		_PosicaoCursorLCD
   581 ;; This function is called by:
   582 ;;		_main
   583 ;; This function uses a non-reentrant model
   584 ;;
   585                           
   586                           	psect	text1
   587  000B00                     __ptext1:
   588                           	opt stack 0
   589  000B00                     _odometroTotal:
   590                           	opt stack 26
   591                           
   592                           ;Odometro_Total_Parcial.c: 19: if (atualizaOdoTotal)
   593                           
   594                           ;incstack = 0
   595  000B00  5026               	movf	_atualizaOdoTotal,w,c
   596  000B02  1027               	iorwf	_atualizaOdoTotal+1,w,c
   597  000B04  B4D8               	btfsc	status,2,c
   598  000B06  0012               	return	
   599                           
   600                           ;Odometro_Total_Parcial.c: 20: {
   601                           ;Odometro_Total_Parcial.c: 21: for(unsigned char i = 0x00, j = 0x05; i < 0x06, j > 0x06;
      +                           i++, j--){
   602  000B08  0E00               	movlw	0
   603  000B0A  6E17               	movwf	odometroTotal@i,c
   604  000B0C  0E05               	movlw	5
   605  000B0E  6E19               	movwf	odometroTotal@j,c
   606  000B10  D011               	goto	l1934
   607  000B12                     l1926:
   608                           
   609                           ;Odometro_Total_Parcial.c: 22: unsigned char memoria = 0x10;
   610  000B12  0E10               	movlw	16
   611  000B14  6E15               	movwf	odometroTotal@memoria,c
   612                           
   613                           ;Odometro_Total_Parcial.c: 23: odoTotal[j] = EEPROM_ReadByte (memoria + i);
   614  000B16  5019               	movf	odometroTotal@j,w,c
   615  000B18  0D01               	mullw	1
   616  000B1A  0E4A               	movlw	low _odoTotal
   617  000B1C  24F3               	addwf	prodl,w,c
   618  000B1E  6ED9               	movwf	fsr2l,c
   619  000B20  0E00               	movlw	high _odoTotal
   620  000B22  20F4               	addwfc	prodh,w,c
   621  000B24  6EDA               	movwf	fsr2h,c
   622  000B26  5015               	movf	odometroTotal@memoria,w,c
   623  000B28  2417               	addwf	odometroTotal@i,w,c
   624  000B2A  ECA5  F009         	call	_EEPROM_ReadByte
   625  000B2E  6EDF               	movwf	indf2,c
   626  000B30  2A17               	incf	odometroTotal@i,f,c
   627  000B32  0619               	decf	odometroTotal@j,f,c
   628  000B34                     l1934:
   629  000B34  0E07               	movlw	7
   630  000B36  6019               	cpfslt	odometroTotal@j,c
   631  000B38  D7EC               	goto	l1926
   632                           
   633                           ;Odometro_Total_Parcial.c: 24: }
   634                           ;Odometro_Total_Parcial.c: 26: odoTotal[5]++;
   635  000B3A  2A4F               	incf	_odoTotal+5,f,c
   636                           
   637                           ;Odometro_Total_Parcial.c: 27: if (odoTotal[5] > 0x39)
   638  000B3C  0E39               	movlw	57
   639  000B3E  644F               	cpfsgt	_odoTotal+5,c
   640  000B40  D01B               	goto	l1970
   641                           
   642                           ;Odometro_Total_Parcial.c: 28: {
   643                           ;Odometro_Total_Parcial.c: 29: odoTotal[5] = 0x30;
   644  000B42  0E30               	movlw	48
   645  000B44  6E4F               	movwf	_odoTotal+5,c
   646                           
   647                           ;Odometro_Total_Parcial.c: 30: odoTotal[4]++;
   648  000B46  2A4E               	incf	_odoTotal+4,f,c
   649                           
   650                           ;Odometro_Total_Parcial.c: 31: if (odoTotal[4] > 0x39)
   651  000B48  0E39               	movlw	57
   652  000B4A  644E               	cpfsgt	_odoTotal+4,c
   653  000B4C  D015               	goto	l1970
   654                           
   655                           ;Odometro_Total_Parcial.c: 32: {
   656                           ;Odometro_Total_Parcial.c: 33: odoTotal[4] = 0x30;
   657  000B4E  0E30               	movlw	48
   658  000B50  6E4E               	movwf	_odoTotal+4,c
   659                           
   660                           ;Odometro_Total_Parcial.c: 34: odoTotal[3]++;
   661  000B52  2A4D               	incf	_odoTotal+3,f,c
   662                           
   663                           ;Odometro_Total_Parcial.c: 35: if (odoTotal[3] > 0x39)
   664  000B54  0E39               	movlw	57
   665  000B56  644D               	cpfsgt	_odoTotal+3,c
   666  000B58  D00F               	goto	l1970
   667                           
   668                           ;Odometro_Total_Parcial.c: 36: {
   669                           ;Odometro_Total_Parcial.c: 37: odoTotal[3] = 0x30;
   670  000B5A  0E30               	movlw	48
   671  000B5C  6E4D               	movwf	_odoTotal+3,c
   672                           
   673                           ;Odometro_Total_Parcial.c: 38: odoTotal[2]++;
   674  000B5E  2A4C               	incf	_odoTotal+2,f,c
   675                           
   676                           ;Odometro_Total_Parcial.c: 39: if (odoTotal[2] > 0x39)
   677  000B60  0E39               	movlw	57
   678  000B62  644C               	cpfsgt	_odoTotal+2,c
   679  000B64  D009               	goto	l1970
   680                           
   681                           ;Odometro_Total_Parcial.c: 40: {
   682                           ;Odometro_Total_Parcial.c: 41: odoTotal[2] = 0x30;
   683  000B66  0E30               	movlw	48
   684  000B68  6E4C               	movwf	_odoTotal+2,c
   685                           
   686                           ;Odometro_Total_Parcial.c: 42: odoTotal[1]++;
   687  000B6A  2A4B               	incf	_odoTotal+1,f,c
   688                           
   689                           ;Odometro_Total_Parcial.c: 43: if (odoTotal[1] > 0x39)
   690  000B6C  0E39               	movlw	57
   691  000B6E  644B               	cpfsgt	_odoTotal+1,c
   692  000B70  D003               	goto	l1970
   693                           
   694                           ;Odometro_Total_Parcial.c: 44: {
   695                           ;Odometro_Total_Parcial.c: 45: odoTotal[1] = 0x30;
   696  000B72  0E30               	movlw	48
   697  000B74  6E4B               	movwf	_odoTotal+1,c
   698                           
   699                           ;Odometro_Total_Parcial.c: 46: odoTotal[0]++;
   700  000B76  2A4A               	incf	_odoTotal,f,c
   701  000B78                     l1970:
   702                           
   703                           ;Odometro_Total_Parcial.c: 50: }
   704                           ;Odometro_Total_Parcial.c: 51: }
   705                           ;Odometro_Total_Parcial.c: 52: }
   706                           ;Odometro_Total_Parcial.c: 53: }
   707                           ;Odometro_Total_Parcial.c: 54: }
   708                           ;Odometro_Total_Parcial.c: 55: }
   709                           ;Odometro_Total_Parcial.c: 57: unsigned char memoria = 0x10;
   710  000B78  0E10               	movlw	16
   711  000B7A  6E16               	movwf	odometroTotal@memoria_378,c
   712                           
   713                           ;Odometro_Total_Parcial.c: 58: for (unsigned char i = 0x00, j = 0x05; i < 0x05, j > 0x00
      +                          ; i++, j--){
   714  000B7C  0E00               	movlw	0
   715  000B7E  6E18               	movwf	odometroTotal@i_379,c
   716  000B80  0E05               	movlw	5
   717  000B82  6E1A               	movwf	odometroTotal@j_380,c
   718  000B84  D010               	goto	l1978
   719  000B86                     l1972:
   720                           
   721                           ;Odometro_Total_Parcial.c: 59: EEPROM_WriteByte(memoria + i, odoTotal[j]);
   722  000B86  501A               	movf	odometroTotal@j_380,w,c
   723  000B88  0D01               	mullw	1
   724  000B8A  0E4A               	movlw	low _odoTotal
   725  000B8C  24F3               	addwf	prodl,w,c
   726  000B8E  6ED9               	movwf	fsr2l,c
   727  000B90  0E00               	movlw	high _odoTotal
   728  000B92  20F4               	addwfc	prodh,w,c
   729  000B94  6EDA               	movwf	fsr2h,c
   730  000B96  50DF               	movf	indf2,w,c
   731  000B98  6E0F               	movwf	EEPROM_WriteByte@WriteData,c
   732  000B9A  5016               	movf	odometroTotal@memoria_378,w,c
   733  000B9C  2418               	addwf	odometroTotal@i_379,w,c
   734  000B9E  EC64  F009         	call	_EEPROM_WriteByte
   735  000BA2  2A18               	incf	odometroTotal@i_379,f,c
   736  000BA4  061A               	decf	odometroTotal@j_380,f,c
   737  000BA6                     l1978:
   738  000BA6  501A               	movf	odometroTotal@j_380,w,c
   739  000BA8  A4D8               	btfss	status,2,c
   740  000BAA  D7ED               	goto	l1972
   741                           
   742                           ;Odometro_Total_Parcial.c: 60: }
   743                           ;Odometro_Total_Parcial.c: 62: PosicaoCursorLCD(1, 7);
   744  000BAC  0E07               	movlw	7
   745  000BAE  6E12               	movwf	PosicaoCursorLCD@coluna,c
   746  000BB0  0E01               	movlw	1
   747  000BB2  ECB1  F007         	call	_PosicaoCursorLCD
   748                           
   749                           ;Odometro_Total_Parcial.c: 63: EscreveFraseRamLCD(odoTotal);
   750  000BB6  0E4A               	movlw	low _odoTotal
   751  000BB8  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   752  000BBA  0E00               	movlw	high _odoTotal
   753  000BBC  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   754  000BBE  EC76  F008         	call	_EscreveFraseRamLCD	;wreg free
   755                           
   756                           ;Odometro_Total_Parcial.c: 64: atualizaOdoTotal = 0;
   757  000BC2  0E00               	movlw	0
   758  000BC4  6E27               	movwf	_atualizaOdoTotal+1,c
   759  000BC6  0E00               	movlw	0
   760  000BC8  6E26               	movwf	_atualizaOdoTotal,c
   761  000BCA  0012               	return	
   762  000BCC                     __end_of_odometroTotal:
   763                           	opt stack 0
   764                           tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           prodh	equ	0xFF4
   769                           prodl	equ	0xFF3
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           postdec1	equ	0xFE5
   773                           fsr1l	equ	0xFE1
   774                           indf2	equ	0xFDF
   775                           fsr2h	equ	0xFDA
   776                           fsr2l	equ	0xFD9
   777                           status	equ	0xFD8
   778                           
   779 ;; *************** function _EEPROM_WriteByte *****************
   780 ;; Defined at:
   781 ;;		line 17 in file "EEPROM.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  WriteMemoryA    1    wreg     unsigned char 
   784 ;;  WriteData       1   14[COMRAM] unsigned char 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  WriteMemoryA    1   15[COMRAM] unsigned char 
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, status,2
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   796 ;;      Params:         1       0       0       0       0       0       0       0       0
   797 ;;      Locals:         1       0       0       0       0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0
   799 ;;      Totals:         2       0       0       0       0       0       0       0       0
   800 ;;Total ram usage:        2 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    1
   803 ;; This function calls:
   804 ;;		Nothing
   805 ;; This function is called by:
   806 ;;		_odometroTotal
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text2
   811  0012C8                     __ptext2:
   812                           	opt stack 0
   813  0012C8                     _EEPROM_WriteByte:
   814                           	opt stack 28
   815                           
   816                           ;incstack = 0
   817                           ;EEPROM_WriteByte@WriteMemoryAddress stored from wreg
   818  0012C8  6E10               	movwf	EEPROM_WriteByte@WriteMemoryAddress,c
   819                           
   820                           ;EEPROM.c: 19: EEADR = WriteMemoryAddress;
   821  0012CA  C010  FFA9         	movff	EEPROM_WriteByte@WriteMemoryAddress,4009	;volatile
   822                           
   823                           ;EEPROM.c: 20: EEDATA = WriteData;
   824  0012CE  C00F  FFA8         	movff	EEPROM_WriteByte@WriteData,4008	;volatile
   825                           
   826                           ;EEPROM.c: 21: EECON1bits.EEPGD = 0;
   827  0012D2  9EA6               	bcf	4006,7,c	;volatile
   828                           
   829                           ;EEPROM.c: 22: EECON1bits.CFGS = 0;
   830  0012D4  9CA6               	bcf	4006,6,c	;volatile
   831                           
   832                           ;EEPROM.c: 23: EECON1bits.WREN = 1;
   833  0012D6  84A6               	bsf	4006,2,c	;volatile
   834                           
   835                           ;EEPROM.c: 24: INTCONbits.GIE = 0;
   836  0012D8  9EF2               	bcf	intcon,7,c	;volatile
   837                           
   838                           ;EEPROM.c: 25: EECON2 = 0x55;
   839  0012DA  0E55               	movlw	85
   840  0012DC  6EA7               	movwf	4007,c	;volatile
   841                           
   842                           ;EEPROM.c: 26: EECON2 = 0x0AA;
   843  0012DE  0EAA               	movlw	170
   844  0012E0  6EA7               	movwf	4007,c	;volatile
   845                           
   846                           ;EEPROM.c: 27: EECON1bits.WR= 1;
   847  0012E2  82A6               	bsf	4006,1,c	;volatile
   848  0012E4                     l159:
   849  0012E4  B2A6               	btfsc	4006,1,c	;volatile
   850  0012E6  D7FE               	goto	l159
   851                           
   852                           ;EEPROM.c: 29: INTCONbits.GIE = 1;
   853  0012E8  8EF2               	bsf	intcon,7,c	;volatile
   854                           
   855                           ;EEPROM.c: 30: EECON1bits.WREN = 0;
   856  0012EA  94A6               	bcf	4006,2,c	;volatile
   857  0012EC  0012               	return		;funcret
   858  0012EE                     __end_of_EEPROM_WriteByte:
   859                           	opt stack 0
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodh	equ	0xFF4
   865                           prodl	equ	0xFF3
   866                           intcon	equ	0xFF2
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           postdec1	equ	0xFE5
   870                           fsr1l	equ	0xFE1
   871                           indf2	equ	0xFDF
   872                           fsr2h	equ	0xFDA
   873                           fsr2l	equ	0xFD9
   874                           status	equ	0xFD8
   875                           
   876 ;; *************** function _EEPROM_ReadByte *****************
   877 ;; Defined at:
   878 ;;		line 10 in file "EEPROM.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  MemoryAddres    1    wreg     unsigned char 
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  MemoryAddres    1   14[COMRAM] unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  1    wreg      unsigned char 
   885 ;; Registers used:
   886 ;;		wreg, status,2
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   892 ;;      Params:         0       0       0       0       0       0       0       0       0
   893 ;;      Locals:         1       0       0       0       0       0       0       0       0
   894 ;;      Temps:          0       0       0       0       0       0       0       0       0
   895 ;;      Totals:         1       0       0       0       0       0       0       0       0
   896 ;;Total ram usage:        1 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_odometroTotal
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text3
   907  00134A                     __ptext3:
   908                           	opt stack 0
   909  00134A                     _EEPROM_ReadByte:
   910                           	opt stack 28
   911                           
   912                           ;incstack = 0
   913                           ;EEPROM_ReadByte@MemoryAddress stored from wreg
   914  00134A  6E0F               	movwf	EEPROM_ReadByte@MemoryAddress,c
   915                           
   916                           ;EEPROM.c: 12: EEADR = MemoryAddress;
   917  00134C  C00F  FFA9         	movff	EEPROM_ReadByte@MemoryAddress,4009	;volatile
   918                           
   919                           ;EEPROM.c: 13: EECON1 = 0x01;
   920  001350  0E01               	movlw	1
   921  001352  6EA6               	movwf	4006,c	;volatile
   922                           
   923                           ;EEPROM.c: 14: return(EEDATA);
   924  001354  50A8               	movf	4008,w,c	;volatile
   925  001356  0012               	return	
   926  001358                     __end_of_EEPROM_ReadByte:
   927                           	opt stack 0
   928                           tblptru	equ	0xFF8
   929                           tblptrh	equ	0xFF7
   930                           tblptrl	equ	0xFF6
   931                           tablat	equ	0xFF5
   932                           prodh	equ	0xFF4
   933                           prodl	equ	0xFF3
   934                           intcon	equ	0xFF2
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           postdec1	equ	0xFE5
   938                           fsr1l	equ	0xFE1
   939                           indf2	equ	0xFDF
   940                           fsr2h	equ	0xFDA
   941                           fsr2l	equ	0xFD9
   942                           status	equ	0xFD8
   943                           
   944 ;; *************** function _odometroParcial *****************
   945 ;; Defined at:
   946 ;;		line 68 in file "Odometro_Total_Parcial.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  trava           1   21[COMRAM] unsigned char 
   951 ;;  position        1   20[COMRAM] unsigned char 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   961 ;;      Params:         0       0       0       0       0       0       0       0       0
   962 ;;      Locals:         2       0       0       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0       0       0
   964 ;;      Totals:         2       0       0       0       0       0       0       0       0
   965 ;;Total ram usage:        2 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    4
   968 ;; This function calls:
   969 ;;		_EscreveFraseRamLCD
   970 ;;		_PosicaoCursorLCD
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text4
   977  000BCC                     __ptext4:
   978                           	opt stack 0
   979  000BCC                     _odometroParcial:
   980                           	opt stack 26
   981                           
   982                           ;Odometro_Total_Parcial.c: 70: unsigned char trava = 0;
   983                           
   984                           ;incstack = 0
   985  000BCC  0E00               	movlw	0
   986  000BCE  6E16               	movwf	odometroParcial@trava,c
   987                           
   988                           ;Odometro_Total_Parcial.c: 71: static unsigned char i;
   989                           ;Odometro_Total_Parcial.c: 72: char position = 0;
   990  000BD0  0E00               	movlw	0
   991  000BD2  6E15               	movwf	odometroParcial@position,c
   992                           
   993                           ;Odometro_Total_Parcial.c: 74: if (atualizaOdoParcial){
   994  000BD4  5024               	movf	_atualizaOdoParcial,w,c
   995  000BD6  1025               	iorwf	_atualizaOdoParcial+1,w,c
   996  000BD8  B4D8               	btfsc	status,2,c
   997  000BDA  0012               	return	
   998                           
   999                           ;Odometro_Total_Parcial.c: 75: odoParcial[5]++;
  1000  000BDC  2A48               	incf	_odoParcial+5,f,c
  1001                           
  1002                           ;Odometro_Total_Parcial.c: 77: if (odoParcial[5] > 0x39){
  1003  000BDE  0E39               	movlw	57
  1004  000BE0  6448               	cpfsgt	_odoParcial+5,c
  1005  000BE2  D02A               	goto	l2030
  1006                           
  1007                           ;Odometro_Total_Parcial.c: 78: odoParcial[5] = 0x30;
  1008  000BE4  0E30               	movlw	48
  1009  000BE6  6E48               	movwf	_odoParcial+5,c
  1010                           
  1011                           ;Odometro_Total_Parcial.c: 79: odoParcial[3]++;
  1012  000BE8  2A46               	incf	_odoParcial+3,f,c
  1013                           
  1014                           ;Odometro_Total_Parcial.c: 81: if (odoParcial[3] > 0x39){
  1015  000BEA  0E39               	movlw	57
  1016  000BEC  6446               	cpfsgt	_odoParcial+3,c
  1017  000BEE  D024               	goto	l2030
  1018                           
  1019                           ;Odometro_Total_Parcial.c: 82: odoParcial[3] = 0x30;
  1020  000BF0  0E30               	movlw	48
  1021  000BF2  6E46               	movwf	_odoParcial+3,c
  1022                           
  1023                           ;Odometro_Total_Parcial.c: 83: odoParcial[2]++;
  1024  000BF4  2A45               	incf	_odoParcial+2,f,c
  1025                           
  1026                           ;Odometro_Total_Parcial.c: 85: if (odoParcial[2] > 0x39){
  1027  000BF6  0E39               	movlw	57
  1028  000BF8  6445               	cpfsgt	_odoParcial+2,c
  1029  000BFA  D01E               	goto	l2030
  1030                           
  1031                           ;Odometro_Total_Parcial.c: 86: odoParcial[2] = 0x30;
  1032  000BFC  0E30               	movlw	48
  1033  000BFE  6E45               	movwf	_odoParcial+2,c
  1034                           
  1035                           ;Odometro_Total_Parcial.c: 87: odoParcial[1]++;
  1036  000C00  2A44               	incf	_odoParcial+1,f,c
  1037                           
  1038                           ;Odometro_Total_Parcial.c: 89: if (odoParcial[1] > 0x39){
  1039  000C02  0E39               	movlw	57
  1040  000C04  6444               	cpfsgt	_odoParcial+1,c
  1041  000C06  D018               	goto	l2030
  1042                           
  1043                           ;Odometro_Total_Parcial.c: 90: odoParcial[1] = 0x30;
  1044  000C08  0E30               	movlw	48
  1045  000C0A  6E44               	movwf	_odoParcial+1,c
  1046                           
  1047                           ;Odometro_Total_Parcial.c: 91: odoParcial[0]++;
  1048  000C0C  2A43               	incf	_odoParcial,f,c
  1049                           
  1050                           ;Odometro_Total_Parcial.c: 93: if (odoParcial[0] > 0x39){
  1051  000C0E  0E39               	movlw	57
  1052  000C10  6443               	cpfsgt	_odoParcial,c
  1053  000C12  D012               	goto	l2030
  1054                           
  1055                           ;Odometro_Total_Parcial.c: 94: for (i = 0; i <= 3; i++){
  1056  000C14  0E00               	movlw	0
  1057  000C16  6E37               	movwf	odometroParcial@i,c
  1058  000C18                     l2020:
  1059  000C18  0E03               	movlw	3
  1060  000C1A  6437               	cpfsgt	odometroParcial@i,c
  1061  000C1C  D001               	goto	l2024
  1062  000C1E  D00C               	goto	l2030
  1063  000C20                     l2024:
  1064                           
  1065                           ;Odometro_Total_Parcial.c: 95: odoParcial[i] = '0';
  1066  000C20  5037               	movf	odometroParcial@i,w,c
  1067  000C22  0D01               	mullw	1
  1068  000C24  0E43               	movlw	low _odoParcial
  1069  000C26  24F3               	addwf	prodl,w,c
  1070  000C28  6ED9               	movwf	fsr2l,c
  1071  000C2A  0E00               	movlw	high _odoParcial
  1072  000C2C  20F4               	addwfc	prodh,w,c
  1073  000C2E  6EDA               	movwf	fsr2h,c
  1074  000C30  0E30               	movlw	48
  1075  000C32  6EDF               	movwf	indf2,c
  1076  000C34  2A37               	incf	odometroParcial@i,f,c
  1077  000C36  D7F0               	goto	l2020
  1078  000C38                     l2030:
  1079                           
  1080                           ;Odometro_Total_Parcial.c: 97: }
  1081                           ;Odometro_Total_Parcial.c: 98: }
  1082                           ;Odometro_Total_Parcial.c: 99: }
  1083                           ;Odometro_Total_Parcial.c: 100: }
  1084                           ;Odometro_Total_Parcial.c: 101: }
  1085                           ;Odometro_Total_Parcial.c: 102: }
  1086                           ;Odometro_Total_Parcial.c: 103: PosicaoCursorLCD(2, 7);
  1087  000C38  0E07               	movlw	7
  1088  000C3A  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1089  000C3C  0E02               	movlw	2
  1090  000C3E  ECB1  F007         	call	_PosicaoCursorLCD
  1091                           
  1092                           ;Odometro_Total_Parcial.c: 104: EscreveFraseRamLCD(odoParcial);
  1093  000C42  0E43               	movlw	low _odoParcial
  1094  000C44  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1095  000C46  0E00               	movlw	high _odoParcial
  1096  000C48  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1097  000C4A  EC76  F008         	call	_EscreveFraseRamLCD	;wreg free
  1098                           
  1099                           ;Odometro_Total_Parcial.c: 105: atualizaOdoParcial = 0;
  1100  000C4E  0E00               	movlw	0
  1101  000C50  6E25               	movwf	_atualizaOdoParcial+1,c
  1102  000C52  0E00               	movlw	0
  1103  000C54  6E24               	movwf	_atualizaOdoParcial,c
  1104                           
  1105                           ;Odometro_Total_Parcial.c: 108: if((PORTEbits.RE0 == 0)&&(trava == 0)) {
  1106  000C56  B084               	btfsc	3972,0,c	;volatile
  1107  000C58  D010               	goto	l213
  1108  000C5A  5016               	movf	odometroParcial@trava,w,c
  1109  000C5C  A4D8               	btfss	status,2,c
  1110  000C5E  D00D               	goto	l213
  1111                           
  1112                           ;Odometro_Total_Parcial.c: 109: odoParcial[0] = 0x30;
  1113  000C60  0E30               	movlw	48
  1114  000C62  6E43               	movwf	_odoParcial,c
  1115                           
  1116                           ;Odometro_Total_Parcial.c: 110: odoParcial[1] = 0x30;
  1117  000C64  0E30               	movlw	48
  1118  000C66  6E44               	movwf	_odoParcial+1,c
  1119                           
  1120                           ;Odometro_Total_Parcial.c: 111: odoParcial[2] = 0x30;
  1121  000C68  0E30               	movlw	48
  1122  000C6A  6E45               	movwf	_odoParcial+2,c
  1123                           
  1124                           ;Odometro_Total_Parcial.c: 112: odoParcial[3] = 0x30;
  1125  000C6C  0E30               	movlw	48
  1126  000C6E  6E46               	movwf	_odoParcial+3,c
  1127                           
  1128                           ;Odometro_Total_Parcial.c: 113: odoParcial[5] = 0x30;
  1129  000C70  0E30               	movlw	48
  1130  000C72  6E48               	movwf	_odoParcial+5,c
  1131                           
  1132                           ;Odometro_Total_Parcial.c: 114: trava = 1;
  1133  000C74  0E01               	movlw	1
  1134  000C76  6E16               	movwf	odometroParcial@trava,c
  1135                           
  1136                           ;Odometro_Total_Parcial.c: 115: } else if((PORTEbits.RE0 == 1) && (trava == 1)){
  1137  000C78  0012               	return	
  1138  000C7A                     l213:
  1139  000C7A  A084               	btfss	3972,0,c	;volatile
  1140  000C7C  0012               	return	
  1141  000C7E  0416               	decf	odometroParcial@trava,w,c
  1142  000C80  A4D8               	btfss	status,2,c
  1143  000C82  0012               	return	
  1144                           
  1145                           ;Odometro_Total_Parcial.c: 116: trava = 0;
  1146  000C84  0E00               	movlw	0
  1147  000C86  6E16               	movwf	odometroParcial@trava,c
  1148  000C88  0012               	return	
  1149  000C8A                     __end_of_odometroParcial:
  1150                           	opt stack 0
  1151                           tblptru	equ	0xFF8
  1152                           tblptrh	equ	0xFF7
  1153                           tblptrl	equ	0xFF6
  1154                           tablat	equ	0xFF5
  1155                           prodh	equ	0xFF4
  1156                           prodl	equ	0xFF3
  1157                           intcon	equ	0xFF2
  1158                           postinc0	equ	0xFEE
  1159                           wreg	equ	0xFE8
  1160                           postdec1	equ	0xFE5
  1161                           fsr1l	equ	0xFE1
  1162                           indf2	equ	0xFDF
  1163                           fsr2h	equ	0xFDA
  1164                           fsr2l	equ	0xFD9
  1165                           status	equ	0xFD8
  1166                           
  1167 ;; *************** function _initInterrupt *****************
  1168 ;; Defined at:
  1169 ;;		line 63 in file "main.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;		None
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1183 ;;      Params:         0       0       0       0       0       0       0       0       0
  1184 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1186 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1187 ;;Total ram usage:        0 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    1
  1190 ;; This function calls:
  1191 ;;		Nothing
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text5
  1198  00129A                     __ptext5:
  1199                           	opt stack 0
  1200  00129A                     _initInterrupt:
  1201                           	opt stack 29
  1202                           
  1203                           ;main.c: 64: INTCON = 0b11100000;
  1204                           
  1205                           ;incstack = 0
  1206  00129A  0EE0               	movlw	224
  1207  00129C  6EF2               	movwf	intcon,c	;volatile
  1208                           
  1209                           ;main.c: 65: INTCON2 = 0b10000000;
  1210  00129E  0E80               	movlw	128
  1211  0012A0  6EF1               	movwf	intcon2,c	;volatile
  1212                           
  1213                           ;main.c: 66: INTCON3 = 0b00000000;
  1214  0012A2  0E00               	movlw	0
  1215  0012A4  6EF0               	movwf	intcon3,c	;volatile
  1216                           
  1217                           ;main.c: 67: CCP1CON = 0b00000101;
  1218  0012A6  0E05               	movlw	5
  1219  0012A8  6EBD               	movwf	4029,c	;volatile
  1220                           
  1221                           ;main.c: 68: PIR1 = 0b00000000;
  1222  0012AA  0E00               	movlw	0
  1223  0012AC  6E9E               	movwf	3998,c	;volatile
  1224                           
  1225                           ;main.c: 69: PIR2 = 0b00000000;
  1226  0012AE  0E00               	movlw	0
  1227  0012B0  6EA1               	movwf	4001,c	;volatile
  1228                           
  1229                           ;main.c: 70: PIE1 = 0b00000100;
  1230  0012B2  0E04               	movlw	4
  1231  0012B4  6E9D               	movwf	3997,c	;volatile
  1232                           
  1233                           ;main.c: 71: PIE2 = 0b00000000;
  1234  0012B6  0E00               	movlw	0
  1235  0012B8  6EA0               	movwf	4000,c	;volatile
  1236                           
  1237                           ;main.c: 72: IPR1 = 0b00000000;
  1238  0012BA  0E00               	movlw	0
  1239  0012BC  6E9F               	movwf	3999,c	;volatile
  1240                           
  1241                           ;main.c: 73: IPR2 = 0b00000000;
  1242  0012BE  0E00               	movlw	0
  1243  0012C0  6EA2               	movwf	4002,c	;volatile
  1244                           
  1245                           ;main.c: 74: RCON = 0b00000000;
  1246  0012C2  0E00               	movlw	0
  1247  0012C4  6ED0               	movwf	4048,c	;volatile
  1248  0012C6  0012               	return		;funcret
  1249  0012C8                     __end_of_initInterrupt:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           prodh	equ	0xFF4
  1256                           prodl	equ	0xFF3
  1257                           intcon	equ	0xFF2
  1258                           intcon2	equ	0xFF1
  1259                           intcon3	equ	0xFF0
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           indf2	equ	0xFDF
  1265                           fsr2h	equ	0xFDA
  1266                           fsr2l	equ	0xFD9
  1267                           status	equ	0xFD8
  1268                           
  1269 ;; *************** function _initHw *****************
  1270 ;; Defined at:
  1271 ;;		line 76 in file "main.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, status,2
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1285 ;;      Params:         0       0       0       0       0       0       0       0       0
  1286 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1288 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1289 ;;Total ram usage:        0 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    1
  1292 ;; This function calls:
  1293 ;;		Nothing
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           	psect	text6
  1300  0011D6                     __ptext6:
  1301                           	opt stack 0
  1302  0011D6                     _initHw:
  1303                           	opt stack 29
  1304                           
  1305                           ;main.c: 78: TRISA = 0x00;
  1306                           
  1307                           ;incstack = 0
  1308  0011D6  0E00               	movlw	0
  1309  0011D8  6E92               	movwf	3986,c	;volatile
  1310                           
  1311                           ;main.c: 79: TRISB = 0x00;
  1312  0011DA  0E00               	movlw	0
  1313  0011DC  6E93               	movwf	3987,c	;volatile
  1314                           
  1315                           ;main.c: 80: TRISC = 0x00;
  1316  0011DE  0E00               	movlw	0
  1317  0011E0  6E94               	movwf	3988,c	;volatile
  1318                           
  1319                           ;main.c: 81: TRISCbits.RC2 = 1;
  1320  0011E2  8494               	bsf	3988,2,c	;volatile
  1321                           
  1322                           ;main.c: 82: TRISD = 0x00;
  1323  0011E4  0E00               	movlw	0
  1324  0011E6  6E95               	movwf	3989,c	;volatile
  1325                           
  1326                           ;main.c: 83: TRISE = 0x0F;
  1327  0011E8  0E0F               	movlw	15
  1328  0011EA  6E96               	movwf	3990,c	;volatile
  1329                           
  1330                           ;main.c: 85: ADCON0 = 0b00000001;
  1331  0011EC  0E01               	movlw	1
  1332  0011EE  6EC2               	movwf	4034,c	;volatile
  1333                           
  1334                           ;main.c: 86: ADCON1 = 0b00001101;
  1335  0011F0  0E0D               	movlw	13
  1336  0011F2  6EC1               	movwf	4033,c	;volatile
  1337                           
  1338                           ;main.c: 87: ADCON2 = 0b10000100;
  1339  0011F4  0E84               	movlw	132
  1340  0011F6  6EC0               	movwf	4032,c	;volatile
  1341                           
  1342                           ;main.c: 89: PORTEbits.RE0 = 0;
  1343  0011F8  9084               	bcf	3972,0,c	;volatile
  1344                           
  1345                           ;main.c: 92: LATA = 0x00;
  1346  0011FA  0E00               	movlw	0
  1347  0011FC  6E89               	movwf	3977,c	;volatile
  1348                           
  1349                           ;main.c: 93: LATB = 0x00;
  1350  0011FE  0E00               	movlw	0
  1351  001200  6E8A               	movwf	3978,c	;volatile
  1352                           
  1353                           ;main.c: 94: LATD = 0x00;
  1354  001202  0E00               	movlw	0
  1355  001204  6E8C               	movwf	3980,c	;volatile
  1356                           
  1357                           ;main.c: 96: T0CON = 0b01000101;
  1358  001206  0E45               	movlw	69
  1359  001208  6ED5               	movwf	4053,c	;volatile
  1360                           
  1361                           ;main.c: 97: CCP1CON = 0b00000101;
  1362  00120A  0E05               	movlw	5
  1363  00120C  6EBD               	movwf	4029,c	;volatile
  1364                           
  1365                           ;main.c: 98: T1CON = 0b01000100;
  1366  00120E  0E44               	movlw	68
  1367  001210  6ECD               	movwf	4045,c	;volatile
  1368                           
  1369                           ;main.c: 99: T3CONbits.T3CCP1 = 0;
  1370  001212  96B1               	bcf	4017,3,c	;volatile
  1371                           
  1372                           ;main.c: 100: INTCONbits.GIE = 1;
  1373  001214  8EF2               	bsf	intcon,7,c	;volatile
  1374                           
  1375                           ;main.c: 101: INTCONbits.PEIE = 1;
  1376  001216  8CF2               	bsf	intcon,6,c	;volatile
  1377  001218  0012               	return		;funcret
  1378  00121A                     __end_of_initHw:
  1379                           	opt stack 0
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           prodh	equ	0xFF4
  1385                           prodl	equ	0xFF3
  1386                           intcon	equ	0xFF2
  1387                           intcon2	equ	0xFF1
  1388                           intcon3	equ	0xFF0
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1l	equ	0xFE1
  1393                           indf2	equ	0xFDF
  1394                           fsr2h	equ	0xFDA
  1395                           fsr2l	equ	0xFD9
  1396                           status	equ	0xFD8
  1397                           
  1398 ;; *************** function _display *****************
  1399 ;; Defined at:
  1400 ;;		line 104 in file "main.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;		None
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1414 ;;      Params:         0       0       0       0       0       0       0       0       0
  1415 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1417 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1418 ;;Total ram usage:        0 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:    4
  1421 ;; This function calls:
  1422 ;;		_EscreveFraseRamLCD
  1423 ;;		_PosicaoCursorLCD
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text7
  1430  00103C                     __ptext7:
  1431                           	opt stack 0
  1432  00103C                     _display:
  1433                           	opt stack 26
  1434                           
  1435                           ;main.c: 105: PosicaoCursorLCD(1, 7);
  1436                           
  1437                           ;incstack = 0
  1438  00103C  0E07               	movlw	7
  1439  00103E  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1440  001040  0E01               	movlw	1
  1441  001042  ECB1  F007         	call	_PosicaoCursorLCD
  1442                           
  1443                           ;main.c: 106: EscreveFraseRamLCD(odoTotal);
  1444  001046  0E4A               	movlw	low _odoTotal
  1445  001048  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1446  00104A  0E00               	movlw	high _odoTotal
  1447  00104C  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1448  00104E  EC76  F008         	call	_EscreveFraseRamLCD	;wreg free
  1449                           
  1450                           ;main.c: 107: PosicaoCursorLCD(2, 7);
  1451  001052  0E07               	movlw	7
  1452  001054  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1453  001056  0E02               	movlw	2
  1454  001058  ECB1  F007         	call	_PosicaoCursorLCD
  1455                           
  1456                           ;main.c: 108: EscreveFraseRamLCD(odoParcial);
  1457  00105C  0E43               	movlw	low _odoParcial
  1458  00105E  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1459  001060  0E00               	movlw	high _odoParcial
  1460  001062  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1461  001064  EC76  F008         	call	_EscreveFraseRamLCD	;wreg free
  1462                           
  1463                           ;main.c: 109: PosicaoCursorLCD(1, 14);
  1464  001068  0E0E               	movlw	14
  1465  00106A  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1466  00106C  0E01               	movlw	1
  1467  00106E  ECB1  F007         	call	_PosicaoCursorLCD
  1468                           
  1469                           ;main.c: 110: EscreveFraseRamLCD("Km");
  1470  001072  0E01               	movlw	low STR_1
  1471  001074  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1472  001076  0E08               	movlw	high STR_1
  1473  001078  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1474  00107A  EC76  F008         	call	_EscreveFraseRamLCD	;wreg free
  1475                           
  1476                           ;main.c: 111: PosicaoCursorLCD(2, 14);
  1477  00107E  0E0E               	movlw	14
  1478  001080  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1479  001082  0E02               	movlw	2
  1480  001084  ECB1  F007         	call	_PosicaoCursorLCD
  1481                           
  1482                           ;main.c: 112: EscreveFraseRamLCD("Km");
  1483  001088  0E01               	movlw	low STR_1
  1484  00108A  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1485  00108C  0E08               	movlw	high STR_1
  1486  00108E  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1487  001090  EC76  F008         	call	_EscreveFraseRamLCD	;wreg free
  1488  001094  0012               	return		;funcret
  1489  001096                     __end_of_display:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           prodh	equ	0xFF4
  1496                           prodl	equ	0xFF3
  1497                           intcon	equ	0xFF2
  1498                           intcon2	equ	0xFF1
  1499                           intcon3	equ	0xFF0
  1500                           postinc0	equ	0xFEE
  1501                           wreg	equ	0xFE8
  1502                           postdec1	equ	0xFE5
  1503                           fsr1l	equ	0xFE1
  1504                           indf2	equ	0xFDF
  1505                           fsr2h	equ	0xFDA
  1506                           fsr2l	equ	0xFD9
  1507                           status	equ	0xFD8
  1508                           
  1509 ;; *************** function _PosicaoCursorLCD *****************
  1510 ;; Defined at:
  1511 ;;		line 287 in file "displayLCD.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  linha           1    wreg     unsigned char 
  1514 ;;  coluna          1   17[COMRAM] unsigned char 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  linha           1   18[COMRAM] unsigned char 
  1517 ;;  EnderecoLCD     1   19[COMRAM] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1527 ;;      Params:         1       0       0       0       0       0       0       0       0
  1528 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1530 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1531 ;;Total ram usage:        3 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    3
  1534 ;; This function calls:
  1535 ;;		_EnderecoCursor
  1536 ;; This function is called by:
  1537 ;;		_odometroTotal
  1538 ;;		_odometroParcial
  1539 ;;		_display
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text8
  1544  000F62                     __ptext8:
  1545                           	opt stack 0
  1546  000F62                     _PosicaoCursorLCD:
  1547                           	opt stack 26
  1548                           
  1549                           ;incstack = 0
  1550                           ;PosicaoCursorLCD@linha stored from wreg
  1551  000F62  6E13               	movwf	PosicaoCursorLCD@linha,c
  1552                           
  1553                           ;displayLCD.c: 295: unsigned char EnderecoLCD = 0x00;
  1554  000F64  0E00               	movlw	0
  1555  000F66  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1556                           
  1557                           ;displayLCD.c: 299: if(coluna <= 16)
  1558  000F68  0E11               	movlw	17
  1559  000F6A  6012               	cpfslt	PosicaoCursorLCD@coluna,c
  1560  000F6C  D02F               	goto	l1848
  1561  000F6E  D01E               	goto	l1844
  1562  000F70                     l70:
  1563                           
  1564                           ;displayLCD.c: 306: EnderecoLCD = 0x00 + coluna;
  1565  000F70  C012  F014         	movff	PosicaoCursorLCD@coluna,PosicaoCursorLCD@EnderecoLCD
  1566                           
  1567                           ;displayLCD.c: 307: EnderecoCursor(EnderecoLCD);
  1568  000F74  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1569  000F76  ECE9  F007         	call	_EnderecoCursor
  1570                           
  1571                           ;displayLCD.c: 308: break;
  1572  000F7A  D026               	goto	l1846
  1573  000F7C                     l1828:
  1574                           
  1575                           ;displayLCD.c: 311: EnderecoLCD = 0x40 + coluna;
  1576  000F7C  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1577  000F7E  0F40               	addlw	64
  1578  000F80  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1579                           
  1580                           ;displayLCD.c: 312: EnderecoCursor(EnderecoLCD);
  1581  000F82  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1582  000F84  ECE9  F007         	call	_EnderecoCursor
  1583                           
  1584                           ;displayLCD.c: 313: break;
  1585  000F88  D01F               	goto	l1846
  1586  000F8A                     l1832:
  1587                           
  1588                           ;displayLCD.c: 316: EnderecoLCD = 0x14 + coluna;
  1589  000F8A  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1590  000F8C  0F14               	addlw	20
  1591  000F8E  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1592                           
  1593                           ;displayLCD.c: 317: EnderecoCursor(EnderecoLCD);
  1594  000F90  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1595  000F92  ECE9  F007         	call	_EnderecoCursor
  1596                           
  1597                           ;displayLCD.c: 318: break;
  1598  000F96  D018               	goto	l1846
  1599  000F98                     l1836:
  1600                           
  1601                           ;displayLCD.c: 321: EnderecoLCD = 0x54 + coluna;
  1602  000F98  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1603  000F9A  0F54               	addlw	84
  1604  000F9C  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1605                           
  1606                           ;displayLCD.c: 322: EnderecoCursor(EnderecoLCD);
  1607  000F9E  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1608  000FA0  ECE9  F007         	call	_EnderecoCursor
  1609                           
  1610                           ;displayLCD.c: 323: break;
  1611  000FA4  D011               	goto	l1846
  1612  000FA6                     l1840:
  1613                           
  1614                           ;displayLCD.c: 326: EnderecoLCD = 0x00;
  1615  000FA6  0E00               	movlw	0
  1616  000FA8  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1617                           
  1618                           ;displayLCD.c: 328: }
  1619                           
  1620                           ;displayLCD.c: 327: break;
  1621  000FAA  D00E               	goto	l1846
  1622  000FAC                     l1844:
  1623  000FAC  5013               	movf	PosicaoCursorLCD@linha,w,c
  1624                           
  1625                           ; Switch size 1, requested type "space"
  1626                           ; Number of cases is 4, Range of values is 1 to 4
  1627                           ; switch strategies available:
  1628                           ; Name         Instructions Cycles
  1629                           ; simple_byte           13     7 (average)
  1630                           ;	Chosen strategy is simple_byte
  1631  000FAE  0A01               	xorlw	1	; case 1
  1632  000FB0  B4D8               	btfsc	status,2,c
  1633  000FB2  D7DE               	goto	l70
  1634  000FB4  0A03               	xorlw	3	; case 2
  1635  000FB6  B4D8               	btfsc	status,2,c
  1636  000FB8  D7E1               	goto	l1828
  1637  000FBA  0A01               	xorlw	1	; case 3
  1638  000FBC  B4D8               	btfsc	status,2,c
  1639  000FBE  D7E5               	goto	l1832
  1640  000FC0  0A07               	xorlw	7	; case 4
  1641  000FC2  B4D8               	btfsc	status,2,c
  1642  000FC4  D7E9               	goto	l1836
  1643  000FC6  D7EF               	goto	l1840
  1644  000FC8                     l1846:
  1645                           
  1646                           ;displayLCD.c: 330: coluna++;
  1647  000FC8  2A12               	incf	PosicaoCursorLCD@coluna,f,c
  1648                           
  1649                           ;displayLCD.c: 331: }
  1650  000FCA  0012               	return	
  1651  000FCC                     l1848:
  1652                           
  1653                           ;displayLCD.c: 332: else
  1654                           ;displayLCD.c: 333: {
  1655                           ;displayLCD.c: 334: EnderecoLCD = 0x00;
  1656  000FCC  0E00               	movlw	0
  1657  000FCE  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1658  000FD0  0012               	return	
  1659  000FD2                     __end_of_PosicaoCursorLCD:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           prodh	equ	0xFF4
  1666                           prodl	equ	0xFF3
  1667                           intcon	equ	0xFF2
  1668                           intcon2	equ	0xFF1
  1669                           intcon3	equ	0xFF0
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           postdec1	equ	0xFE5
  1673                           fsr1l	equ	0xFE1
  1674                           indf2	equ	0xFDF
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _EnderecoCursor *****************
  1680 ;; Defined at:
  1681 ;;		line 236 in file "displayLCD.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  endereco        1    wreg     unsigned char 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  endereco        1   16[COMRAM] unsigned char 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1695 ;;      Params:         0       0       0       0       0       0       0       0       0
  1696 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1698 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1699 ;;Total ram usage:        1 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    2
  1702 ;; This function calls:
  1703 ;;		_Delay
  1704 ;; This function is called by:
  1705 ;;		_PosicaoCursorLCD
  1706 ;;		_CriaCaractereLCD
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text9
  1711  000FD2                     __ptext9:
  1712                           	opt stack 0
  1713  000FD2                     _EnderecoCursor:
  1714                           	opt stack 26
  1715                           
  1716                           ;incstack = 0
  1717                           ;EnderecoCursor@endereco stored from wreg
  1718  000FD2  6E11               	movwf	EnderecoCursor@endereco,c
  1719                           
  1720                           ;displayLCD.c: 239: PORTDbits.RD2 = 0;
  1721  000FD4  9483               	bcf	3971,2,c	;volatile
  1722                           
  1723                           ;displayLCD.c: 240: PORTDbits.RD1 = 0;
  1724  000FD6  9283               	bcf	3971,1,c	;volatile
  1725                           
  1726                           ;displayLCD.c: 241: PORTDbits.RD0 = 0;
  1727  000FD8  9083               	bcf	3971,0,c	;volatile
  1728                           
  1729                           ;displayLCD.c: 244: PORTDbits.RD7 = 1;
  1730  000FDA  8E83               	bsf	3971,7,c	;volatile
  1731                           
  1732                           ;displayLCD.c: 245: if(endereco&0b00010000){PORTDbits.RD4=1;}
  1733  000FDC  A811               	btfss	EnderecoCursor@endereco,4,c
  1734  000FDE  D002               	goto	l51
  1735  000FE0  8883               	bsf	3971,4,c	;volatile
  1736  000FE2  D001               	goto	l1104
  1737  000FE4                     l51:
  1738                           
  1739                           ;displayLCD.c: 246: else {PORTDbits.RD4=0;}
  1740  000FE4  9883               	bcf	3971,4,c	;volatile
  1741  000FE6                     l1104:
  1742                           
  1743                           ;displayLCD.c: 247: if(endereco&0b00100000){PORTDbits.RD5=1;}
  1744  000FE6  AA11               	btfss	EnderecoCursor@endereco,5,c
  1745  000FE8  D002               	goto	l53
  1746  000FEA  8A83               	bsf	3971,5,c	;volatile
  1747  000FEC  D001               	goto	l1108
  1748  000FEE                     l53:
  1749                           
  1750                           ;displayLCD.c: 248: else {PORTDbits.RD5=0;}
  1751  000FEE  9A83               	bcf	3971,5,c	;volatile
  1752  000FF0                     l1108:
  1753                           
  1754                           ;displayLCD.c: 249: if(endereco&0b01000000){PORTDbits.RD6=1;}
  1755  000FF0  AC11               	btfss	EnderecoCursor@endereco,6,c
  1756  000FF2  D002               	goto	l55
  1757  000FF4  8C83               	bsf	3971,6,c	;volatile
  1758  000FF6  D001               	goto	l56
  1759  000FF8                     l55:
  1760                           
  1761                           ;displayLCD.c: 250: else {PORTDbits.RD6=0;}
  1762  000FF8  9C83               	bcf	3971,6,c	;volatile
  1763  000FFA                     l56:
  1764                           
  1765                           ;displayLCD.c: 253: PORTDbits.RD0 = 1;
  1766  000FFA  8083               	bsf	3971,0,c	;volatile
  1767                           
  1768                           ;displayLCD.c: 254: Delay();
  1769  000FFC  EC77  F009         	call	_Delay	;wreg free
  1770                           
  1771                           ;displayLCD.c: 255: PORTDbits.RD0 = 0;
  1772  001000  9083               	bcf	3971,0,c	;volatile
  1773                           
  1774                           ;displayLCD.c: 256: Delay();
  1775  001002  EC77  F009         	call	_Delay	;wreg free
  1776                           
  1777                           ;displayLCD.c: 259: if(endereco&0b00000001){PORTDbits.RD4=1;}
  1778  001006  A011               	btfss	EnderecoCursor@endereco,0,c
  1779  001008  D002               	goto	l57
  1780  00100A  8883               	bsf	3971,4,c	;volatile
  1781  00100C  D001               	goto	l58
  1782  00100E                     l57:
  1783                           
  1784                           ;displayLCD.c: 260: else {PORTDbits.RD4=0;}
  1785  00100E  9883               	bcf	3971,4,c	;volatile
  1786  001010                     l58:
  1787                           
  1788                           ;displayLCD.c: 261: if(endereco&0b00000010){PORTDbits.RD5=1;}
  1789  001010  A211               	btfss	EnderecoCursor@endereco,1,c
  1790  001012  D002               	goto	l59
  1791  001014  8A83               	bsf	3971,5,c	;volatile
  1792  001016  D001               	goto	l60
  1793  001018                     l59:
  1794                           
  1795                           ;displayLCD.c: 262: else {PORTDbits.RD5=0;}
  1796  001018  9A83               	bcf	3971,5,c	;volatile
  1797  00101A                     l60:
  1798                           
  1799                           ;displayLCD.c: 263: if(endereco&0b00000100){PORTDbits.RD6=1;}
  1800  00101A  A411               	btfss	EnderecoCursor@endereco,2,c
  1801  00101C  D002               	goto	l61
  1802  00101E  8C83               	bsf	3971,6,c	;volatile
  1803  001020  D001               	goto	l62
  1804  001022                     l61:
  1805                           
  1806                           ;displayLCD.c: 264: else {PORTDbits.RD6=0;}
  1807  001022  9C83               	bcf	3971,6,c	;volatile
  1808  001024                     l62:
  1809                           
  1810                           ;displayLCD.c: 265: if(endereco&0b00001000){PORTDbits.RD7=1;}
  1811  001024  A611               	btfss	EnderecoCursor@endereco,3,c
  1812  001026  D002               	goto	l63
  1813  001028  8E83               	bsf	3971,7,c	;volatile
  1814  00102A  D001               	goto	l64
  1815  00102C                     l63:
  1816                           
  1817                           ;displayLCD.c: 266: else {PORTDbits.RD7=0;}
  1818  00102C  9E83               	bcf	3971,7,c	;volatile
  1819  00102E                     l64:
  1820                           
  1821                           ;displayLCD.c: 269: PORTDbits.RD0 = 1;
  1822  00102E  8083               	bsf	3971,0,c	;volatile
  1823                           
  1824                           ;displayLCD.c: 270: Delay();
  1825  001030  EC77  F009         	call	_Delay	;wreg free
  1826                           
  1827                           ;displayLCD.c: 271: PORTDbits.RD0 = 0;
  1828  001034  9083               	bcf	3971,0,c	;volatile
  1829                           
  1830                           ;displayLCD.c: 272: Delay();
  1831  001036  EC77  F009         	call	_Delay	;wreg free
  1832  00103A  0012               	return		;funcret
  1833  00103C                     __end_of_EnderecoCursor:
  1834                           	opt stack 0
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           tblptrl	equ	0xFF6
  1838                           tablat	equ	0xFF5
  1839                           prodh	equ	0xFF4
  1840                           prodl	equ	0xFF3
  1841                           intcon	equ	0xFF2
  1842                           intcon2	equ	0xFF1
  1843                           intcon3	equ	0xFF0
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           postdec1	equ	0xFE5
  1847                           fsr1l	equ	0xFE1
  1848                           indf2	equ	0xFDF
  1849                           fsr2h	equ	0xFDA
  1850                           fsr2l	equ	0xFD9
  1851                           status	equ	0xFD8
  1852                           
  1853 ;; *************** function _EscreveFraseRamLCD *****************
  1854 ;; Defined at:
  1855 ;;		line 470 in file "displayLCD.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  buffer          2   17[COMRAM] PTR unsigned char 
  1858 ;;		 -> STR_2(3), STR_1(3), odoParcial(7), odoTotal(7), 
  1859 ;;		 -> EscreveInteiroLCD@texto(7), 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1871 ;;      Params:         2       0       0       0       0       0       0       0       0
  1872 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1874 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1875 ;;Total ram usage:        2 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    3
  1878 ;; This function calls:
  1879 ;;		_EscreveCaractereLCD
  1880 ;; This function is called by:
  1881 ;;		_odometroTotal
  1882 ;;		_odometroParcial
  1883 ;;		_display
  1884 ;;		_EscreveInteiroLCD
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text10
  1889  0010EC                     __ptext10:
  1890                           	opt stack 0
  1891  0010EC                     _EscreveFraseRamLCD:
  1892                           	opt stack 26
  1893                           
  1894                           ;displayLCD.c: 472: while(*buffer)
  1895                           
  1896                           ;incstack = 0
  1897  0010EC  D014               	goto	l1856
  1898  0010EE                     l1852:
  1899                           
  1900                           ;displayLCD.c: 473: {
  1901                           ;displayLCD.c: 474: EscreveCaractereLCD(*buffer);
  1902  0010EE  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1903  0010F2  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1904  0010F6  6AF8               	clrf	tblptru,c
  1905  0010F8  0E07               	movlw	(high __ramtop+-1)
  1906  0010FA  64F7               	cpfsgt	tblptrh,c
  1907  0010FC  D003               	bra	u1117
  1908  0010FE  0008               	tblrd		*
  1909  001100  50F5               	movf	tablat,w,c
  1910  001102  D005               	bra	u1110
  1911  001104                     u1117:
  1912  001104  CFF6 FFE9          	movff	tblptrl,fsr0l
  1913  001108  CFF7 FFEA          	movff	tblptrh,fsr0h
  1914  00110C  50EF               	movf	indf0,w,c
  1915  00110E                     u1110:
  1916  00110E  EC78  F007         	call	_EscreveCaractereLCD
  1917                           
  1918                           ;displayLCD.c: 475: buffer++;
  1919  001112  4A12               	infsnz	EscreveFraseRamLCD@buffer,f,c
  1920  001114  2A13               	incf	EscreveFraseRamLCD@buffer+1,f,c
  1921  001116                     l1856:
  1922  001116  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1923  00111A  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1924  00111E  6AF8               	clrf	tblptru,c
  1925  001120  0E07               	movlw	(high __ramtop+-1)
  1926  001122  64F7               	cpfsgt	tblptrh,c
  1927  001124  D003               	bra	u1127
  1928  001126  0008               	tblrd		*
  1929  001128  50F5               	movf	tablat,w,c
  1930  00112A  D005               	bra	u1120
  1931  00112C                     u1127:
  1932  00112C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1933  001130  CFF7 FFEA          	movff	tblptrh,fsr0h
  1934  001134  50EF               	movf	indf0,w,c
  1935  001136                     u1120:
  1936  001136  0900               	iorlw	0
  1937  001138  B4D8               	btfsc	status,2,c
  1938  00113A  0012               	return	
  1939  00113C  D7D8               	goto	l1852
  1940  00113E                     __end_of_EscreveFraseRamLCD:
  1941                           	opt stack 0
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           prodh	equ	0xFF4
  1947                           prodl	equ	0xFF3
  1948                           intcon	equ	0xFF2
  1949                           intcon2	equ	0xFF1
  1950                           intcon3	equ	0xFF0
  1951                           indf0	equ	0xFEF
  1952                           postinc0	equ	0xFEE
  1953                           fsr0h	equ	0xFEA
  1954                           fsr0l	equ	0xFE9
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _EscreveCaractereLCD *****************
  1964 ;; Defined at:
  1965 ;;		line 348 in file "displayLCD.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  data            1    wreg     unsigned char 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  data            1   16[COMRAM] unsigned char 
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      void 
  1972 ;; Registers used:
  1973 ;;		wreg, status,2, status,0, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1979 ;;      Params:         0       0       0       0       0       0       0       0       0
  1980 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1981 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1982 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1983 ;;Total ram usage:        1 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    2
  1986 ;; This function calls:
  1987 ;;		_Delay
  1988 ;; This function is called by:
  1989 ;;		_EscreveFraseRamLCD
  1990 ;;		_EscreveFloatLCD
  1991 ;;		_EscreveFraseLCD
  1992 ;;		_CriaCaractereLCD
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text11
  1997  000EF0                     __ptext11:
  1998                           	opt stack 0
  1999  000EF0                     _EscreveCaractereLCD:
  2000                           	opt stack 26
  2001                           
  2002                           ;incstack = 0
  2003                           ;EscreveCaractereLCD@data stored from wreg
  2004  000EF0  6E11               	movwf	EscreveCaractereLCD@data,c
  2005                           
  2006                           ;displayLCD.c: 351: PORTDbits.RD2 = 0;
  2007  000EF2  9483               	bcf	3971,2,c	;volatile
  2008                           
  2009                           ;displayLCD.c: 352: PORTDbits.RD1 = 1;
  2010  000EF4  8283               	bsf	3971,1,c	;volatile
  2011                           
  2012                           ;displayLCD.c: 353: PORTDbits.RD0 = 0;
  2013  000EF6  9083               	bcf	3971,0,c	;volatile
  2014                           
  2015                           ;displayLCD.c: 356: if(data&0b00010000){PORTDbits.RD4=1;}
  2016  000EF8  A811               	btfss	EscreveCaractereLCD@data,4,c
  2017  000EFA  D002               	goto	l80
  2018  000EFC  8883               	bsf	3971,4,c	;volatile
  2019  000EFE  D001               	goto	l1136
  2020  000F00                     l80:
  2021                           
  2022                           ;displayLCD.c: 357: else {PORTDbits.RD4=0;}
  2023  000F00  9883               	bcf	3971,4,c	;volatile
  2024  000F02                     l1136:
  2025                           
  2026                           ;displayLCD.c: 358: if(data&0b00100000){PORTDbits.RD5=1;}
  2027  000F02  AA11               	btfss	EscreveCaractereLCD@data,5,c
  2028  000F04  D002               	goto	l82
  2029  000F06  8A83               	bsf	3971,5,c	;volatile
  2030  000F08  D001               	goto	l1140
  2031  000F0A                     l82:
  2032                           
  2033                           ;displayLCD.c: 359: else {PORTDbits.RD5=0;}
  2034  000F0A  9A83               	bcf	3971,5,c	;volatile
  2035  000F0C                     l1140:
  2036                           
  2037                           ;displayLCD.c: 360: if(data&0b01000000){PORTDbits.RD6=1;}
  2038  000F0C  AC11               	btfss	EscreveCaractereLCD@data,6,c
  2039  000F0E  D002               	goto	l84
  2040  000F10  8C83               	bsf	3971,6,c	;volatile
  2041  000F12  D001               	goto	l1144
  2042  000F14                     l84:
  2043                           
  2044                           ;displayLCD.c: 361: else {PORTDbits.RD6=0;}
  2045  000F14  9C83               	bcf	3971,6,c	;volatile
  2046  000F16                     l1144:
  2047                           
  2048                           ;displayLCD.c: 362: if(data&0b10000000){PORTDbits.RD7=1;}
  2049  000F16  AE11               	btfss	EscreveCaractereLCD@data,7,c
  2050  000F18  D002               	goto	l86
  2051  000F1A  8E83               	bsf	3971,7,c	;volatile
  2052  000F1C  D001               	goto	l87
  2053  000F1E                     l86:
  2054                           
  2055                           ;displayLCD.c: 363: else {PORTDbits.RD7=0;}
  2056  000F1E  9E83               	bcf	3971,7,c	;volatile
  2057  000F20                     l87:
  2058                           
  2059                           ;displayLCD.c: 366: PORTDbits.RD0 = 1;
  2060  000F20  8083               	bsf	3971,0,c	;volatile
  2061                           
  2062                           ;displayLCD.c: 367: Delay();
  2063  000F22  EC77  F009         	call	_Delay	;wreg free
  2064                           
  2065                           ;displayLCD.c: 368: PORTDbits.RD0 = 0;
  2066  000F26  9083               	bcf	3971,0,c	;volatile
  2067                           
  2068                           ;displayLCD.c: 369: Delay();
  2069  000F28  EC77  F009         	call	_Delay	;wreg free
  2070                           
  2071                           ;displayLCD.c: 373: if(data&0b00000001){PORTDbits.RD4=1;}
  2072  000F2C  A011               	btfss	EscreveCaractereLCD@data,0,c
  2073  000F2E  D002               	goto	l88
  2074  000F30  8883               	bsf	3971,4,c	;volatile
  2075  000F32  D001               	goto	l89
  2076  000F34                     l88:
  2077                           
  2078                           ;displayLCD.c: 374: else {PORTDbits.RD4=0;}
  2079  000F34  9883               	bcf	3971,4,c	;volatile
  2080  000F36                     l89:
  2081                           
  2082                           ;displayLCD.c: 375: if(data&0b00000010){PORTDbits.RD5=1;}
  2083  000F36  A211               	btfss	EscreveCaractereLCD@data,1,c
  2084  000F38  D002               	goto	l90
  2085  000F3A  8A83               	bsf	3971,5,c	;volatile
  2086  000F3C  D001               	goto	l91
  2087  000F3E                     l90:
  2088                           
  2089                           ;displayLCD.c: 376: else {PORTDbits.RD5=0;}
  2090  000F3E  9A83               	bcf	3971,5,c	;volatile
  2091  000F40                     l91:
  2092                           
  2093                           ;displayLCD.c: 377: if(data&0b00000100){PORTDbits.RD6=1;}
  2094  000F40  A411               	btfss	EscreveCaractereLCD@data,2,c
  2095  000F42  D002               	goto	l92
  2096  000F44  8C83               	bsf	3971,6,c	;volatile
  2097  000F46  D001               	goto	l93
  2098  000F48                     l92:
  2099                           
  2100                           ;displayLCD.c: 378: else {PORTDbits.RD6=0;}
  2101  000F48  9C83               	bcf	3971,6,c	;volatile
  2102  000F4A                     l93:
  2103                           
  2104                           ;displayLCD.c: 379: if(data&0b00001000){PORTDbits.RD7=1;}
  2105  000F4A  A611               	btfss	EscreveCaractereLCD@data,3,c
  2106  000F4C  D002               	goto	l94
  2107  000F4E  8E83               	bsf	3971,7,c	;volatile
  2108  000F50  D001               	goto	l95
  2109  000F52                     l94:
  2110                           
  2111                           ;displayLCD.c: 380: else {PORTDbits.RD7=0;}
  2112  000F52  9E83               	bcf	3971,7,c	;volatile
  2113  000F54                     l95:
  2114                           
  2115                           ;displayLCD.c: 383: PORTDbits.RD0 = 1;
  2116  000F54  8083               	bsf	3971,0,c	;volatile
  2117                           
  2118                           ;displayLCD.c: 384: Delay();
  2119  000F56  EC77  F009         	call	_Delay	;wreg free
  2120                           
  2121                           ;displayLCD.c: 385: PORTDbits.RD0 = 0;
  2122  000F5A  9083               	bcf	3971,0,c	;volatile
  2123                           
  2124                           ;displayLCD.c: 386: Delay();
  2125  000F5C  EC77  F009         	call	_Delay	;wreg free
  2126  000F60  0012               	return		;funcret
  2127  000F62                     __end_of_EscreveCaractereLCD:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           prodh	equ	0xFF4
  2134                           prodl	equ	0xFF3
  2135                           intcon	equ	0xFF2
  2136                           intcon2	equ	0xFF1
  2137                           intcon3	equ	0xFF0
  2138                           indf0	equ	0xFEF
  2139                           postinc0	equ	0xFEE
  2140                           fsr0h	equ	0xFEA
  2141                           fsr0l	equ	0xFE9
  2142                           wreg	equ	0xFE8
  2143                           postdec1	equ	0xFE5
  2144                           fsr1l	equ	0xFE1
  2145                           indf2	equ	0xFDF
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _Init_EEPROM *****************
  2151 ;; Defined at:
  2152 ;;		line 5 in file "EEPROM.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;		None
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2166 ;;      Params:         0       0       0       0       0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2169 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2170 ;;Total ram usage:        0 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    1
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_main
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text12
  2181  001358                     __ptext12:
  2182                           	opt stack 0
  2183  001358                     _Init_EEPROM:
  2184                           	opt stack 29
  2185                           
  2186                           ;EEPROM.c: 7: EECON1 = 0b00000100;
  2187                           
  2188                           ;incstack = 0
  2189  001358  0E04               	movlw	4
  2190  00135A  6EA6               	movwf	4006,c	;volatile
  2191  00135C  0012               	return		;funcret
  2192  00135E                     __end_of_Init_EEPROM:
  2193                           	opt stack 0
  2194                           tblptru	equ	0xFF8
  2195                           tblptrh	equ	0xFF7
  2196                           tblptrl	equ	0xFF6
  2197                           tablat	equ	0xFF5
  2198                           prodh	equ	0xFF4
  2199                           prodl	equ	0xFF3
  2200                           intcon	equ	0xFF2
  2201                           intcon2	equ	0xFF1
  2202                           intcon3	equ	0xFF0
  2203                           indf0	equ	0xFEF
  2204                           postinc0	equ	0xFEE
  2205                           fsr0h	equ	0xFEA
  2206                           fsr0l	equ	0xFE9
  2207                           wreg	equ	0xFE8
  2208                           postdec1	equ	0xFE5
  2209                           fsr1l	equ	0xFE1
  2210                           indf2	equ	0xFDF
  2211                           fsr2h	equ	0xFDA
  2212                           fsr2l	equ	0xFD9
  2213                           status	equ	0xFD8
  2214                           
  2215 ;; *************** function _ConfiguraLCD *****************
  2216 ;; Defined at:
  2217 ;;		line 87 in file "displayLCD.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;		None
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, status,0, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2231 ;;      Params:         0       0       0       0       0       0       0       0       0
  2232 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2233 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2234 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2235 ;;Total ram usage:        1 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    3
  2238 ;; This function calls:
  2239 ;;		_Delay
  2240 ;;		_EscreveComandoLCD
  2241 ;; This function is called by:
  2242 ;;		_main
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text13
  2247  000D3A                     __ptext13:
  2248                           	opt stack 0
  2249  000D3A                     _ConfiguraLCD:
  2250                           	opt stack 27
  2251                           
  2252                           ;displayLCD.c: 90: TRISDbits.RD2 = 0;
  2253                           
  2254                           ;incstack = 0
  2255  000D3A  9495               	bcf	3989,2,c	;volatile
  2256                           
  2257                           ;displayLCD.c: 91: TRISDbits.RD1 = 0;
  2258  000D3C  9295               	bcf	3989,1,c	;volatile
  2259                           
  2260                           ;displayLCD.c: 92: TRISDbits.RD0 = 0;
  2261  000D3E  9095               	bcf	3989,0,c	;volatile
  2262                           
  2263                           ;displayLCD.c: 95: TRISDbits.RD4=0;
  2264  000D40  9895               	bcf	3989,4,c	;volatile
  2265                           
  2266                           ;displayLCD.c: 96: TRISDbits.RD5=0;
  2267  000D42  9A95               	bcf	3989,5,c	;volatile
  2268                           
  2269                           ;displayLCD.c: 97: TRISDbits.RD6=0;
  2270  000D44  9C95               	bcf	3989,6,c	;volatile
  2271                           
  2272                           ;displayLCD.c: 98: TRISDbits.RD7=0;
  2273  000D46  9E95               	bcf	3989,7,c	;volatile
  2274                           
  2275                           ;displayLCD.c: 105: PORTDbits.RD2 = 0;
  2276  000D48  9483               	bcf	3971,2,c	;volatile
  2277                           
  2278                           ;displayLCD.c: 106: PORTDbits.RD1 = 0;
  2279  000D4A  9283               	bcf	3971,1,c	;volatile
  2280                           
  2281                           ;displayLCD.c: 107: PORTDbits.RD0 = 0;
  2282  000D4C  9083               	bcf	3971,0,c	;volatile
  2283                           
  2284                           ;displayLCD.c: 111: PORTDbits.RD7=0;
  2285  000D4E  9E83               	bcf	3971,7,c	;volatile
  2286                           
  2287                           ;displayLCD.c: 112: PORTDbits.RD6=0;
  2288  000D50  9C83               	bcf	3971,6,c	;volatile
  2289                           
  2290                           ;displayLCD.c: 113: PORTDbits.RD5=1;
  2291  000D52  8A83               	bsf	3971,5,c	;volatile
  2292                           
  2293                           ;displayLCD.c: 114: PORTDbits.RD4=1;
  2294  000D54  8883               	bsf	3971,4,c	;volatile
  2295                           
  2296                           ;displayLCD.c: 119: _delay((unsigned long)((15)*(48000000/4000.0)));
  2297  000D56  0EEA               	movlw	234
  2298  000D58  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2299  000D5A  0EC3               	movlw	195
  2300  000D5C                     u1967:
  2301  000D5C  2EE8               	decfsz	wreg,f,c
  2302  000D5E  D7FE               	bra	u1967
  2303  000D60  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2304  000D62  D7FC               	bra	u1967
  2305  000D64  F000               	nop	
  2306                           
  2307                           ;displayLCD.c: 123: PORTDbits.RD0 = 1;
  2308  000D66  8083               	bsf	3971,0,c	;volatile
  2309                           
  2310                           ;displayLCD.c: 124: Delay();
  2311  000D68  EC77  F009         	call	_Delay	;wreg free
  2312                           
  2313                           ;displayLCD.c: 125: PORTDbits.RD0 = 0;
  2314  000D6C  9083               	bcf	3971,0,c	;volatile
  2315                           
  2316                           ;displayLCD.c: 126: Delay();
  2317  000D6E  EC77  F009         	call	_Delay	;wreg free
  2318                           
  2319                           ;displayLCD.c: 131: _delay((unsigned long)((5)*(48000000/4000.0)));
  2320  000D72  0E4E               	movlw	78
  2321  000D74  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2322  000D76  0EEB               	movlw	235
  2323  000D78                     u1977:
  2324  000D78  2EE8               	decfsz	wreg,f,c
  2325  000D7A  D7FE               	bra	u1977
  2326  000D7C  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2327  000D7E  D7FC               	bra	u1977
  2328  000D80  F000               	nop	
  2329                           
  2330                           ;displayLCD.c: 134: PORTDbits.RD0 = 1;
  2331  000D82  8083               	bsf	3971,0,c	;volatile
  2332                           
  2333                           ;displayLCD.c: 135: Delay();
  2334  000D84  EC77  F009         	call	_Delay	;wreg free
  2335                           
  2336                           ;displayLCD.c: 136: PORTDbits.RD0 = 0;
  2337  000D88  9083               	bcf	3971,0,c	;volatile
  2338                           
  2339                           ;displayLCD.c: 137: Delay();
  2340  000D8A  EC77  F009         	call	_Delay	;wreg free
  2341                           
  2342                           ;displayLCD.c: 142: _delay((unsigned long)((5)*(48000000/4000.0)));
  2343  000D8E  0E4E               	movlw	78
  2344  000D90  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2345  000D92  0EEB               	movlw	235
  2346  000D94                     u1987:
  2347  000D94  2EE8               	decfsz	wreg,f,c
  2348  000D96  D7FE               	bra	u1987
  2349  000D98  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2350  000D9A  D7FC               	bra	u1987
  2351  000D9C  F000               	nop	
  2352                           
  2353                           ;displayLCD.c: 145: PORTDbits.RD0 = 1;
  2354  000D9E  8083               	bsf	3971,0,c	;volatile
  2355                           
  2356                           ;displayLCD.c: 146: Delay();
  2357  000DA0  EC77  F009         	call	_Delay	;wreg free
  2358                           
  2359                           ;displayLCD.c: 147: PORTDbits.RD0 = 0;
  2360  000DA4  9083               	bcf	3971,0,c	;volatile
  2361                           
  2362                           ;displayLCD.c: 148: Delay();
  2363  000DA6  EC77  F009         	call	_Delay	;wreg free
  2364                           
  2365                           ;displayLCD.c: 151: PORTDbits.RD7=0;
  2366  000DAA  9E83               	bcf	3971,7,c	;volatile
  2367                           
  2368                           ;displayLCD.c: 152: PORTDbits.RD6=0;
  2369  000DAC  9C83               	bcf	3971,6,c	;volatile
  2370                           
  2371                           ;displayLCD.c: 153: PORTDbits.RD5=1;
  2372  000DAE  8A83               	bsf	3971,5,c	;volatile
  2373                           
  2374                           ;displayLCD.c: 154: PORTDbits.RD4=0;
  2375  000DB0  9883               	bcf	3971,4,c	;volatile
  2376                           
  2377                           ;displayLCD.c: 158: PORTDbits.RD0 = 1;
  2378  000DB2  8083               	bsf	3971,0,c	;volatile
  2379                           
  2380                           ;displayLCD.c: 159: Delay();
  2381  000DB4  EC77  F009         	call	_Delay	;wreg free
  2382                           
  2383                           ;displayLCD.c: 160: PORTDbits.RD0 = 0;
  2384  000DB8  9083               	bcf	3971,0,c	;volatile
  2385                           
  2386                           ;displayLCD.c: 161: Delay();
  2387  000DBA  EC77  F009         	call	_Delay	;wreg free
  2388                           
  2389                           ;displayLCD.c: 165: EscreveComandoLCD(0b00101000);
  2390  000DBE  0E28               	movlw	40
  2391  000DC0  ECEC  F006         	call	_EscreveComandoLCD
  2392                           
  2393                           ;displayLCD.c: 166: EscreveComandoLCD(0b00000110);
  2394  000DC4  0E06               	movlw	6
  2395  000DC6  ECEC  F006         	call	_EscreveComandoLCD
  2396                           
  2397                           ;displayLCD.c: 167: EscreveComandoLCD(0b00001110);
  2398  000DCA  0E0E               	movlw	14
  2399  000DCC  ECEC  F006         	call	_EscreveComandoLCD
  2400                           
  2401                           ;displayLCD.c: 168: EscreveComandoLCD(0b00000001);
  2402  000DD0  0E01               	movlw	1
  2403  000DD2  ECEC  F006         	call	_EscreveComandoLCD
  2404  000DD6  0012               	return		;funcret
  2405  000DD8                     __end_of_ConfiguraLCD:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           prodh	equ	0xFF4
  2412                           prodl	equ	0xFF3
  2413                           intcon	equ	0xFF2
  2414                           intcon2	equ	0xFF1
  2415                           intcon3	equ	0xFF0
  2416                           indf0	equ	0xFEF
  2417                           postinc0	equ	0xFEE
  2418                           fsr0h	equ	0xFEA
  2419                           fsr0l	equ	0xFE9
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1l	equ	0xFE1
  2423                           indf2	equ	0xFDF
  2424                           fsr2h	equ	0xFDA
  2425                           fsr2l	equ	0xFD9
  2426                           status	equ	0xFD8
  2427                           
  2428 ;; *************** function _EscreveComandoLCD *****************
  2429 ;; Defined at:
  2430 ;;		line 179 in file "displayLCD.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  cmd             1    wreg     unsigned char 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  cmd             1   16[COMRAM] unsigned char 
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  1    wreg      void 
  2437 ;; Registers used:
  2438 ;;		wreg, status,2, status,0, cstack
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2444 ;;      Params:         0       0       0       0       0       0       0       0       0
  2445 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2447 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2448 ;;Total ram usage:        1 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    2
  2451 ;; This function calls:
  2452 ;;		_Delay
  2453 ;; This function is called by:
  2454 ;;		_ConfiguraLCD
  2455 ;;		_CriaCaractereLCD
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text14
  2460  000DD8                     __ptext14:
  2461                           	opt stack 0
  2462  000DD8                     _EscreveComandoLCD:
  2463                           	opt stack 27
  2464                           
  2465                           ;incstack = 0
  2466                           ;EscreveComandoLCD@cmd stored from wreg
  2467  000DD8  6E11               	movwf	EscreveComandoLCD@cmd,c
  2468                           
  2469                           ;displayLCD.c: 182: PORTDbits.RD2 = 0;
  2470  000DDA  9483               	bcf	3971,2,c	;volatile
  2471                           
  2472                           ;displayLCD.c: 183: PORTDbits.RD1 = 0;
  2473  000DDC  9283               	bcf	3971,1,c	;volatile
  2474                           
  2475                           ;displayLCD.c: 184: PORTDbits.RD0 = 0;
  2476  000DDE  9083               	bcf	3971,0,c	;volatile
  2477                           
  2478                           ;displayLCD.c: 187: if(cmd&0b00010000){PORTDbits.RD4=1;}
  2479  000DE0  A811               	btfss	EscreveComandoLCD@cmd,4,c
  2480  000DE2  D002               	goto	l29
  2481  000DE4  8883               	bsf	3971,4,c	;volatile
  2482  000DE6  D001               	goto	l1212
  2483  000DE8                     l29:
  2484                           
  2485                           ;displayLCD.c: 188: else {PORTDbits.RD4=0;}
  2486  000DE8  9883               	bcf	3971,4,c	;volatile
  2487  000DEA                     l1212:
  2488                           
  2489                           ;displayLCD.c: 189: if(cmd&0b00100000){PORTDbits.RD5=1;}
  2490  000DEA  AA11               	btfss	EscreveComandoLCD@cmd,5,c
  2491  000DEC  D002               	goto	l31
  2492  000DEE  8A83               	bsf	3971,5,c	;volatile
  2493  000DF0  D001               	goto	l1216
  2494  000DF2                     l31:
  2495                           
  2496                           ;displayLCD.c: 190: else {PORTDbits.RD5=0;}
  2497  000DF2  9A83               	bcf	3971,5,c	;volatile
  2498  000DF4                     l1216:
  2499                           
  2500                           ;displayLCD.c: 191: if(cmd&0b01000000){PORTDbits.RD6=1;}
  2501  000DF4  AC11               	btfss	EscreveComandoLCD@cmd,6,c
  2502  000DF6  D002               	goto	l33
  2503  000DF8  8C83               	bsf	3971,6,c	;volatile
  2504  000DFA  D001               	goto	l1220
  2505  000DFC                     l33:
  2506                           
  2507                           ;displayLCD.c: 192: else {PORTDbits.RD6=0;}
  2508  000DFC  9C83               	bcf	3971,6,c	;volatile
  2509  000DFE                     l1220:
  2510                           
  2511                           ;displayLCD.c: 193: if(cmd&0b10000000){PORTDbits.RD7=1;}
  2512  000DFE  AE11               	btfss	EscreveComandoLCD@cmd,7,c
  2513  000E00  D002               	goto	l35
  2514  000E02  8E83               	bsf	3971,7,c	;volatile
  2515  000E04  D001               	goto	l36
  2516  000E06                     l35:
  2517                           
  2518                           ;displayLCD.c: 194: else {PORTDbits.RD7=0;}
  2519  000E06  9E83               	bcf	3971,7,c	;volatile
  2520  000E08                     l36:
  2521                           
  2522                           ;displayLCD.c: 197: PORTDbits.RD0 = 1;
  2523  000E08  8083               	bsf	3971,0,c	;volatile
  2524                           
  2525                           ;displayLCD.c: 198: Delay();
  2526  000E0A  EC77  F009         	call	_Delay	;wreg free
  2527                           
  2528                           ;displayLCD.c: 199: PORTDbits.RD0 = 0;
  2529  000E0E  9083               	bcf	3971,0,c	;volatile
  2530                           
  2531                           ;displayLCD.c: 200: Delay();
  2532  000E10  EC77  F009         	call	_Delay	;wreg free
  2533                           
  2534                           ;displayLCD.c: 203: if(cmd&0b00000001){PORTDbits.RD4=1;}
  2535  000E14  A011               	btfss	EscreveComandoLCD@cmd,0,c
  2536  000E16  D002               	goto	l37
  2537  000E18  8883               	bsf	3971,4,c	;volatile
  2538  000E1A  D001               	goto	l38
  2539  000E1C                     l37:
  2540                           
  2541                           ;displayLCD.c: 204: else {PORTDbits.RD4=0;}
  2542  000E1C  9883               	bcf	3971,4,c	;volatile
  2543  000E1E                     l38:
  2544                           
  2545                           ;displayLCD.c: 205: if(cmd&0b00000010){PORTDbits.RD5=1;}
  2546  000E1E  A211               	btfss	EscreveComandoLCD@cmd,1,c
  2547  000E20  D002               	goto	l39
  2548  000E22  8A83               	bsf	3971,5,c	;volatile
  2549  000E24  D001               	goto	l40
  2550  000E26                     l39:
  2551                           
  2552                           ;displayLCD.c: 206: else {PORTDbits.RD5=0;}
  2553  000E26  9A83               	bcf	3971,5,c	;volatile
  2554  000E28                     l40:
  2555                           
  2556                           ;displayLCD.c: 207: if(cmd&0b00000100){PORTDbits.RD6=1;}
  2557  000E28  A411               	btfss	EscreveComandoLCD@cmd,2,c
  2558  000E2A  D002               	goto	l41
  2559  000E2C  8C83               	bsf	3971,6,c	;volatile
  2560  000E2E  D001               	goto	l42
  2561  000E30                     l41:
  2562                           
  2563                           ;displayLCD.c: 208: else {PORTDbits.RD6=0;}
  2564  000E30  9C83               	bcf	3971,6,c	;volatile
  2565  000E32                     l42:
  2566                           
  2567                           ;displayLCD.c: 209: if(cmd&0b00001000){PORTDbits.RD7=1;}
  2568  000E32  A611               	btfss	EscreveComandoLCD@cmd,3,c
  2569  000E34  D002               	goto	l43
  2570  000E36  8E83               	bsf	3971,7,c	;volatile
  2571  000E38  D001               	goto	l44
  2572  000E3A                     l43:
  2573                           
  2574                           ;displayLCD.c: 210: else {PORTDbits.RD7=0;}
  2575  000E3A  9E83               	bcf	3971,7,c	;volatile
  2576  000E3C                     l44:
  2577                           
  2578                           ;displayLCD.c: 213: PORTDbits.RD0 = 1;
  2579  000E3C  8083               	bsf	3971,0,c	;volatile
  2580                           
  2581                           ;displayLCD.c: 214: Delay();
  2582  000E3E  EC77  F009         	call	_Delay	;wreg free
  2583                           
  2584                           ;displayLCD.c: 215: PORTDbits.RD0 = 0;
  2585  000E42  9083               	bcf	3971,0,c	;volatile
  2586                           
  2587                           ;displayLCD.c: 216: Delay();
  2588  000E44  EC77  F009         	call	_Delay	;wreg free
  2589                           
  2590                           ;displayLCD.c: 221: if (cmd==0x01 || cmd==0x02 || cmd==0x03)
  2591  000E48  0411               	decf	EscreveComandoLCD@cmd,w,c
  2592  000E4A  B4D8               	btfsc	status,2,c
  2593  000E4C  D008               	goto	l1248
  2594  000E4E  0E02               	movlw	2
  2595  000E50  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2596  000E52  B4D8               	btfsc	status,2,c
  2597  000E54  D004               	goto	l1248
  2598  000E56  0E03               	movlw	3
  2599  000E58  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2600  000E5A  A4D8               	btfss	status,2,c
  2601  000E5C  0012               	return	
  2602  000E5E                     l1248:
  2603                           
  2604                           ;displayLCD.c: 222: { Delay(); }
  2605  000E5E  EC77  F009         	call	_Delay	;wreg free
  2606  000E62  0012               	return	
  2607  000E64                     __end_of_EscreveComandoLCD:
  2608                           	opt stack 0
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           intcon	equ	0xFF2
  2616                           intcon2	equ	0xFF1
  2617                           intcon3	equ	0xFF0
  2618                           indf0	equ	0xFEF
  2619                           postinc0	equ	0xFEE
  2620                           fsr0h	equ	0xFEA
  2621                           fsr0l	equ	0xFE9
  2622                           wreg	equ	0xFE8
  2623                           postdec1	equ	0xFE5
  2624                           fsr1l	equ	0xFE1
  2625                           indf2	equ	0xFDF
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function _Delay *****************
  2631 ;; Defined at:
  2632 ;;		line 61 in file "displayLCD.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  Cnt2            1   15[COMRAM] unsigned char 
  2637 ;;  Cnt1            1   14[COMRAM] unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      void 
  2640 ;; Registers used:
  2641 ;;		wreg, status,2, status,0
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2647 ;;      Params:         0       0       0       0       0       0       0       0       0
  2648 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2650 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2651 ;;Total ram usage:        2 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    1
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_ConfiguraLCD
  2658 ;;		_EscreveComandoLCD
  2659 ;;		_EnderecoCursor
  2660 ;;		_EscreveCaractereLCD
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text15
  2665  0012EE                     __ptext15:
  2666                           	opt stack 0
  2667  0012EE                     _Delay:
  2668                           	opt stack 26
  2669                           
  2670                           ;displayLCD.c: 63: unsigned char Cnt1, Cnt2;
  2671                           ;displayLCD.c: 65: for(Cnt1 = 0; Cnt1<100; Cnt1++)
  2672                           
  2673                           ;incstack = 0
  2674  0012EE  0E00               	movlw	0
  2675  0012F0  6E0F               	movwf	Delay@Cnt1,c
  2676  0012F2                     l1080:
  2677  0012F2  0E63               	movlw	99
  2678  0012F4  640F               	cpfsgt	Delay@Cnt1,c
  2679  0012F6  D001               	goto	l19
  2680  0012F8  0012               	return	
  2681  0012FA                     l19:
  2682                           
  2683                           ;displayLCD.c: 66: {
  2684                           ;displayLCD.c: 67: __nop();
  2685  0012FA  F000               	nop	
  2686                           
  2687                           ;displayLCD.c: 68: for(Cnt2 = 0; Cnt2<50; Cnt2++)
  2688  0012FC  0E00               	movlw	0
  2689  0012FE  6E10               	movwf	Delay@Cnt2,c
  2690  001300                     l1086:
  2691  001300  0E31               	movlw	49
  2692  001302  6410               	cpfsgt	Delay@Cnt2,c
  2693  001304  D001               	goto	l21
  2694  001306  D003               	goto	l1094
  2695  001308                     l21:
  2696                           
  2697                           ;displayLCD.c: 69: {
  2698                           ;displayLCD.c: 70: __nop();
  2699  001308  F000               	nop	
  2700  00130A  2A10               	incf	Delay@Cnt2,f,c
  2701  00130C  D7F9               	goto	l1086
  2702  00130E                     l1094:
  2703  00130E  2A0F               	incf	Delay@Cnt1,f,c
  2704  001310  D7F0               	goto	l1080
  2705  001312                     __end_of_Delay:
  2706                           	opt stack 0
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           intcon	equ	0xFF2
  2714                           intcon2	equ	0xFF1
  2715                           intcon3	equ	0xFF0
  2716                           indf0	equ	0xFEF
  2717                           postinc0	equ	0xFEE
  2718                           fsr0h	equ	0xFEA
  2719                           fsr0l	equ	0xFE9
  2720                           wreg	equ	0xFE8
  2721                           postdec1	equ	0xFE5
  2722                           fsr1l	equ	0xFE1
  2723                           indf2	equ	0xFDF
  2724                           fsr2h	equ	0xFDA
  2725                           fsr2l	equ	0xFD9
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function _Combustivel *****************
  2729 ;; Defined at:
  2730 ;;		line 15 in file "Fuel_Gauge.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2744 ;;      Params:         0       0       0       0       0       0       0       0       0
  2745 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2746 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2747 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2748 ;;Total ram usage:        2 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    3
  2751 ;; This function calls:
  2752 ;;		_TensaoBateria
  2753 ;;		_ValorCombustivel
  2754 ;;		___lwdiv
  2755 ;; This function is called by:
  2756 ;;		_main
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           	psect	text16
  2761  000806                     __ptext16:
  2762                           	opt stack 0
  2763  000806                     _Combustivel:
  2764                           	opt stack 27
  2765                           
  2766                           ;Fuel_Gauge.c: 16: while(primeiroFiltro == 1) {
  2767                           
  2768                           ;incstack = 0
  2769  000806  D00E               	goto	l2246
  2770  000808                     l2230:
  2771                           
  2772                           ;Fuel_Gauge.c: 17: for(primeiroFiltro = 0; primeiroFiltro <= 9; primeiroFiltro ++) {
  2773  000808  0E00               	movlw	0
  2774  00080A  6E35               	movwf	_primeiroFiltro,c
  2775  00080C                     l2232:
  2776  00080C  0E09               	movlw	9
  2777  00080E  6435               	cpfsgt	_primeiroFiltro,c
  2778  000810  D001               	goto	l2236
  2779  000812  D006               	goto	l2244
  2780  000814                     l2236:
  2781                           
  2782                           ;Fuel_Gauge.c: 18: TensaoBateria();
  2783  000814  EC0D  F009         	call	_TensaoBateria	;wreg free
  2784                           
  2785                           ;Fuel_Gauge.c: 19: ValorCombustivel();
  2786  000818  EC32  F007         	call	_ValorCombustivel	;wreg free
  2787  00081C  2A35               	incf	_primeiroFiltro,f,c
  2788  00081E  D7F6               	goto	l2232
  2789  000820                     l2244:
  2790                           
  2791                           ;Fuel_Gauge.c: 20: }
  2792                           ;Fuel_Gauge.c: 22: primeiroFiltro = 0;
  2793  000820  0E00               	movlw	0
  2794  000822  6E35               	movwf	_primeiroFiltro,c
  2795  000824                     l2246:
  2796  000824  0435               	decf	_primeiroFiltro,w,c
  2797  000826  B4D8               	btfsc	status,2,c
  2798  000828  D7EF               	goto	l2230
  2799                           
  2800                           ;Fuel_Gauge.c: 23: }
  2801                           ;Fuel_Gauge.c: 25: if(tempoCombustivel >= 500) {
  2802  00082A  0EF4               	movlw	244
  2803  00082C  5C2E               	subwf	_tempoCombustivel,w,c
  2804  00082E  0E01               	movlw	1
  2805  000830  582F               	subwfb	_tempoCombustivel+1,w,c
  2806  000832  A0D8               	btfss	status,0,c
  2807  000834  D0DC               	goto	l2314
  2808                           
  2809                           ;Fuel_Gauge.c: 26: TensaoBateria();
  2810  000836  EC0D  F009         	call	_TensaoBateria	;wreg free
  2811                           
  2812                           ;Fuel_Gauge.c: 27: ValorCombustivel();
  2813  00083A  EC32  F007         	call	_ValorCombustivel	;wreg free
  2814                           
  2815                           ;Fuel_Gauge.c: 28: valorADCMedia = (combArray[0] + combArray[1] + combArray[2] + combArr
      +                          ay[3] + combArray[4] + combArray[5] + combArray[6] + combArray[7] + combArray[8] + combA
      +                          rray[9]) / 10;
  2816  00083E  0100               	movlb	0	; () banked
  2817  000840  5164               	movf	(_combArray+4)& (0+255),w,b
  2818  000842  0100               	movlb	0	; () banked
  2819  000844  2562               	addwf	(_combArray+2)& (0+255),w,b
  2820  000846  0100               	movlb	0	; () banked
  2821  000848  6F7C               	movwf	??_Combustivel& (0+255),b
  2822  00084A  0100               	movlb	0	; () banked
  2823  00084C  5165               	movf	(_combArray+5)& (0+255),w,b
  2824  00084E  0100               	movlb	0	; () banked
  2825  000850  2163               	addwfc	(_combArray+3)& (0+255),w,b
  2826  000852  0100               	movlb	0	; () banked
  2827  000854  6F7D               	movwf	(??_Combustivel+1)& (0+255),b
  2828  000856  0100               	movlb	0	; () banked
  2829  000858  5166               	movf	(_combArray+6)& (0+255),w,b
  2830  00085A  0100               	movlb	0	; () banked
  2831  00085C  277C               	addwf	??_Combustivel& (0+255),f,b
  2832  00085E  0100               	movlb	0	; () banked
  2833  000860  5167               	movf	(_combArray+7)& (0+255),w,b
  2834  000862  0100               	movlb	0	; () banked
  2835  000864  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2836  000866  0100               	movlb	0	; () banked
  2837  000868  5168               	movf	(_combArray+8)& (0+255),w,b
  2838  00086A  0100               	movlb	0	; () banked
  2839  00086C  277C               	addwf	??_Combustivel& (0+255),f,b
  2840  00086E  0100               	movlb	0	; () banked
  2841  000870  5169               	movf	(_combArray+9)& (0+255),w,b
  2842  000872  0100               	movlb	0	; () banked
  2843  000874  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2844  000876  0100               	movlb	0	; () banked
  2845  000878  516A               	movf	(_combArray+10)& (0+255),w,b
  2846  00087A  0100               	movlb	0	; () banked
  2847  00087C  277C               	addwf	??_Combustivel& (0+255),f,b
  2848  00087E  0100               	movlb	0	; () banked
  2849  000880  516B               	movf	(_combArray+11)& (0+255),w,b
  2850  000882  0100               	movlb	0	; () banked
  2851  000884  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2852  000886  0100               	movlb	0	; () banked
  2853  000888  516C               	movf	(_combArray+12)& (0+255),w,b
  2854  00088A  0100               	movlb	0	; () banked
  2855  00088C  277C               	addwf	??_Combustivel& (0+255),f,b
  2856  00088E  0100               	movlb	0	; () banked
  2857  000890  516D               	movf	(_combArray+13)& (0+255),w,b
  2858  000892  0100               	movlb	0	; () banked
  2859  000894  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2860  000896  0100               	movlb	0	; () banked
  2861  000898  516E               	movf	(_combArray+14)& (0+255),w,b
  2862  00089A  0100               	movlb	0	; () banked
  2863  00089C  277C               	addwf	??_Combustivel& (0+255),f,b
  2864  00089E  0100               	movlb	0	; () banked
  2865  0008A0  516F               	movf	(_combArray+15)& (0+255),w,b
  2866  0008A2  0100               	movlb	0	; () banked
  2867  0008A4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2868  0008A6  0100               	movlb	0	; () banked
  2869  0008A8  5170               	movf	(_combArray+16)& (0+255),w,b
  2870  0008AA  0100               	movlb	0	; () banked
  2871  0008AC  277C               	addwf	??_Combustivel& (0+255),f,b
  2872  0008AE  0100               	movlb	0	; () banked
  2873  0008B0  5171               	movf	(_combArray+17)& (0+255),w,b
  2874  0008B2  0100               	movlb	0	; () banked
  2875  0008B4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2876  0008B6  0100               	movlb	0	; () banked
  2877  0008B8  5172               	movf	(_combArray+18)& (0+255),w,b
  2878  0008BA  0100               	movlb	0	; () banked
  2879  0008BC  277C               	addwf	??_Combustivel& (0+255),f,b
  2880  0008BE  0100               	movlb	0	; () banked
  2881  0008C0  5173               	movf	(_combArray+19)& (0+255),w,b
  2882  0008C2  0100               	movlb	0	; () banked
  2883  0008C4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2884  0008C6  0100               	movlb	0	; () banked
  2885  0008C8  5160               	movf	_combArray& (0+255),w,b
  2886  0008CA  0100               	movlb	0	; () banked
  2887  0008CC  257C               	addwf	??_Combustivel& (0+255),w,b
  2888  0008CE  6E0F               	movwf	___lwdiv@dividend,c
  2889  0008D0  0100               	movlb	0	; () banked
  2890  0008D2  5161               	movf	(_combArray+1)& (0+255),w,b
  2891  0008D4  0100               	movlb	0	; () banked
  2892  0008D6  217D               	addwfc	(??_Combustivel+1)& (0+255),w,b
  2893  0008D8  6E10               	movwf	___lwdiv@dividend+1,c
  2894  0008DA  0E00               	movlw	0
  2895  0008DC  6E12               	movwf	___lwdiv@divisor+1,c
  2896  0008DE  0E0A               	movlw	10
  2897  0008E0  6E11               	movwf	___lwdiv@divisor,c
  2898  0008E2  EC9F  F008         	call	___lwdiv	;wreg free
  2899  0008E6  C00F  F030         	movff	?___lwdiv,_valorADCMedia
  2900  0008EA  C010  F031         	movff	?___lwdiv+1,_valorADCMedia+1
  2901                           
  2902                           ;Fuel_Gauge.c: 30: if(valorADCMedia <= 50) {
  2903  0008EE  5031               	movf	_valorADCMedia+1,w,c
  2904  0008F0  E106               	bnz	l2260
  2905  0008F2  0E33               	movlw	51
  2906  0008F4  5C30               	subwf	_valorADCMedia,w,c
  2907  0008F6  B0D8               	btfsc	status,0,c
  2908  0008F8  D002               	goto	l2260
  2909                           
  2910                           ;Fuel_Gauge.c: 31: PORTB = 0b00000000;
  2911  0008FA  0E00               	movlw	0
  2912  0008FC  6E81               	movwf	3969,c	;volatile
  2913  0008FE                     l2260:
  2914                           
  2915                           ;Fuel_Gauge.c: 32: }
  2916                           ;Fuel_Gauge.c: 33: if(valorADCMedia > 50 && valorADCMedia <= 85) {
  2917  0008FE  5031               	movf	_valorADCMedia+1,w,c
  2918  000900  E104               	bnz	u1770
  2919  000902  0E33               	movlw	51
  2920  000904  5C30               	subwf	_valorADCMedia,w,c
  2921  000906  A0D8               	btfss	status,0,c
  2922  000908  D008               	goto	l2266
  2923  00090A                     u1770:
  2924  00090A  5031               	movf	_valorADCMedia+1,w,c
  2925  00090C  E106               	bnz	l2266
  2926  00090E  0E56               	movlw	86
  2927  000910  5C30               	subwf	_valorADCMedia,w,c
  2928  000912  B0D8               	btfsc	status,0,c
  2929  000914  D002               	goto	l2266
  2930                           
  2931                           ;Fuel_Gauge.c: 34: PORTB = 0b010000000;
  2932  000916  0E80               	movlw	128
  2933  000918  6E81               	movwf	3969,c	;volatile
  2934  00091A                     l2266:
  2935                           
  2936                           ;Fuel_Gauge.c: 35: }
  2937                           ;Fuel_Gauge.c: 36: if(valorADCMedia > 85 && valorADCMedia <= 120) {
  2938  00091A  5031               	movf	_valorADCMedia+1,w,c
  2939  00091C  E104               	bnz	u1790
  2940  00091E  0E56               	movlw	86
  2941  000920  5C30               	subwf	_valorADCMedia,w,c
  2942  000922  A0D8               	btfss	status,0,c
  2943  000924  D008               	goto	l2272
  2944  000926                     u1790:
  2945  000926  5031               	movf	_valorADCMedia+1,w,c
  2946  000928  E106               	bnz	l2272
  2947  00092A  0E79               	movlw	121
  2948  00092C  5C30               	subwf	_valorADCMedia,w,c
  2949  00092E  B0D8               	btfsc	status,0,c
  2950  000930  D002               	goto	l2272
  2951                           
  2952                           ;Fuel_Gauge.c: 37: PORTB = 0b11000000;
  2953  000932  0EC0               	movlw	192
  2954  000934  6E81               	movwf	3969,c	;volatile
  2955  000936                     l2272:
  2956                           
  2957                           ;Fuel_Gauge.c: 38: }
  2958                           ;Fuel_Gauge.c: 39: if(valorADCMedia > 120 && valorADCMedia<= 155) {
  2959  000936  5031               	movf	_valorADCMedia+1,w,c
  2960  000938  E104               	bnz	u1810
  2961  00093A  0E79               	movlw	121
  2962  00093C  5C30               	subwf	_valorADCMedia,w,c
  2963  00093E  A0D8               	btfss	status,0,c
  2964  000940  D008               	goto	l2278
  2965  000942                     u1810:
  2966  000942  5031               	movf	_valorADCMedia+1,w,c
  2967  000944  E106               	bnz	l2278
  2968  000946  0E9C               	movlw	156
  2969  000948  5C30               	subwf	_valorADCMedia,w,c
  2970  00094A  B0D8               	btfsc	status,0,c
  2971  00094C  D002               	goto	l2278
  2972                           
  2973                           ;Fuel_Gauge.c: 40: PORTB = 0b11100000;
  2974  00094E  0EE0               	movlw	224
  2975  000950  6E81               	movwf	3969,c	;volatile
  2976  000952                     l2278:
  2977                           
  2978                           ;Fuel_Gauge.c: 41: }
  2979                           ;Fuel_Gauge.c: 42: if(valorADCMedia > 155 && valorADCMedia <= 190) {
  2980  000952  5031               	movf	_valorADCMedia+1,w,c
  2981  000954  E104               	bnz	u1830
  2982  000956  0E9C               	movlw	156
  2983  000958  5C30               	subwf	_valorADCMedia,w,c
  2984  00095A  A0D8               	btfss	status,0,c
  2985  00095C  D008               	goto	l2284
  2986  00095E                     u1830:
  2987  00095E  5031               	movf	_valorADCMedia+1,w,c
  2988  000960  E106               	bnz	l2284
  2989  000962  0EBF               	movlw	191
  2990  000964  5C30               	subwf	_valorADCMedia,w,c
  2991  000966  B0D8               	btfsc	status,0,c
  2992  000968  D002               	goto	l2284
  2993                           
  2994                           ;Fuel_Gauge.c: 43: PORTB = 0b11110000;
  2995  00096A  0EF0               	movlw	240
  2996  00096C  6E81               	movwf	3969,c	;volatile
  2997  00096E                     l2284:
  2998                           
  2999                           ;Fuel_Gauge.c: 44: }
  3000                           ;Fuel_Gauge.c: 45: if(valorADCMedia > 190 && valorADCMedia <= 225) {
  3001  00096E  5031               	movf	_valorADCMedia+1,w,c
  3002  000970  E104               	bnz	u1850
  3003  000972  0EBF               	movlw	191
  3004  000974  5C30               	subwf	_valorADCMedia,w,c
  3005  000976  A0D8               	btfss	status,0,c
  3006  000978  D008               	goto	l2290
  3007  00097A                     u1850:
  3008  00097A  5031               	movf	_valorADCMedia+1,w,c
  3009  00097C  E106               	bnz	l2290
  3010  00097E  0EE2               	movlw	226
  3011  000980  5C30               	subwf	_valorADCMedia,w,c
  3012  000982  B0D8               	btfsc	status,0,c
  3013  000984  D002               	goto	l2290
  3014                           
  3015                           ;Fuel_Gauge.c: 46: PORTB = 0b11111000;
  3016  000986  0EF8               	movlw	248
  3017  000988  6E81               	movwf	3969,c	;volatile
  3018  00098A                     l2290:
  3019                           
  3020                           ;Fuel_Gauge.c: 47: }
  3021                           ;Fuel_Gauge.c: 48: if(valorADCMedia > 225 && valorADCMedia <= 268) {
  3022  00098A  5031               	movf	_valorADCMedia+1,w,c
  3023  00098C  E104               	bnz	u1870
  3024  00098E  0EE2               	movlw	226
  3025  000990  5C30               	subwf	_valorADCMedia,w,c
  3026  000992  A0D8               	btfss	status,0,c
  3027  000994  D008               	goto	l2296
  3028  000996                     u1870:
  3029  000996  0E0D               	movlw	13
  3030  000998  5C30               	subwf	_valorADCMedia,w,c
  3031  00099A  0E01               	movlw	1
  3032  00099C  5831               	subwfb	_valorADCMedia+1,w,c
  3033  00099E  B0D8               	btfsc	status,0,c
  3034  0009A0  D002               	goto	l2296
  3035                           
  3036                           ;Fuel_Gauge.c: 49: PORTB = 0b11111100;
  3037  0009A2  0EFC               	movlw	252
  3038  0009A4  6E81               	movwf	3969,c	;volatile
  3039  0009A6                     l2296:
  3040                           
  3041                           ;Fuel_Gauge.c: 50: }
  3042                           ;Fuel_Gauge.c: 51: if(valorADCMedia > 268 && valorADCMedia <= 370) {
  3043  0009A6  0E0D               	movlw	13
  3044  0009A8  5C30               	subwf	_valorADCMedia,w,c
  3045  0009AA  0E01               	movlw	1
  3046  0009AC  5831               	subwfb	_valorADCMedia+1,w,c
  3047  0009AE  A0D8               	btfss	status,0,c
  3048  0009B0  D008               	goto	l2302
  3049  0009B2  0E73               	movlw	115
  3050  0009B4  5C30               	subwf	_valorADCMedia,w,c
  3051  0009B6  0E01               	movlw	1
  3052  0009B8  5831               	subwfb	_valorADCMedia+1,w,c
  3053  0009BA  B0D8               	btfsc	status,0,c
  3054  0009BC  D002               	goto	l2302
  3055                           
  3056                           ;Fuel_Gauge.c: 52: PORTB = 0b11111110;
  3057  0009BE  0EFE               	movlw	254
  3058  0009C0  6E81               	movwf	3969,c	;volatile
  3059  0009C2                     l2302:
  3060                           
  3061                           ;Fuel_Gauge.c: 53: }
  3062                           ;Fuel_Gauge.c: 54: if(valorADCMedia > 370) {
  3063  0009C2  0E73               	movlw	115
  3064  0009C4  5C30               	subwf	_valorADCMedia,w,c
  3065  0009C6  0E01               	movlw	1
  3066  0009C8  5831               	subwfb	_valorADCMedia+1,w,c
  3067  0009CA  B0D8               	btfsc	status,0,c
  3068                           
  3069                           ;Fuel_Gauge.c: 55: PORTB = 0b11111111;
  3070  0009CC  6881               	setf	3969,c	;volatile
  3071                           
  3072                           ;Fuel_Gauge.c: 56: }
  3073                           ;Fuel_Gauge.c: 57: if(valorADCMedia> 345) {
  3074  0009CE  0E5A               	movlw	90
  3075  0009D0  5C30               	subwf	_valorADCMedia,w,c
  3076  0009D2  0E01               	movlw	1
  3077  0009D4  5831               	subwfb	_valorADCMedia+1,w,c
  3078  0009D6  A0D8               	btfss	status,0,c
  3079  0009D8  D003               	goto	l2310
  3080                           
  3081                           ;Fuel_Gauge.c: 58: reserva = 1;
  3082  0009DA  0E01               	movlw	1
  3083  0009DC  6E36               	movwf	_reserva,c
  3084                           
  3085                           ;Fuel_Gauge.c: 59: }
  3086  0009DE  D003               	goto	l405
  3087  0009E0                     l2310:
  3088                           
  3089                           ;Fuel_Gauge.c: 60: else {
  3090                           ;Fuel_Gauge.c: 61: reserva = 0;
  3091  0009E0  0E00               	movlw	0
  3092  0009E2  6E36               	movwf	_reserva,c
  3093                           
  3094                           ;Fuel_Gauge.c: 62: PORTCbits.RC0 = 1;
  3095  0009E4  8082               	bsf	3970,0,c	;volatile
  3096  0009E6                     l405:
  3097                           
  3098                           ;Fuel_Gauge.c: 63: }
  3099                           ;Fuel_Gauge.c: 65: tempoCombustivel = 0;
  3100  0009E6  0E00               	movlw	0
  3101  0009E8  6E2F               	movwf	_tempoCombustivel+1,c
  3102  0009EA  0E00               	movlw	0
  3103  0009EC  6E2E               	movwf	_tempoCombustivel,c
  3104  0009EE                     l2314:
  3105                           
  3106                           ;Fuel_Gauge.c: 67: }
  3107                           ;Fuel_Gauge.c: 69: if(countLed >= 1000 && reserva ==1) {
  3108  0009EE  0EE8               	movlw	232
  3109  0009F0  5C2C               	subwf	_countLed,w,c
  3110  0009F2  0E03               	movlw	3
  3111  0009F4  582D               	subwfb	_countLed+1,w,c
  3112  0009F6  A0D8               	btfss	status,0,c
  3113  0009F8  0012               	return	
  3114  0009FA  0436               	decf	_reserva,w,c
  3115  0009FC  A4D8               	btfss	status,2,c
  3116  0009FE  0012               	return	
  3117                           
  3118                           ;Fuel_Gauge.c: 70: PORTCbits.RC0 = ~PORTCbits.RC0;
  3119  000A00  A082               	btfss	3970,0,c	;volatile
  3120  000A02  D002               	goto	u1950
  3121  000A04  0E01               	movlw	1
  3122  000A06  D001               	goto	u1956
  3123  000A08                     u1950:
  3124  000A08  0E00               	movlw	0
  3125  000A0A                     u1956:
  3126  000A0A  0AFF               	xorlw	255
  3127  000A0C  0100               	movlb	0	; () banked
  3128  000A0E  6F7C               	movwf	??_Combustivel& (0+255),b
  3129  000A10  5082               	movf	3970,w,c	;volatile
  3130  000A12  0100               	movlb	0	; () banked
  3131  000A14  197C               	xorwf	??_Combustivel& (0+255),w,b
  3132  000A16  0BFE               	andlw	-2
  3133  000A18  197C               	xorwf	??_Combustivel& (0+255),w,b
  3134  000A1A  6E82               	movwf	3970,c	;volatile
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;Fuel_Gauge.c: 71: countLed = 0;
  3138  000A1C  0E00               	movlw	0
  3139  000A1E  6E2D               	movwf	_countLed+1,c
  3140  000A20  0E00               	movlw	0
  3141  000A22  6E2C               	movwf	_countLed,c
  3142  000A24  0012               	return	
  3143  000A26                     __end_of_Combustivel:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon2	equ	0xFF1
  3153                           intcon3	equ	0xFF0
  3154                           indf0	equ	0xFEF
  3155                           postinc0	equ	0xFEE
  3156                           fsr0h	equ	0xFEA
  3157                           fsr0l	equ	0xFE9
  3158                           wreg	equ	0xFE8
  3159                           postdec1	equ	0xFE5
  3160                           fsr1l	equ	0xFE1
  3161                           indf2	equ	0xFDF
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function ___lwdiv *****************
  3167 ;; Defined at:
  3168 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  dividend        2   14[COMRAM] unsigned int 
  3171 ;;  divisor         2   16[COMRAM] unsigned int 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  quotient        2   18[COMRAM] unsigned int 
  3174 ;;  counter         1   20[COMRAM] unsigned char 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  2   14[COMRAM] unsigned int 
  3177 ;; Registers used:
  3178 ;;		wreg, status,2, status,0
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3184 ;;      Params:         4       0       0       0       0       0       0       0       0
  3185 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3187 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3188 ;;Total ram usage:        7 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:    1
  3191 ;; This function calls:
  3192 ;;		Nothing
  3193 ;; This function is called by:
  3194 ;;		_Combustivel
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text17
  3199  00113E                     __ptext17:
  3200                           	opt stack 0
  3201  00113E                     ___lwdiv:
  3202                           	opt stack 28
  3203                           
  3204                           ;incstack = 0
  3205  00113E  0E00               	movlw	0
  3206  001140  6E14               	movwf	___lwdiv@quotient+1,c
  3207  001142  0E00               	movlw	0
  3208  001144  6E13               	movwf	___lwdiv@quotient,c
  3209  001146  5011               	movf	___lwdiv@divisor,w,c
  3210  001148  1012               	iorwf	___lwdiv@divisor+1,w,c
  3211  00114A  B4D8               	btfsc	status,2,c
  3212  00114C  D01C               	goto	l867
  3213  00114E  0E01               	movlw	1
  3214  001150  6E15               	movwf	___lwdiv@counter,c
  3215  001152  D004               	goto	l1902
  3216  001154                     l1900:
  3217  001154  90D8               	bcf	status,0,c
  3218  001156  3611               	rlcf	___lwdiv@divisor,f,c
  3219  001158  3612               	rlcf	___lwdiv@divisor+1,f,c
  3220  00115A  2A15               	incf	___lwdiv@counter,f,c
  3221  00115C                     l1902:
  3222  00115C  AE12               	btfss	___lwdiv@divisor+1,7,c
  3223  00115E  D7FA               	goto	l1900
  3224  001160                     l1904:
  3225  001160  90D8               	bcf	status,0,c
  3226  001162  3613               	rlcf	___lwdiv@quotient,f,c
  3227  001164  3614               	rlcf	___lwdiv@quotient+1,f,c
  3228  001166  5011               	movf	___lwdiv@divisor,w,c
  3229  001168  5C0F               	subwf	___lwdiv@dividend,w,c
  3230  00116A  5012               	movf	___lwdiv@divisor+1,w,c
  3231  00116C  5810               	subwfb	___lwdiv@dividend+1,w,c
  3232  00116E  A0D8               	btfss	status,0,c
  3233  001170  D005               	goto	l1912
  3234  001172  5011               	movf	___lwdiv@divisor,w,c
  3235  001174  5E0F               	subwf	___lwdiv@dividend,f,c
  3236  001176  5012               	movf	___lwdiv@divisor+1,w,c
  3237  001178  5A10               	subwfb	___lwdiv@dividend+1,f,c
  3238  00117A  8013               	bsf	___lwdiv@quotient,0,c
  3239  00117C                     l1912:
  3240  00117C  90D8               	bcf	status,0,c
  3241  00117E  3212               	rrcf	___lwdiv@divisor+1,f,c
  3242  001180  3211               	rrcf	___lwdiv@divisor,f,c
  3243  001182  2E15               	decfsz	___lwdiv@counter,f,c
  3244  001184  D7ED               	goto	l1904
  3245  001186                     l867:
  3246  001186  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  3247  00118A  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3248  00118E  0012               	return		;funcret
  3249  001190                     __end_of___lwdiv:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           intcon	equ	0xFF2
  3258                           intcon2	equ	0xFF1
  3259                           intcon3	equ	0xFF0
  3260                           indf0	equ	0xFEF
  3261                           postinc0	equ	0xFEE
  3262                           fsr0h	equ	0xFEA
  3263                           fsr0l	equ	0xFE9
  3264                           wreg	equ	0xFE8
  3265                           postdec1	equ	0xFE5
  3266                           fsr1l	equ	0xFE1
  3267                           indf2	equ	0xFDF
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _ValorCombustivel *****************
  3273 ;; Defined at:
  3274 ;;		line 85 in file "Fuel_Gauge.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3291 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3292 ;;Total ram usage:        0 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    2
  3295 ;; This function calls:
  3296 ;;		_ADCRead
  3297 ;;		___lldiv
  3298 ;;		___lmul
  3299 ;; This function is called by:
  3300 ;;		_Combustivel
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text18
  3305  000E64                     __ptext18:
  3306                           	opt stack 0
  3307  000E64                     _ValorCombustivel:
  3308                           	opt stack 27
  3309                           
  3310                           ;Fuel_Gauge.c: 86: ADCON0bits.CHS = 0;
  3311                           
  3312                           ;incstack = 0
  3313  000E64  94C2               	bcf	4034,2,c	;volatile
  3314  000E66  96C2               	bcf	4034,3,c	;volatile
  3315  000E68  98C2               	bcf	4034,4,c	;volatile
  3316  000E6A  9AC2               	bcf	4034,5,c	;volatile
  3317                           
  3318                           ;Fuel_Gauge.c: 87: ADCRead();
  3319  000E6C  EC2E  F009         	call	_ADCRead	;wreg free
  3320                           
  3321                           ;Fuel_Gauge.c: 89: valorADC = ((valorADC * 100000) / porcentagemTensao);
  3322  000E70  C038  F00F         	movff	_valorADC,___lmul@multiplier
  3323  000E74  C039  F010         	movff	_valorADC+1,___lmul@multiplier+1
  3324  000E78  C03A  F011         	movff	_valorADC+2,___lmul@multiplier+2
  3325  000E7C  C03B  F012         	movff	_valorADC+3,___lmul@multiplier+3
  3326  000E80  0EA0               	movlw	160
  3327  000E82  6E13               	movwf	___lmul@multiplicand,c
  3328  000E84  0E86               	movlw	134
  3329  000E86  6E14               	movwf	___lmul@multiplicand+1,c
  3330  000E88  0E01               	movlw	1
  3331  000E8A  6E15               	movwf	___lmul@multiplicand+2,c
  3332  000E8C  0E00               	movlw	0
  3333  000E8E  6E16               	movwf	___lmul@multiplicand+3,c
  3334  000E90  EC4B  F008         	call	___lmul	;wreg free
  3335  000E94  C00F  F074         	movff	?___lmul,___lldiv@dividend
  3336  000E98  C010  F075         	movff	?___lmul+1,___lldiv@dividend+1
  3337  000E9C  C011  F076         	movff	?___lmul+2,___lldiv@dividend+2
  3338  000EA0  C012  F077         	movff	?___lmul+3,___lldiv@dividend+3
  3339  000EA4  C020  F078         	movff	_porcentagemTensao,___lldiv@divisor
  3340  000EA8  C021  F079         	movff	_porcentagemTensao+1,___lldiv@divisor+1
  3341  000EAC  C022  F07A         	movff	_porcentagemTensao+2,___lldiv@divisor+2
  3342  000EB0  C023  F07B         	movff	_porcentagemTensao+3,___lldiv@divisor+3
  3343  000EB4  EC45  F006         	call	___lldiv	;wreg free
  3344  000EB8  C074  F038         	movff	?___lldiv,_valorADC
  3345  000EBC  C075  F039         	movff	?___lldiv+1,_valorADC+1
  3346  000EC0  C076  F03A         	movff	?___lldiv+2,_valorADC+2
  3347  000EC4  C077  F03B         	movff	?___lldiv+3,_valorADC+3
  3348                           
  3349                           ;Fuel_Gauge.c: 91: combArray[numeroC] = valorADC;
  3350  000EC8  5034               	movf	_numeroC,w,c
  3351  000ECA  0D02               	mullw	2
  3352  000ECC  0E60               	movlw	low _combArray
  3353  000ECE  24F3               	addwf	prodl,w,c
  3354  000ED0  6ED9               	movwf	fsr2l,c
  3355  000ED2  0E00               	movlw	high _combArray
  3356  000ED4  20F4               	addwfc	prodh,w,c
  3357  000ED6  6EDA               	movwf	fsr2h,c
  3358  000ED8  C038  FFDE         	movff	_valorADC,postinc2
  3359  000EDC  C039  FFDD         	movff	_valorADC+1,postdec2
  3360                           
  3361                           ;Fuel_Gauge.c: 92: numeroC ++;
  3362  000EE0  2A34               	incf	_numeroC,f,c
  3363                           
  3364                           ;Fuel_Gauge.c: 94: if(numeroC == 10){
  3365  000EE2  0E0A               	movlw	10
  3366  000EE4  1834               	xorwf	_numeroC,w,c
  3367  000EE6  A4D8               	btfss	status,2,c
  3368  000EE8  0012               	return	
  3369                           
  3370                           ;Fuel_Gauge.c: 95: numeroC = 0;
  3371  000EEA  0E00               	movlw	0
  3372  000EEC  6E34               	movwf	_numeroC,c
  3373  000EEE  0012               	return	
  3374  000EF0                     __end_of_ValorCombustivel:
  3375                           	opt stack 0
  3376                           tblptru	equ	0xFF8
  3377                           tblptrh	equ	0xFF7
  3378                           tblptrl	equ	0xFF6
  3379                           tablat	equ	0xFF5
  3380                           prodh	equ	0xFF4
  3381                           prodl	equ	0xFF3
  3382                           intcon	equ	0xFF2
  3383                           intcon2	equ	0xFF1
  3384                           intcon3	equ	0xFF0
  3385                           indf0	equ	0xFEF
  3386                           postinc0	equ	0xFEE
  3387                           fsr0h	equ	0xFEA
  3388                           fsr0l	equ	0xFE9
  3389                           wreg	equ	0xFE8
  3390                           postdec1	equ	0xFE5
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           postinc2	equ	0xFDE
  3394                           postdec2	equ	0xFDD
  3395                           fsr2h	equ	0xFDA
  3396                           fsr2l	equ	0xFD9
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function ___lldiv *****************
  3400 ;; Defined at:
  3401 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  dividend        4    0[BANK0 ] unsigned long 
  3404 ;;  divisor         4    4[BANK0 ] unsigned long 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  quotient        4   26[COMRAM] unsigned long 
  3407 ;;  counter         1   30[COMRAM] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  4    0[BANK0 ] unsigned long 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3417 ;;      Params:         0       8       0       0       0       0       0       0       0
  3418 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3419 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3420 ;;      Totals:         5       8       0       0       0       0       0       0       0
  3421 ;;Total ram usage:       13 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    1
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_ValorCombustivel
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text19
  3432  000C8A                     __ptext19:
  3433                           	opt stack 0
  3434  000C8A                     ___lldiv:
  3435                           	opt stack 27
  3436                           
  3437                           ;incstack = 0
  3438  000C8A  0E00               	movlw	0
  3439  000C8C  6E1B               	movwf	___lldiv@quotient,c
  3440  000C8E  0E00               	movlw	0
  3441  000C90  6E1C               	movwf	___lldiv@quotient+1,c
  3442  000C92  0E00               	movlw	0
  3443  000C94  6E1D               	movwf	___lldiv@quotient+2,c
  3444  000C96  0E00               	movlw	0
  3445  000C98  6E1E               	movwf	___lldiv@quotient+3,c
  3446  000C9A  0100               	movlb	0	; () banked
  3447  000C9C  5178               	movf	___lldiv@divisor& (0+255),w,b
  3448  000C9E  0100               	movlb	0	; () banked
  3449  000CA0  1179               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3450  000CA2  0100               	movlb	0	; () banked
  3451  000CA4  117A               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3452  000CA6  0100               	movlb	0	; () banked
  3453  000CA8  117B               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3454  000CAA  B4D8               	btfsc	status,2,c
  3455  000CAC  D03D               	goto	l814
  3456                           
  3457                           ; BSR set to: 0
  3458  000CAE  0E01               	movlw	1
  3459  000CB0  6E1F               	movwf	___lldiv@counter,c
  3460  000CB2  D007               	goto	l2202
  3461  000CB4                     l2200:
  3462                           
  3463                           ; BSR set to: 0
  3464  000CB4  0100               	movlb	0	; () banked
  3465  000CB6  90D8               	bcf	status,0,c
  3466  000CB8  3778               	rlcf	___lldiv@divisor& (0+255),f,b
  3467  000CBA  3779               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3468  000CBC  377A               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3469  000CBE  377B               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3470  000CC0  2A1F               	incf	___lldiv@counter,f,c
  3471  000CC2                     l2202:
  3472                           
  3473                           ; BSR set to: 0
  3474  000CC2  0100               	movlb	0	; () banked
  3475  000CC4  AF7B               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3476  000CC6  D7F6               	goto	l2200
  3477  000CC8                     l2204:
  3478                           
  3479                           ; BSR set to: 0
  3480  000CC8  90D8               	bcf	status,0,c
  3481  000CCA  361B               	rlcf	___lldiv@quotient,f,c
  3482  000CCC  361C               	rlcf	___lldiv@quotient+1,f,c
  3483  000CCE  361D               	rlcf	___lldiv@quotient+2,f,c
  3484  000CD0  361E               	rlcf	___lldiv@quotient+3,f,c
  3485                           
  3486                           ; BSR set to: 0
  3487  000CD2  0100               	movlb	0	; () banked
  3488  000CD4  5178               	movf	___lldiv@divisor& (0+255),w,b
  3489  000CD6  0100               	movlb	0	; () banked
  3490  000CD8  5D74               	subwf	___lldiv@dividend& (0+255),w,b
  3491  000CDA  0100               	movlb	0	; () banked
  3492  000CDC  5179               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3493  000CDE  0100               	movlb	0	; () banked
  3494  000CE0  5975               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3495  000CE2  0100               	movlb	0	; () banked
  3496  000CE4  517A               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3497  000CE6  0100               	movlb	0	; () banked
  3498  000CE8  5976               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3499  000CEA  0100               	movlb	0	; () banked
  3500  000CEC  517B               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3501  000CEE  0100               	movlb	0	; () banked
  3502  000CF0  5977               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3503  000CF2  A0D8               	btfss	status,0,c
  3504  000CF4  D011               	goto	l2212
  3505                           
  3506                           ; BSR set to: 0
  3507  000CF6  0100               	movlb	0	; () banked
  3508  000CF8  5178               	movf	___lldiv@divisor& (0+255),w,b
  3509  000CFA  0100               	movlb	0	; () banked
  3510  000CFC  5F74               	subwf	___lldiv@dividend& (0+255),f,b
  3511  000CFE  0100               	movlb	0	; () banked
  3512  000D00  5179               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3513  000D02  0100               	movlb	0	; () banked
  3514  000D04  5B75               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3515  000D06  0100               	movlb	0	; () banked
  3516  000D08  517A               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3517  000D0A  0100               	movlb	0	; () banked
  3518  000D0C  5B76               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3519  000D0E  0100               	movlb	0	; () banked
  3520  000D10  517B               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3521  000D12  0100               	movlb	0	; () banked
  3522  000D14  5B77               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3523                           
  3524                           ; BSR set to: 0
  3525  000D16  801B               	bsf	___lldiv@quotient,0,c
  3526  000D18                     l2212:
  3527                           
  3528                           ; BSR set to: 0
  3529  000D18  0100               	movlb	0	; () banked
  3530  000D1A  90D8               	bcf	status,0,c
  3531  000D1C  337B               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3532  000D1E  337A               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3533  000D20  3379               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3534  000D22  3378               	rrcf	___lldiv@divisor& (0+255),f,b
  3535                           
  3536                           ; BSR set to: 0
  3537  000D24  2E1F               	decfsz	___lldiv@counter,f,c
  3538  000D26  D7D0               	goto	l2204
  3539  000D28                     l814:
  3540                           
  3541                           ; BSR set to: 0
  3542  000D28  C01B  F074         	movff	___lldiv@quotient,?___lldiv
  3543  000D2C  C01C  F075         	movff	___lldiv@quotient+1,?___lldiv+1
  3544  000D30  C01D  F076         	movff	___lldiv@quotient+2,?___lldiv+2
  3545  000D34  C01E  F077         	movff	___lldiv@quotient+3,?___lldiv+3
  3546                           
  3547                           ; BSR set to: 0
  3548  000D38  0012               	return		;funcret
  3549  000D3A                     __end_of___lldiv:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           intcon	equ	0xFF2
  3558                           intcon2	equ	0xFF1
  3559                           intcon3	equ	0xFF0
  3560                           indf0	equ	0xFEF
  3561                           postinc0	equ	0xFEE
  3562                           fsr0h	equ	0xFEA
  3563                           fsr0l	equ	0xFE9
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _TensaoBateria *****************
  3575 ;; Defined at:
  3576 ;;		line 77 in file "Fuel_Gauge.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0
  3591 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3592 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3593 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3594 ;;Total ram usage:        0 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    2
  3597 ;; This function calls:
  3598 ;;		_ADCRead
  3599 ;;		___lmul
  3600 ;; This function is called by:
  3601 ;;		_Combustivel
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text20
  3606  00121A                     __ptext20:
  3607                           	opt stack 0
  3608  00121A                     _TensaoBateria:
  3609                           	opt stack 27
  3610                           
  3611                           ;Fuel_Gauge.c: 78: ADCON0bits.CHS = 1 ;
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;incstack = 0
  3615  00121A  50C2               	movf	4034,w,c	;volatile
  3616  00121C  0BC3               	andlw	-61
  3617  00121E  0904               	iorlw	4
  3618  001220  6EC2               	movwf	4034,c	;volatile
  3619                           
  3620                           ;Fuel_Gauge.c: 79: ADCRead();
  3621  001222  EC2E  F009         	call	_ADCRead	;wreg free
  3622                           
  3623                           ;Fuel_Gauge.c: 82: porcentagemTensao = 333 * valorADC;
  3624  001226  C038  F00F         	movff	_valorADC,___lmul@multiplier
  3625  00122A  C039  F010         	movff	_valorADC+1,___lmul@multiplier+1
  3626  00122E  C03A  F011         	movff	_valorADC+2,___lmul@multiplier+2
  3627  001232  C03B  F012         	movff	_valorADC+3,___lmul@multiplier+3
  3628  001236  0E4D               	movlw	77
  3629  001238  6E13               	movwf	___lmul@multiplicand,c
  3630  00123A  0E01               	movlw	1
  3631  00123C  6E14               	movwf	___lmul@multiplicand+1,c
  3632  00123E  0E00               	movlw	0
  3633  001240  6E15               	movwf	___lmul@multiplicand+2,c
  3634  001242  0E00               	movlw	0
  3635  001244  6E16               	movwf	___lmul@multiplicand+3,c
  3636  001246  EC4B  F008         	call	___lmul	;wreg free
  3637  00124A  C00F  F020         	movff	?___lmul,_porcentagemTensao
  3638  00124E  C010  F021         	movff	?___lmul+1,_porcentagemTensao+1
  3639  001252  C011  F022         	movff	?___lmul+2,_porcentagemTensao+2
  3640  001256  C012  F023         	movff	?___lmul+3,_porcentagemTensao+3
  3641  00125A  0012               	return		;funcret
  3642  00125C                     __end_of_TensaoBateria:
  3643                           	opt stack 0
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           prodh	equ	0xFF4
  3649                           prodl	equ	0xFF3
  3650                           intcon	equ	0xFF2
  3651                           intcon2	equ	0xFF1
  3652                           intcon3	equ	0xFF0
  3653                           indf0	equ	0xFEF
  3654                           postinc0	equ	0xFEE
  3655                           fsr0h	equ	0xFEA
  3656                           fsr0l	equ	0xFE9
  3657                           wreg	equ	0xFE8
  3658                           postdec1	equ	0xFE5
  3659                           fsr1l	equ	0xFE1
  3660                           indf2	equ	0xFDF
  3661                           postinc2	equ	0xFDE
  3662                           postdec2	equ	0xFDD
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function ___lmul *****************
  3668 ;; Defined at:
  3669 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  multiplier      4   14[COMRAM] unsigned long 
  3672 ;;  multiplicand    4   18[COMRAM] unsigned long 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  product         4   22[COMRAM] unsigned long 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  4   14[COMRAM] unsigned long 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3684 ;;      Params:         8       0       0       0       0       0       0       0       0
  3685 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3687 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3688 ;;Total ram usage:       12 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    1
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_TensaoBateria
  3695 ;;		_ValorCombustivel
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text21
  3700  001096                     __ptext21:
  3701                           	opt stack 0
  3702  001096                     ___lmul:
  3703                           	opt stack 27
  3704                           
  3705                           ;incstack = 0
  3706  001096  0E00               	movlw	0
  3707  001098  6E17               	movwf	___lmul@product,c
  3708  00109A  0E00               	movlw	0
  3709  00109C  6E18               	movwf	___lmul@product+1,c
  3710  00109E  0E00               	movlw	0
  3711  0010A0  6E19               	movwf	___lmul@product+2,c
  3712  0010A2  0E00               	movlw	0
  3713  0010A4  6E1A               	movwf	___lmul@product+3,c
  3714  0010A6                     l1790:
  3715  0010A6  A00F               	btfss	___lmul@multiplier,0,c
  3716  0010A8  D008               	goto	l1794
  3717  0010AA  5013               	movf	___lmul@multiplicand,w,c
  3718  0010AC  2617               	addwf	___lmul@product,f,c
  3719  0010AE  5014               	movf	___lmul@multiplicand+1,w,c
  3720  0010B0  2218               	addwfc	___lmul@product+1,f,c
  3721  0010B2  5015               	movf	___lmul@multiplicand+2,w,c
  3722  0010B4  2219               	addwfc	___lmul@product+2,f,c
  3723  0010B6  5016               	movf	___lmul@multiplicand+3,w,c
  3724  0010B8  221A               	addwfc	___lmul@product+3,f,c
  3725  0010BA                     l1794:
  3726  0010BA  90D8               	bcf	status,0,c
  3727  0010BC  3613               	rlcf	___lmul@multiplicand,f,c
  3728  0010BE  3614               	rlcf	___lmul@multiplicand+1,f,c
  3729  0010C0  3615               	rlcf	___lmul@multiplicand+2,f,c
  3730  0010C2  3616               	rlcf	___lmul@multiplicand+3,f,c
  3731  0010C4  90D8               	bcf	status,0,c
  3732  0010C6  3212               	rrcf	___lmul@multiplier+3,f,c
  3733  0010C8  3211               	rrcf	___lmul@multiplier+2,f,c
  3734  0010CA  3210               	rrcf	___lmul@multiplier+1,f,c
  3735  0010CC  320F               	rrcf	___lmul@multiplier,f,c
  3736  0010CE  500F               	movf	___lmul@multiplier,w,c
  3737  0010D0  1010               	iorwf	___lmul@multiplier+1,w,c
  3738  0010D2  1011               	iorwf	___lmul@multiplier+2,w,c
  3739  0010D4  1012               	iorwf	___lmul@multiplier+3,w,c
  3740  0010D6  A4D8               	btfss	status,2,c
  3741  0010D8  D7E6               	goto	l1790
  3742  0010DA  C017  F00F         	movff	___lmul@product,?___lmul
  3743  0010DE  C018  F010         	movff	___lmul@product+1,?___lmul+1
  3744  0010E2  C019  F011         	movff	___lmul@product+2,?___lmul+2
  3745  0010E6  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  3746  0010EA  0012               	return		;funcret
  3747  0010EC                     __end_of___lmul:
  3748                           	opt stack 0
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           intcon	equ	0xFF2
  3756                           intcon2	equ	0xFF1
  3757                           intcon3	equ	0xFF0
  3758                           indf0	equ	0xFEF
  3759                           postinc0	equ	0xFEE
  3760                           fsr0h	equ	0xFEA
  3761                           fsr0l	equ	0xFE9
  3762                           wreg	equ	0xFE8
  3763                           postdec1	equ	0xFE5
  3764                           fsr1l	equ	0xFE1
  3765                           indf2	equ	0xFDF
  3766                           postinc2	equ	0xFDE
  3767                           postdec2	equ	0xFDD
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _ADCRead *****************
  3773 ;; Defined at:
  3774 ;;		line 15 in file "ADC.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0
  3789 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3790 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3791 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3792 ;;Total ram usage:        2 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    1
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_TensaoBateria
  3799 ;;		_ValorCombustivel
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text22
  3804  00125C                     __ptext22:
  3805                           	opt stack 0
  3806  00125C                     _ADCRead:
  3807                           	opt stack 27
  3808                           
  3809                           ;ADC.c: 17: ADCON0bits.GO = 1;
  3810                           
  3811                           ;incstack = 0
  3812  00125C  82C2               	bsf	4034,1,c	;volatile
  3813                           
  3814                           ;ADC.c: 18: _delay((unsigned long)((10)*(48000000/4000.0)));
  3815  00125E  0E9C               	movlw	156
  3816  001260  6E0F               	movwf	??_ADCRead& (0+255),c
  3817  001262  0ED7               	movlw	215
  3818  001264                     u1997:
  3819  001264  2EE8               	decfsz	wreg,f,c
  3820  001266  D7FE               	bra	u1997
  3821  001268  2E0F               	decfsz	??_ADCRead& (0+255),f,c
  3822  00126A  D7FC               	bra	u1997
  3823  00126C  F000               	nop	
  3824                           
  3825                           ;ADC.c: 19: if(ADCON0bits.GO_DONE == 0)
  3826  00126E  B2C2               	btfsc	4034,1,c	;volatile
  3827  001270  0012               	return	
  3828                           
  3829                           ;ADC.c: 20: {
  3830                           ;ADC.c: 21: valorADC = (ADRESH<<8)+ADRESL;
  3831  001272  50C3               	movf	4035,w,c	;volatile
  3832  001274  CFC4 F00F          	movff	4036,??_ADCRead	;volatile
  3833  001278  6A10               	clrf	(??_ADCRead+1)& (0+255),c
  3834  00127A  C00F  F010         	movff	??_ADCRead,??_ADCRead+1
  3835  00127E  6A0F               	clrf	??_ADCRead,c
  3836  001280  260F               	addwf	??_ADCRead,f,c
  3837  001282  0E00               	movlw	0
  3838  001284  2210               	addwfc	??_ADCRead+1,f,c
  3839  001286  C00F  F038         	movff	??_ADCRead,_valorADC
  3840  00128A  C010  F039         	movff	??_ADCRead+1,_valorADC+1
  3841  00128E  0E00               	movlw	0
  3842  001290  BE39               	btfsc	_valorADC+1,7,c
  3843  001292  0EFF               	movlw	-1
  3844  001294  6E3A               	movwf	_valorADC+2,c
  3845  001296  6E3B               	movwf	_valorADC+3,c
  3846  001298  0012               	return	
  3847  00129A                     __end_of_ADCRead:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           intcon2	equ	0xFF1
  3857                           intcon3	equ	0xFF0
  3858                           indf0	equ	0xFEF
  3859                           postinc0	equ	0xFEE
  3860                           fsr0h	equ	0xFEA
  3861                           fsr0l	equ	0xFE9
  3862                           wreg	equ	0xFE8
  3863                           postdec1	equ	0xFE5
  3864                           fsr1l	equ	0xFE1
  3865                           indf2	equ	0xFDF
  3866                           postinc2	equ	0xFDE
  3867                           postdec2	equ	0xFDD
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _isr *****************
  3873 ;; Defined at:
  3874 ;;		line 21 in file "main.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0
  3889 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3890 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3891 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3892 ;;Total ram usage:       14 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		Interrupt level 2
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	intcode
  3902  000008                     __pintcode:
  3903                           	opt stack 0
  3904  000008                     _isr:
  3905                           	opt stack 26
  3906                           
  3907                           ;incstack = 0
  3908  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3909  00000A  ED13  F005         	call	int_func,f	;refresh shadow registers
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           intcon2	equ	0xFF1
  3918                           intcon3	equ	0xFF0
  3919                           indf0	equ	0xFEF
  3920                           postinc0	equ	0xFEE
  3921                           fsr0h	equ	0xFEA
  3922                           fsr0l	equ	0xFE9
  3923                           wreg	equ	0xFE8
  3924                           postdec1	equ	0xFE5
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933                           	psect	intcode_body
  3934  000A26                     __pintcode_body:
  3935                           	opt stack 26
  3936  000A26                     int_func:
  3937                           	opt stack 26
  3938  000A26  0006               	pop		; remove dummy address from shadow register refresh
  3939  000A28  CFFA F001          	movff	pclath,??_isr
  3940  000A2C  CFFB F002          	movff	pclatu,??_isr+1
  3941  000A30  CFE9 F003          	movff	fsr0l,??_isr+2
  3942  000A34  CFEA F004          	movff	fsr0h,??_isr+3
  3943  000A38  CFE1 F005          	movff	fsr1l,??_isr+4
  3944  000A3C  CFE2 F006          	movff	fsr1h,??_isr+5
  3945  000A40  CFD9 F007          	movff	fsr2l,??_isr+6
  3946  000A44  CFDA F008          	movff	fsr2h,??_isr+7
  3947  000A48  CFF3 F009          	movff	prodl,??_isr+8
  3948  000A4C  CFF4 F00A          	movff	prodh,??_isr+9
  3949  000A50  CFF6 F00B          	movff	tblptrl,??_isr+10
  3950  000A54  CFF7 F00C          	movff	tblptrh,??_isr+11
  3951  000A58  CFF8 F00D          	movff	tblptru,??_isr+12
  3952  000A5C  CFF5 F00E          	movff	tablat,??_isr+13
  3953                           
  3954                           ;main.c: 22: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  3955  000A60  BAF2               	btfsc	intcon,5,c	;volatile
  3956  000A62  A4F2               	btfss	intcon,2,c	;volatile
  3957  000A64  D00A               	goto	i2l1748
  3958                           
  3959                           ;main.c: 23: T0IF = 0;
  3960  000A66  94F2               	bcf	intcon,2,c	;volatile
  3961                           
  3962                           ;main.c: 24: INTCONbits.TMR0IF = 0;
  3963  000A68  94F2               	bcf	intcon,2,c	;volatile
  3964                           
  3965                           ;main.c: 25: TMR0 = 69;
  3966  000A6A  0E00               	movlw	0
  3967  000A6C  6ED7               	movwf	4055,c	;volatile
  3968  000A6E  0E45               	movlw	69
  3969  000A70  6ED6               	movwf	4054,c	;volatile
  3970                           
  3971                           ;main.c: 27: tempoCombustivel ++;
  3972  000A72  4A2E               	infsnz	_tempoCombustivel,f,c
  3973  000A74  2A2F               	incf	_tempoCombustivel+1,f,c
  3974                           
  3975                           ;main.c: 28: countLed ++;
  3976  000A76  4A2C               	infsnz	_countLed,f,c
  3977  000A78  2A2D               	incf	_countLed+1,f,c
  3978  000A7A                     i2l1748:
  3979                           
  3980                           ;main.c: 29: }
  3981                           ;main.c: 31: if ((PIR1bits.CCP1IF) && (PIE1bits.CCP1IE)){
  3982  000A7A  B49E               	btfsc	3998,2,c	;volatile
  3983  000A7C  A49D               	btfss	3997,2,c	;volatile
  3984  000A7E  D022               	goto	i2l339
  3985                           
  3986                           ;main.c: 32: bordaParcial++;
  3987  000A80  4A28               	infsnz	_bordaParcial,f,c
  3988  000A82  2A29               	incf	_bordaParcial+1,f,c
  3989                           
  3990                           ;main.c: 33: bordaTotal++;
  3991  000A84  4A2A               	infsnz	_bordaTotal,f,c
  3992  000A86  2A2B               	incf	_bordaTotal+1,f,c
  3993                           
  3994                           ;main.c: 34: if (bordaParcial == 500){
  3995  000A88  0EF4               	movlw	244
  3996  000A8A  1828               	xorwf	_bordaParcial,w,c
  3997  000A8C  E10B               	bnz	i2l1758
  3998  000A8E  0429               	decf	_bordaParcial+1,w,c
  3999  000A90  A4D8               	btfss	status,2,c
  4000  000A92  D008               	goto	i2l1758
  4001                           
  4002                           ;main.c: 35: atualizaOdoParcial = 1;
  4003  000A94  0E00               	movlw	0
  4004  000A96  6E25               	movwf	_atualizaOdoParcial+1,c
  4005  000A98  0E01               	movlw	1
  4006  000A9A  6E24               	movwf	_atualizaOdoParcial,c
  4007                           
  4008                           ;main.c: 36: bordaParcial = 0;
  4009  000A9C  0E00               	movlw	0
  4010  000A9E  6E29               	movwf	_bordaParcial+1,c
  4011  000AA0  0E00               	movlw	0
  4012  000AA2  6E28               	movwf	_bordaParcial,c
  4013  000AA4                     i2l1758:
  4014                           
  4015                           ;main.c: 37: }
  4016                           ;main.c: 38: if (bordaTotal == 5000){
  4017  000AA4  0E88               	movlw	136
  4018  000AA6  182A               	xorwf	_bordaTotal,w,c
  4019  000AA8  E10C               	bnz	i2l1762
  4020  000AAA  0E13               	movlw	19
  4021  000AAC  182B               	xorwf	_bordaTotal+1,w,c
  4022  000AAE  A4D8               	btfss	status,2,c
  4023  000AB0  D008               	goto	i2l1762
  4024                           
  4025                           ;main.c: 39: atualizaOdoTotal = 1;
  4026  000AB2  0E00               	movlw	0
  4027  000AB4  6E27               	movwf	_atualizaOdoTotal+1,c
  4028  000AB6  0E01               	movlw	1
  4029  000AB8  6E26               	movwf	_atualizaOdoTotal,c
  4030                           
  4031                           ;main.c: 40: bordaTotal = 0;
  4032  000ABA  0E00               	movlw	0
  4033  000ABC  6E2B               	movwf	_bordaTotal+1,c
  4034  000ABE  0E00               	movlw	0
  4035  000AC0  6E2A               	movwf	_bordaTotal,c
  4036  000AC2                     i2l1762:
  4037                           
  4038                           ;main.c: 41: }
  4039                           ;main.c: 42: PIR1bits.CCP1IF = 0;
  4040  000AC2  949E               	bcf	3998,2,c	;volatile
  4041  000AC4                     i2l339:
  4042  000AC4  C00E  FFF5         	movff	??_isr+13,tablat
  4043  000AC8  C00D  FFF8         	movff	??_isr+12,tblptru
  4044  000ACC  C00C  FFF7         	movff	??_isr+11,tblptrh
  4045  000AD0  C00B  FFF6         	movff	??_isr+10,tblptrl
  4046  000AD4  C00A  FFF4         	movff	??_isr+9,prodh
  4047  000AD8  C009  FFF3         	movff	??_isr+8,prodl
  4048  000ADC  C008  FFDA         	movff	??_isr+7,fsr2h
  4049  000AE0  C007  FFD9         	movff	??_isr+6,fsr2l
  4050  000AE4  C006  FFE2         	movff	??_isr+5,fsr1h
  4051  000AE8  C005  FFE1         	movff	??_isr+4,fsr1l
  4052  000AEC  C004  FFEA         	movff	??_isr+3,fsr0h
  4053  000AF0  C003  FFE9         	movff	??_isr+2,fsr0l
  4054  000AF4  C002  FFFB         	movff	??_isr+1,pclatu
  4055  000AF8  C001  FFFA         	movff	??_isr,pclath
  4056  000AFC  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4057  000AFE  0011               	retfie		f
  4058  000B00                     __end_of_isr:
  4059                           	opt stack 0
  4060                           pclatu	equ	0xFFB
  4061                           pclath	equ	0xFFA
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           intcon2	equ	0xFF1
  4070                           intcon3	equ	0xFF0
  4071                           indf0	equ	0xFEF
  4072                           postinc0	equ	0xFEE
  4073                           fsr0h	equ	0xFEA
  4074                           fsr0l	equ	0xFE9
  4075                           wreg	equ	0xFE8
  4076                           postdec1	equ	0xFE5
  4077                           fsr1h	equ	0xFE2
  4078                           fsr1l	equ	0xFE1
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           fsr2h	equ	0xFDA
  4083                           fsr2l	equ	0xFD9
  4084                           status	equ	0xFD8
  4085                           pclatu	equ	0xFFB
  4086                           pclath	equ	0xFFA
  4087                           tblptru	equ	0xFF8
  4088                           tblptrh	equ	0xFF7
  4089                           tblptrl	equ	0xFF6
  4090                           tablat	equ	0xFF5
  4091                           prodh	equ	0xFF4
  4092                           prodl	equ	0xFF3
  4093                           intcon	equ	0xFF2
  4094                           intcon2	equ	0xFF1
  4095                           intcon3	equ	0xFF0
  4096                           indf0	equ	0xFEF
  4097                           postinc0	equ	0xFEE
  4098                           fsr0h	equ	0xFEA
  4099                           fsr0l	equ	0xFE9
  4100                           wreg	equ	0xFE8
  4101                           postdec1	equ	0xFE5
  4102                           fsr1h	equ	0xFE2
  4103                           fsr1l	equ	0xFE1
  4104                           indf2	equ	0xFDF
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           fsr2h	equ	0xFDA
  4108                           fsr2l	equ	0xFD9
  4109                           status	equ	0xFD8
  4110                           
  4111                           	psect	rparam
  4112  0000                     pclatu	equ	0xFFB
  4113                           pclath	equ	0xFFA
  4114                           tblptru	equ	0xFF8
  4115                           tblptrh	equ	0xFF7
  4116                           tblptrl	equ	0xFF6
  4117                           tablat	equ	0xFF5
  4118                           prodh	equ	0xFF4
  4119                           prodl	equ	0xFF3
  4120                           intcon	equ	0xFF2
  4121                           intcon2	equ	0xFF1
  4122                           intcon3	equ	0xFF0
  4123                           indf0	equ	0xFEF
  4124                           postinc0	equ	0xFEE
  4125                           fsr0h	equ	0xFEA
  4126                           fsr0l	equ	0xFE9
  4127                           wreg	equ	0xFE8
  4128                           postdec1	equ	0xFE5
  4129                           fsr1h	equ	0xFE2
  4130                           fsr1l	equ	0xFE1
  4131                           indf2	equ	0xFDF
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           
  4138                           	psect	temp
  4139  000051                     btemp:
  4140                           	opt stack 0
  4141  000051                     	ds	1
  4142  0000                     int$flags	set	btemp
  4143                           pclatu	equ	0xFFB
  4144                           pclath	equ	0xFFA
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           prodh	equ	0xFF4
  4150                           prodl	equ	0xFF3
  4151                           intcon	equ	0xFF2
  4152                           intcon2	equ	0xFF1
  4153                           intcon3	equ	0xFF0
  4154                           indf0	equ	0xFEF
  4155                           postinc0	equ	0xFEE
  4156                           fsr0h	equ	0xFEA
  4157                           fsr0l	equ	0xFE9
  4158                           wreg	equ	0xFE8
  4159                           postdec1	equ	0xFE5
  4160                           fsr1h	equ	0xFE2
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        21
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      80
    BANK0           160     10      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    EscreveFraseRamLCD@buffer	PTR unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[3]), STR_1(CODE[3]), odoParcial(COMRAM[7]), odoTotal(COMRAM[7]), 
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _odometroTotal->_PosicaoCursorLCD
    _odometroParcial->_PosicaoCursorLCD
    _display->_PosicaoCursorLCD
    _PosicaoCursorLCD->_EnderecoCursor
    _EnderecoCursor->_Delay
    _EscreveFraseRamLCD->_EscreveCaractereLCD
    _EscreveCaractereLCD->_Delay
    _ConfiguraLCD->_EscreveComandoLCD
    _EscreveComandoLCD->_Delay
    _ValorCombustivel->___lldiv
    ___lldiv->___lmul
    _TensaoBateria->___lmul

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Combustivel
    _ValorCombustivel->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6781
                        _Combustivel
                       _ConfiguraLCD
                        _Init_EEPROM
                            _display
                             _initHw
                      _initInterrupt
                    _odometroParcial
                      _odometroTotal
 ---------------------------------------------------------------------------------
 (1) _odometroTotal                                        6     6      0    1759
                                             20 COMRAM     6     6      0
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteByte                                     2     1      1     108
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _EEPROM_ReadByte                                      1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _odometroParcial                                      2     2      0    1498
                                             20 COMRAM     2     2      0
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initHw                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              0     0      0    1450
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _PosicaoCursorLCD                                     3     2      1     777
                                             17 COMRAM     3     2      1
                     _EnderecoCursor
 ---------------------------------------------------------------------------------
 (3) _EnderecoCursor                                       1     1      0     165
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _EscreveFraseRamLCD                                   2     0      2     673
                                             17 COMRAM     2     0      2
                _EscreveCaractereLCD
 ---------------------------------------------------------------------------------
 (3) _EscreveCaractereLCD                                  1     1      0     180
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _Init_EEPROM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0     285
                                             17 COMRAM     1     1      0
                              _Delay
                  _EscreveComandoLCD
 ---------------------------------------------------------------------------------
 (2) _EscreveComandoLCD                                    1     1      0     225
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     2      0      60
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Combustivel                                          2     2      0    1789
                                              8 BANK0      2     2      0
                      _TensaoBateria
                   _ValorCombustivel
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     494
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ValorCombustivel                                     0     0      0     845
                            _ADCRead
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     395
                                             26 COMRAM     5     5      0
                                              0 BANK0      8     0      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _TensaoBateria                                        0     0      0     450
                            _ADCRead
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     450
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                              2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Combustivel
     _TensaoBateria
       _ADCRead
       ___lmul
     _ValorCombustivel
       _ADCRead
       ___lldiv
         ___lmul (ARG)
       ___lmul
     ___lwdiv
   _ConfiguraLCD
     _Delay
     _EscreveComandoLCD
       _Delay
   _Init_EEPROM
   _display
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _initHw
   _initInterrupt
   _odometroParcial
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _odometroTotal
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      1E       5       18.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6E      20        0.0%
DATA                 0      0      6E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Nov 26 19:46:31 2019

                                l21 1308                                  l31 0DF2  
                                l40 0E28                                  l41 0E30  
                                l33 0DFC                                  l42 0E32  
                                l19 12FA                                  l43 0E3A  
                                l35 0E06                                  l51 0FE4  
                                l44 0E3C                                  l36 0E08  
                                l60 101A                                  l37 0E1C  
                                l29 0DE8                                  l61 1022  
                                l53 0FEE                                  l38 0E1E  
                                l62 1024                                  l70 0F70  
                                l39 0E26                                  l63 102C  
                                l55 0FF8                                  l80 0F00  
                                l64 102E                                  l56 0FFA  
                                l57 100E                                  l90 0F3E  
                                l82 0F0A                                  l58 1010  
                                l91 0F40                                  l59 1018  
                                l92 0F48                                  l84 0F14  
                                l93 0F4A                                  l94 0F52  
                                l86 0F1E                                  l95 0F54  
                                l87 0F20                                  l88 0F34  
                                l89 0F36                                 l213 0C7A  
                               l405 09E6                                 l159 12E4  
                               l814 0D28                                 l867 1186  
                               _isr 0008                     __end_of_ADCRead 129A  
                               prod 000FF3                                 wreg 000FE8  
                              l1104 0FE6                                l1220 0DFE  
                              l1212 0DEA                                l1140 0F0C  
                              l1108 0FF0                                l2020 0C18  
                              l2030 0C38                                l2200 0CB4  
                              l1080 12F2                                l1216 0DF4  
                              l1144 0F16                                l1136 0F02  
                              l2024 0C20                                l2202 0CC2  
                              l2212 0D18                                l2204 0CC8  
                              l2310 09E0                                l2302 09C2  
                              l2230 0808                                l1094 130E  
                              l1086 1300                                l2232 080C  
                              l1248 0E5E                                l2314 09EE  
                              l2260 08FE                                l2244 0820  
                              l2236 0814                                l2332 1326  
                              l2246 0824                                l2272 0936  
                              l2290 098A                                l2266 091A  
                              l1900 1154                                l2284 096E  
                              l1902 115C                                l2278 0952  
                              l1912 117C                                l1904 1160  
                              l2296 09A6                                l1840 0FA6  
                              l1832 0F8A                                l1852 10EE  
                              l1836 0F98                                l1828 0F7C  
                              l1844 0FAC                                l1790 10A6  
                              l1846 0FC8                                l1926 0B12  
                              l1934 0B34                                l1856 1116  
                              l1848 0FCC                                l1794 10BA  
                              l1970 0B78                                l1972 0B86  
                              l1978 0BA6                                ?_isr 0001  
                              STR_1 0801                                STR_2 0801  
                              _T0IF 007F92                                u1110 110E  
                              u1120 1136                                u1117 1104  
                              u1127 112C                                _LATA 000F89  
                              _LATB 000F8A                                _LATD 000F8C  
                              u1810 0942                                _IPR1 000F9F  
                              u1830 095E                                _IPR2 000FA2  
                              _PIE1 000F9D                                _PIE2 000FA0  
                              u1850 097A                                u1770 090A  
                              u1950 0A08                                u1870 0996  
                              u1790 0926                                u1956 0A0A  
                              u1967 0D5C                                u1977 0D78  
                              u1987 0D94                                u1997 1264  
                              _PIR1 000F9E                                _PIR2 000FA1  
                              _RCON 000FD0                                _TMR0 000FD6  
                     ??_Init_EEPROM 000F                                _main 1312  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              indf0 000FEF                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 0051                                prodh 000FF4  
                              prodl 000FF3                                start 000E  
          __size_of_EEPROM_ReadByte 000E                        ___param_bank 000000  
        __end_of_EscreveFraseRamLCD 113E                               ??_isr 0001  
               __end_of_Combustivel 0A26                               ?_main 0001  
                             _EEADR 000FA9                     __end_of___lldiv 0D3A  
                             _T0CON 000FD5                               _T1CON 000FCD  
                   __end_of___lwdiv 1190                               i2l339 0AC4  
                             _PORTB 000F81                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _Delay 12EE                 ___lmul@multiplicand 0013  
                   __end_of_display 1096                EscreveComandoLCD@cmd 0011  
                             pclath 000FFA                               tablat 000FF5  
                             status 000FD8                    ?_odometroParcial 0001  
               __end_of_Init_EEPROM 135E                     __initialization 1190  
            __size_of_initInterrupt 002E                        __end_of_main 1334  
                         ??_ADCRead 000F                odometroTotal@memoria 0015  
                            ??_main 0020                __end_of_ConfiguraLCD 0DD8  
                     __activetblptr 000002                   _EscreveComandoLCD 0DD8  
             __end_of_TensaoBateria 125C                              ?_Delay 0001  
                ?_EscreveComandoLCD 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _EEDATA 000FA8                              _EECON1 000FA6  
                            _EECON2 000FA7                              i2l1762 0AC2  
                            i2l1748 0A7A                              i2l1758 0AA4  
                            _INTCON 000FF2                 ??_EscreveComandoLCD 0011  
                _atualizaOdoParcial 0024                    _tempoCombustivel 002E  
                       _Combustivel 0806                              ___lmul 1096  
                 ?_PosicaoCursorLCD 0012                           ??___lldiv 001B  
                         ??___lwdiv 0013        __size_of_EscreveCaractereLCD 0072  
                ??_PosicaoCursorLCD 0013                              _initHw 11D6  
                 ??_EEPROM_ReadByte 000F                              clear_0 11B6  
                            clear_1 11C2           __end_of_EscreveComandoLCD 0E64  
          __end_of_EEPROM_WriteByte 12EE                           ??_display 0015  
                      __pdataCOMRAM 003C                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8             __size_of_EnderecoCursor 006A  
                     _initInterrupt 129A                         _Init_EEPROM 1358  
                        __accesstop 0060             __end_of__initialization 11C8  
                     ___rparam_used 000001                       __end_of_Delay 1312  
                 ?_ValorCombustivel 0001                      __pcstackCOMRAM 0001  
                ??_ValorCombustivel 0020                             ??_Delay 000F  
                    ?_initInterrupt 0001                          __pbssBANK0 0060  
                           ?___lmul 000F           EEPROM_WriteByte@WriteData 000F  
             __size_of_ConfiguraLCD 009E                             _CCP1CON 000FBD  
                           ?_initHw 0001                      ___lmul@product 0017  
                           _ADCRead 125C          __size_of_EscreveComandoLCD 008C  
                        _bordaTotal 002A            odometroTotal@memoria_378 0016  
                           _INTCON2 000FF1                             _INTCON3 000FF0  
                _EscreveFraseRamLCD 10EC              __size_of_odometroTotal 00CC  
               ?_EscreveFraseRamLCD 0012                        _ConfiguraLCD 0D3A  
           odometroParcial@position 0015                             __Hparam 0000  
                           __Lparam 0000                          _odoParcial 0043  
                   __size_of___lmul 0056                             ___lldiv 0C8A  
                           ___lwdiv 113E                ??_EscreveFraseRamLCD 0014  
                      __psmallconst 0800                     __size_of_initHw 0044  
                           __pcinit 1190                        _bordaParcial 0028  
                           __ramtop 0800                             __ptext0 1312  
                           __ptext1 0B00                             __ptext2 12C8  
                           __ptext3 134A                             __ptext4 0BCC  
                           __ptext5 129A                             __ptext6 11D6  
                           __ptext7 103C                             __ptext8 0F62  
                           __ptext9 0FD2                             _display 103C  
                    odometroTotal@i 0017                odometroParcial@trava 0016  
                    odometroTotal@j 0019                     ??_initInterrupt 000F  
                      __size_of_isr 0AF8                           _T3CONbits 000FB1  
                    _EnderecoCursor 0FD2                             _reserva 0036  
                           _numeroC 0034                           Delay@Cnt1 000F  
                         Delay@Cnt2 0010                      __pintcode_body 0A26  
               _EscreveCaractereLCD 0EF0                end_of_initialization 11C8  
                     __Lmediumconst 0000                             int_func 0A26  
                   _EEPROM_ReadByte 134A                     ___lldiv@divisor 0078  
                   ___lldiv@counter 001F                        ?_Combustivel 0001  
                     _odometroTotal 0B00                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                ?_EscreveCaractereLCD 0001  
          __size_of_odometroParcial 00BE         PosicaoCursorLCD@EnderecoLCD 0014  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                   ?_EEPROM_WriteByte 000F  
            __end_of_EnderecoCursor 103C                  ??_EEPROM_WriteByte 0010  
                         _TRISCbits 000F94                           _TRISDbits 000F95  
         __size_of_PosicaoCursorLCD 0070                        ?_Init_EEPROM 0001  
            __size_of_TensaoBateria 0042                      ?_odometroTotal 0001  
             ??_EscreveCaractereLCD 0011                      __end_of___lmul 10EC  
                     __pidataCOMRAM 1334                    _atualizaOdoTotal 0026  
                    __end_of_initHw 121A                     ?_EnderecoCursor 0001  
               start_initialization 1190           __size_of_ValorCombustivel 008C  
                       __end_of_isr 0B00            EscreveFraseRamLCD@buffer 0012  
           __end_of_EEPROM_ReadByte 1358                            ??___lmul 0017  
                          ??_initHw 000F                            ?_ADCRead 0001  
                 ??_odometroParcial 0015                         __pbssCOMRAM 0020  
                     __pcstackBANK0 0074                       _TensaoBateria 121A  
                  odometroParcial@i 0037                     ??_odometroTotal 0015  
                  ___lwdiv@dividend 000F                           __pintcode 0008  
                         _combArray 0060                            ?___lldiv 0074  
                          ?___lwdiv 000F                __size_of_Combustivel 0220  
      EEPROM_ReadByte@MemoryAddress 000F                       _valorADCMedia 0030  
            EscreveInteiroLCD@F3948 003C                            ?_display 0001  
                       __smallconst 0800                      ?_TensaoBateria 0001  
                    __size_of_Delay 0024                    _PosicaoCursorLCD 0F62  
                  ___lwdiv@quotient 0013                    ?_EEPROM_ReadByte 0001  
            EnderecoCursor@endereco 0011                __size_of_Init_EEPROM 0006  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
           EscreveCaractereLCD@data 0011         __size_of_EscreveFraseRamLCD 0052  
                  __size_of_ADCRead 003E                          _ADCON0bits 000FC2  
                  _ValorCombustivel 0E64               __end_of_initInterrupt 12C8  
                    _primeiroFiltro 0035                   ___lmul@multiplier 000F  
                         copy_data0 11A4                  odometroTotal@i_379 0018  
                odometroTotal@j_380 001A           __size_of_EEPROM_WriteByte 0026  
                        _EECON1bits 000FA6                            __Hrparam 0000  
                 _porcentagemTensao 0020                            __Lrparam 0000  
                  ??_EnderecoCursor 0011                    __size_of___lldiv 00B0  
                  __size_of___lwdiv 0052                     ??_TensaoBateria 001B  
                  __size_of_display 005A                     ___lwdiv@divisor 0011  
                   ___lwdiv@counter 0015                            __ptext10 10EC  
                          __ptext11 0EF0                            __ptext20 121A  
                          __ptext12 1358                            __ptext21 1096  
                          __ptext13 0D3A                            __ptext22 125C  
                          __ptext14 0DD8                            __ptext15 12EE  
                          __ptext16 0806                            __ptext17 113E  
                          __ptext18 0E64                            __ptext19 0C8A  
                          _countLed 002C                            _odoTotal 004A  
                     __size_of_main 0022         __end_of_EscreveCaractereLCD 0F62  
                          _valorADC 0038                     _odometroParcial 0BCC  
                          int$flags 0051                          _INTCONbits 000FF2  
                          intlevel2 0000  EEPROM_WriteByte@WriteMemoryAddress 0010  
                  ___lldiv@dividend 0074                       ?_ConfiguraLCD 0001  
          __end_of_PosicaoCursorLCD 0FD2              PosicaoCursorLCD@coluna 0012  
                       _valorTensao 0032                    ___lldiv@quotient 001B  
             PosicaoCursorLCD@linha 0013                      ??_ConfiguraLCD 0012  
                  _EEPROM_WriteByte 12C8             __end_of_odometroParcial 0C8A  
          __end_of_ValorCombustivel 0EF0                       ??_Combustivel 007C  
             __end_of_odometroTotal 0BCC  
