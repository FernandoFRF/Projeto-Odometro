

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Nov 13 23:37:48 2019

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 1.40
    34                           ; Generated 01/12/2016 GMT
    35                           ; 
    36                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  000E46                     __pidataCOMRAM:
    70                           	opt stack 0
    71                           
    72                           ;initializer for EscreveInteiroLCD@F3948
    73  000E46  30                 	db	48
    74  000E47  30                 	db	48
    75  000E48  30                 	db	48
    76  000E49  30                 	db	48
    77  000E4A  30                 	db	48
    78  000E4B  30                 	db	48
    79  000E4C  00                 	db	0
    80                           
    81                           ;initializer for _odoParcial
    82  000E4D  30                 	db	48
    83  000E4E  30                 	db	48
    84  000E4F  30                 	db	48
    85  000E50  30                 	db	48
    86  000E51  2C                 	db	44
    87  000E52  30                 	db	48
    88  000E53  00                 	db	0
    89                           
    90                           ;initializer for _odoTotal
    91  000E54  30                 	db	48
    92  000E55  30                 	db	48
    93  000E56  30                 	db	48
    94  000E57  30                 	db	48
    95  000E58  30                 	db	48
    96  000E59  30                 	db	48
    97  000E5A  00                 	db	0
    98  0000                     _ADCON0	set	4034
    99  0000                     _ADCON1	set	4033
   100  0000                     _ADCON2	set	4032
   101  0000                     _CCP1CON	set	4029
   102  0000                     _EEADR	set	4009
   103  0000                     _EECON1	set	4006
   104  0000                     _EECON1bits	set	4006
   105  0000                     _EECON2	set	4007
   106  0000                     _EEDATA	set	4008
   107  0000                     _INTCON	set	4082
   108  0000                     _INTCON2	set	4081
   109  0000                     _INTCON3	set	4080
   110  0000                     _INTCONbits	set	4082
   111  0000                     _IPR1	set	3999
   112  0000                     _IPR2	set	4002
   113  0000                     _LATA	set	3977
   114  0000                     _LATB	set	3978
   115  0000                     _LATD	set	3980
   116  0000                     _PIE1	set	3997
   117  0000                     _PIE1bits	set	3997
   118  0000                     _PIE2	set	4000
   119  0000                     _PIR1	set	3998
   120  0000                     _PIR1bits	set	3998
   121  0000                     _PIR2	set	4001
   122  0000                     _PORTDbits	set	3971
   123  0000                     _PORTEbits	set	3972
   124  0000                     _RCON	set	4048
   125  0000                     _T0CON	set	4053
   126  0000                     _T1CON	set	4045
   127  0000                     _T3CONbits	set	4017
   128  0000                     _TRISA	set	3986
   129  0000                     _TRISB	set	3987
   130  0000                     _TRISC	set	3988
   131  0000                     _TRISCbits	set	3988
   132  0000                     _TRISD	set	3989
   133  0000                     _TRISDbits	set	3989
   134  0000                     _TRISE	set	3990
   135                           
   136                           	psect	smallconst
   137  000800                     __psmallconst:
   138                           	opt stack 0
   139  000800  00                 	db	0
   140  000801                     STR_1:
   141  000801  4B                 	db	75	;'K'
   142  000802  6D                 	db	109	;'m'
   143  000803  00                 	db	0
   144  000804  00                 	db	0	; dummy byte at the end
   145  0000                     
   146                           ; #config settings
   147                           
   148                           	psect	cinit
   149  000D94                     __pcinit:
   150                           	opt stack 0
   151  000D94                     start_initialization:
   152                           	opt stack 0
   153  000D94                     __initialization:
   154                           	opt stack 0
   155                           
   156                           ; Initialize objects allocated to COMRAM (21 bytes)
   157                           ; load TBLPTR registers with __pidataCOMRAM
   158  000D94  0E46               	movlw	low __pidataCOMRAM
   159  000D96  6EF6               	movwf	tblptrl,c
   160  000D98  0E0E               	movlw	high __pidataCOMRAM
   161  000D9A  6EF7               	movwf	tblptrh,c
   162  000D9C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   163  000D9E  6EF8               	movwf	tblptru,c
   164  000DA0  EE00  F019         	lfsr	0,__pdataCOMRAM
   165  000DA4  EE10 F015          	lfsr	1,21
   166  000DA8                     copy_data0:
   167  000DA8  0009               	tblrd		*+
   168  000DAA  CFF5 FFEE          	movff	tablat,postinc0
   169  000DAE  50E5               	movf	postdec1,w,c
   170  000DB0  50E1               	movf	fsr1l,w,c
   171  000DB2  E1FA               	bnz	copy_data0
   172                           
   173                           ; Clear objects allocated to COMRAM (9 bytes)
   174  000DB4  EE00  F02E         	lfsr	0,__pbssCOMRAM
   175  000DB8  0E09               	movlw	9
   176  000DBA                     clear_0:
   177  000DBA  6AEE               	clrf	postinc0,c
   178  000DBC  06E8               	decf	wreg,f,c
   179  000DBE  E1FD               	bnz	clear_0
   180  000DC0                     end_of_initialization:
   181                           	opt stack 0
   182  000DC0                     __end_of__initialization:
   183                           	opt stack 0
   184  000DC0  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   185  000DC2  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   186  000DC4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   187  000DC6  6EF8               	movwf	tblptru,c
   188  000DC8  0100               	movlb	0
   189  000DCA  EF83  F006         	goto	_main	;jump to C main() function
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           postdec1	equ	0xFE5
   197                           fsr1l	equ	0xFE1
   198                           
   199                           	psect	bssCOMRAM
   200  00002E                     __pbssCOMRAM:
   201                           	opt stack 0
   202  00002E                     _atualizaOdoParcial:
   203                           	opt stack 0
   204  00002E                     	ds	2
   205  000030                     _atualizaOdoTotal:
   206                           	opt stack 0
   207  000030                     	ds	2
   208  000032                     _bordaParcial:
   209                           	opt stack 0
   210  000032                     	ds	2
   211  000034                     _bordaTotal:
   212                           	opt stack 0
   213  000034                     	ds	2
   214  000036                     odometroParcial@i:
   215                           	opt stack 0
   216  000036                     	ds	1
   217                           tblptru	equ	0xFF8
   218                           tblptrh	equ	0xFF7
   219                           tblptrl	equ	0xFF6
   220                           tablat	equ	0xFF5
   221                           postinc0	equ	0xFEE
   222                           wreg	equ	0xFE8
   223                           postdec1	equ	0xFE5
   224                           fsr1l	equ	0xFE1
   225                           
   226                           	psect	dataCOMRAM
   227  000019                     __pdataCOMRAM:
   228                           	opt stack 0
   229  000019                     EscreveInteiroLCD@F3948:
   230                           	opt stack 0
   231  000019                     	ds	7
   232  000020                     _odoParcial:
   233                           	opt stack 0
   234  000020                     	ds	7
   235  000027                     _odoTotal:
   236                           	opt stack 0
   237  000027                     	ds	7
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           wreg	equ	0xFE8
   244                           postdec1	equ	0xFE5
   245                           fsr1l	equ	0xFE1
   246                           
   247                           	psect	cstackCOMRAM
   248  000001                     __pcstackCOMRAM:
   249                           	opt stack 0
   250  000001                     ??_isr:
   251  000001                     
   252                           ; 1 bytes @ 0x0
   253  000001                     	ds	14
   254  00000F                     Delay@Cnt1:
   255                           	opt stack 0
   256  00000F                     EEPROM_ReadByte@MemoryAddress:
   257                           	opt stack 0
   258  00000F                     EEPROM_WriteByte@WriteData:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0xE
   262  00000F                     	ds	1
   263  000010                     Delay@Cnt2:
   264                           	opt stack 0
   265  000010                     EEPROM_WriteByte@WriteMemoryAddress:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0xF
   269  000010                     	ds	1
   270  000011                     EscreveComandoLCD@cmd:
   271                           	opt stack 0
   272  000011                     EnderecoCursor@endereco:
   273                           	opt stack 0
   274  000011                     EscreveCaractereLCD@data:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x10
   278  000011                     	ds	1
   279  000012                     ??_ConfiguraLCD:
   280  000012                     PosicaoCursorLCD@coluna:
   281                           	opt stack 0
   282  000012                     EscreveFraseRamLCD@buffer:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x11
   286  000012                     	ds	1
   287  000013                     PosicaoCursorLCD@linha:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x12
   291  000013                     	ds	1
   292  000014                     PosicaoCursorLCD@EnderecoLCD:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x13
   296  000014                     	ds	1
   297  000015                     odometroTotal@j:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x14
   301  000015                     	ds	1
   302  000016                     odometroTotal@i:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x15
   306  000016                     	ds	1
   307  000017                     main@j:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x16
   311  000017                     	ds	1
   312  000018                     main@i:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x17
   316  000018                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326 ;;
   327 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   328 ;;
   329 ;; *************** function _main *****************
   330 ;; Defined at:
   331 ;;		line 36 in file "main.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;		None
   334 ;; Auto vars:     Size  Location     Type
   335 ;;  i               1   23[COMRAM] unsigned char 
   336 ;;  j               1   22[COMRAM] unsigned char 
   337 ;; Return value:  Size  Location     Type
   338 ;;                  1    wreg      void 
   339 ;; Registers used:
   340 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   341 ;; Tracked objects:
   342 ;;		On entry : 0/0
   343 ;;		On exit  : 0/0
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   346 ;;      Params:         0       0       0       0       0       0       0       0       0
   347 ;;      Locals:         2       0       0       0       0       0       0       0       0
   348 ;;      Temps:          0       0       0       0       0       0       0       0       0
   349 ;;      Totals:         2       0       0       0       0       0       0       0       0
   350 ;;Total ram usage:        2 bytes
   351 ;; Hardware stack levels required when called:    5
   352 ;; This function calls:
   353 ;;		_ConfiguraLCD
   354 ;;		_EEPROM_ReadByte
   355 ;;		_Init_EEPROM
   356 ;;		_display
   357 ;;		_initHw
   358 ;;		_initInterrupt
   359 ;;		_odometroParcial
   360 ;;		_odometroTotal
   361 ;; This function is called by:
   362 ;;		Startup code after reset
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           	psect	text0
   367  000D06                     __ptext0:
   368                           	opt stack 0
   369  000D06                     _main:
   370                           	opt stack 26
   371                           
   372                           ;main.c: 37: ConfiguraLCD();
   373                           
   374                           ;incstack = 0
   375  000D06  EC63  F004         	call	_ConfiguraLCD	;wreg free
   376                           
   377                           ;main.c: 38: initInterrupt();
   378  000D0A  ECE7  F006         	call	_initInterrupt	;wreg free
   379                           
   380                           ;main.c: 39: initHw();
   381  000D0E  ECA8  F006         	call	_initHw	;wreg free
   382                           
   383                           ;main.c: 40: Init_EEPROM();
   384  000D12  EC35  F007         	call	_Init_EEPROM	;wreg free
   385                           
   386                           ;main.c: 41: display();
   387  000D16  EC2D  F006         	call	_display	;wreg free
   388                           
   389                           ;main.c: 43: for(unsigned char i=0, j=4; i<5; i++, j--)
   390  000D1A  0E00               	movlw	0
   391  000D1C  6E18               	movwf	main@i,c
   392  000D1E  0E04               	movlw	4
   393  000D20  6E17               	movwf	main@j,c
   394  000D22                     l1686:
   395  000D22  0E04               	movlw	4
   396  000D24  6418               	cpfsgt	main@i,c
   397  000D26  D001               	goto	l1690
   398  000D28  D00E               	goto	l1698
   399  000D2A                     l1690:
   400                           
   401                           ;main.c: 44: {
   402                           ;main.c: 45: EEPROM_ReadByte(odoTotal[j]);
   403  000D2A  5017               	movf	main@j,w,c
   404  000D2C  0D01               	mullw	1
   405  000D2E  0E27               	movlw	low _odoTotal
   406  000D30  24F3               	addwf	prodl,w,c
   407  000D32  6ED9               	movwf	fsr2l,c
   408  000D34  0E00               	movlw	high _odoTotal
   409  000D36  20F4               	addwfc	prodh,w,c
   410  000D38  6EDA               	movwf	fsr2h,c
   411  000D3A  50DF               	movf	indf2,w,c
   412  000D3C  EC2E  F007         	call	_EEPROM_ReadByte
   413  000D40  2A18               	incf	main@i,f,c
   414  000D42  0617               	decf	main@j,f,c
   415  000D44  D7EE               	goto	l1686
   416  000D46                     l1698:
   417                           
   418                           ;main.c: 49: {
   419                           ;main.c: 51: odometroTotal();
   420  000D46  ECB2  F004         	call	_odometroTotal	;wreg free
   421                           
   422                           ;main.c: 52: odometroParcial();
   423  000D4A  EC43  F005         	call	_odometroParcial	;wreg free
   424  000D4E  D7FB               	goto	l1698
   425  000D50                     __end_of_main:
   426                           	opt stack 0
   427                           tblptru	equ	0xFF8
   428                           tblptrh	equ	0xFF7
   429                           tblptrl	equ	0xFF6
   430                           tablat	equ	0xFF5
   431                           prodh	equ	0xFF4
   432                           prodl	equ	0xFF3
   433                           postinc0	equ	0xFEE
   434                           wreg	equ	0xFE8
   435                           postdec1	equ	0xFE5
   436                           fsr1l	equ	0xFE1
   437                           indf2	equ	0xFDF
   438                           fsr2h	equ	0xFDA
   439                           fsr2l	equ	0xFD9
   440                           
   441 ;; *************** function _odometroTotal *****************
   442 ;; Defined at:
   443 ;;		line 15 in file "Odometro_Total_Parcial.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  i               1   21[COMRAM] unsigned char 
   448 ;;  j               1   20[COMRAM] unsigned char 
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   458 ;;      Params:         0       0       0       0       0       0       0       0       0
   459 ;;      Locals:         2       0       0       0       0       0       0       0       0
   460 ;;      Temps:          0       0       0       0       0       0       0       0       0
   461 ;;      Totals:         2       0       0       0       0       0       0       0       0
   462 ;;Total ram usage:        2 bytes
   463 ;; Hardware stack levels used:    1
   464 ;; Hardware stack levels required when called:    4
   465 ;; This function calls:
   466 ;;		_EEPROM_WriteByte
   467 ;;		_EscreveFraseRamLCD
   468 ;;		_PosicaoCursorLCD
   469 ;; This function is called by:
   470 ;;		_main
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           	psect	text1
   475  000964                     __ptext1:
   476                           	opt stack 0
   477  000964                     _odometroTotal:
   478                           	opt stack 26
   479                           
   480                           ;Odometro_Total_Parcial.c: 16: if (atualizaOdoTotal)
   481                           
   482                           ;incstack = 0
   483  000964  5030               	movf	_atualizaOdoTotal,w,c
   484  000966  1031               	iorwf	_atualizaOdoTotal+1,w,c
   485  000968  B4D8               	btfsc	status,2,c
   486  00096A  D02E               	goto	l1568
   487                           
   488                           ;Odometro_Total_Parcial.c: 17: {
   489                           ;Odometro_Total_Parcial.c: 18: odoTotal[5]++;
   490  00096C  2A2C               	incf	_odoTotal+5,f,c
   491                           
   492                           ;Odometro_Total_Parcial.c: 19: if (odoTotal[5] > 0x39)
   493  00096E  0E39               	movlw	57
   494  000970  642C               	cpfsgt	_odoTotal+5,c
   495  000972  D01B               	goto	l1562
   496                           
   497                           ;Odometro_Total_Parcial.c: 20: {
   498                           ;Odometro_Total_Parcial.c: 21: odoTotal[5] = 0x30;
   499  000974  0E30               	movlw	48
   500  000976  6E2C               	movwf	_odoTotal+5,c
   501                           
   502                           ;Odometro_Total_Parcial.c: 22: odoTotal[4]++;
   503  000978  2A2B               	incf	_odoTotal+4,f,c
   504                           
   505                           ;Odometro_Total_Parcial.c: 23: if (odoTotal[4] > 0x39)
   506  00097A  0E39               	movlw	57
   507  00097C  642B               	cpfsgt	_odoTotal+4,c
   508  00097E  D015               	goto	l1562
   509                           
   510                           ;Odometro_Total_Parcial.c: 24: {
   511                           ;Odometro_Total_Parcial.c: 25: odoTotal[4] = 0x30;
   512  000980  0E30               	movlw	48
   513  000982  6E2B               	movwf	_odoTotal+4,c
   514                           
   515                           ;Odometro_Total_Parcial.c: 26: odoTotal[3]++;
   516  000984  2A2A               	incf	_odoTotal+3,f,c
   517                           
   518                           ;Odometro_Total_Parcial.c: 27: if (odoTotal[3] > 0x39)
   519  000986  0E39               	movlw	57
   520  000988  642A               	cpfsgt	_odoTotal+3,c
   521  00098A  D00F               	goto	l1562
   522                           
   523                           ;Odometro_Total_Parcial.c: 28: {
   524                           ;Odometro_Total_Parcial.c: 29: odoTotal[3] = 0x30;
   525  00098C  0E30               	movlw	48
   526  00098E  6E2A               	movwf	_odoTotal+3,c
   527                           
   528                           ;Odometro_Total_Parcial.c: 30: odoTotal[2]++;
   529  000990  2A29               	incf	_odoTotal+2,f,c
   530                           
   531                           ;Odometro_Total_Parcial.c: 31: if (odoTotal[2] > 0x39)
   532  000992  0E39               	movlw	57
   533  000994  6429               	cpfsgt	_odoTotal+2,c
   534  000996  D009               	goto	l1562
   535                           
   536                           ;Odometro_Total_Parcial.c: 32: {
   537                           ;Odometro_Total_Parcial.c: 33: odoTotal[2] = 0x30;
   538  000998  0E30               	movlw	48
   539  00099A  6E29               	movwf	_odoTotal+2,c
   540                           
   541                           ;Odometro_Total_Parcial.c: 34: odoTotal[1]++;
   542  00099C  2A28               	incf	_odoTotal+1,f,c
   543                           
   544                           ;Odometro_Total_Parcial.c: 35: if (odoTotal[1] > 0x39)
   545  00099E  0E39               	movlw	57
   546  0009A0  6428               	cpfsgt	_odoTotal+1,c
   547  0009A2  D003               	goto	l1562
   548                           
   549                           ;Odometro_Total_Parcial.c: 36: {
   550                           ;Odometro_Total_Parcial.c: 37: odoTotal[1] = 0x30;
   551  0009A4  0E30               	movlw	48
   552  0009A6  6E28               	movwf	_odoTotal+1,c
   553                           
   554                           ;Odometro_Total_Parcial.c: 38: odoTotal[0]++;
   555  0009A8  2A27               	incf	_odoTotal,f,c
   556  0009AA                     l1562:
   557                           
   558                           ;Odometro_Total_Parcial.c: 42: }
   559                           ;Odometro_Total_Parcial.c: 43: }
   560                           ;Odometro_Total_Parcial.c: 44: }
   561                           ;Odometro_Total_Parcial.c: 45: }
   562                           ;Odometro_Total_Parcial.c: 46: }
   563                           ;Odometro_Total_Parcial.c: 47: }
   564                           ;Odometro_Total_Parcial.c: 49: PosicaoCursorLCD(1, 7);
   565  0009AA  0E07               	movlw	7
   566  0009AC  6E12               	movwf	PosicaoCursorLCD@coluna,c
   567  0009AE  0E01               	movlw	1
   568  0009B0  ECC0  F005         	call	_PosicaoCursorLCD
   569                           
   570                           ;Odometro_Total_Parcial.c: 50: EscreveFraseRamLCD(odoTotal);
   571  0009B4  0E27               	movlw	low _odoTotal
   572  0009B6  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   573  0009B8  0E00               	movlw	high _odoTotal
   574  0009BA  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   575  0009BC  EC5A  F006         	call	_EscreveFraseRamLCD	;wreg free
   576                           
   577                           ;Odometro_Total_Parcial.c: 51: atualizaOdoTotal = 0;
   578  0009C0  0E00               	movlw	0
   579  0009C2  6E31               	movwf	_atualizaOdoTotal+1,c
   580  0009C4  0E00               	movlw	0
   581  0009C6  6E30               	movwf	_atualizaOdoTotal,c
   582  0009C8                     l1568:
   583                           
   584                           ;Odometro_Total_Parcial.c: 53: }
   585                           ;Odometro_Total_Parcial.c: 54: for(unsigned char i=0, j=4; i<5; i++, j--)
   586  0009C8  0E00               	movlw	0
   587  0009CA  6E16               	movwf	odometroTotal@i,c
   588  0009CC  0E04               	movlw	4
   589  0009CE  6E15               	movwf	odometroTotal@j,c
   590  0009D0                     l1572:
   591  0009D0  0E04               	movlw	4
   592  0009D2  6416               	cpfsgt	odometroTotal@i,c
   593  0009D4  D001               	goto	l1576
   594  0009D6  0012               	return	
   595  0009D8                     l1576:
   596                           
   597                           ;Odometro_Total_Parcial.c: 55: {
   598                           ;Odometro_Total_Parcial.c: 56: EEPROM_WriteByte(0x10+i , odoTotal[j]);
   599  0009D8  5015               	movf	odometroTotal@j,w,c
   600  0009DA  0D01               	mullw	1
   601  0009DC  0E27               	movlw	low _odoTotal
   602  0009DE  24F3               	addwf	prodl,w,c
   603  0009E0  6ED9               	movwf	fsr2l,c
   604  0009E2  0E00               	movlw	high _odoTotal
   605  0009E4  20F4               	addwfc	prodh,w,c
   606  0009E6  6EDA               	movwf	fsr2h,c
   607  0009E8  50DF               	movf	indf2,w,c
   608  0009EA  6E0F               	movwf	EEPROM_WriteByte@WriteData,c
   609  0009EC  5016               	movf	odometroTotal@i,w,c
   610  0009EE  0F10               	addlw	16
   611  0009F0  ECFE  F006         	call	_EEPROM_WriteByte
   612  0009F4  2A16               	incf	odometroTotal@i,f,c
   613  0009F6  0615               	decf	odometroTotal@j,f,c
   614  0009F8  D7EB               	goto	l1572
   615  0009FA                     __end_of_odometroTotal:
   616                           	opt stack 0
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           prodh	equ	0xFF4
   622                           prodl	equ	0xFF3
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           indf2	equ	0xFDF
   628                           fsr2h	equ	0xFDA
   629                           fsr2l	equ	0xFD9
   630                           status	equ	0xFD8
   631                           
   632 ;; *************** function _EEPROM_WriteByte *****************
   633 ;; Defined at:
   634 ;;		line 17 in file "EEPROM.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  WriteMemoryA    1    wreg     unsigned char 
   637 ;;  WriteData       1   14[COMRAM] unsigned char 
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  WriteMemoryA    1   15[COMRAM] unsigned char 
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, status,2
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   649 ;;      Params:         1       0       0       0       0       0       0       0       0
   650 ;;      Locals:         1       0       0       0       0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0       0       0
   652 ;;      Totals:         2       0       0       0       0       0       0       0       0
   653 ;;Total ram usage:        2 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:    1
   656 ;; This function calls:
   657 ;;		Nothing
   658 ;; This function is called by:
   659 ;;		_odometroTotal
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text2
   664  000DFC                     __ptext2:
   665                           	opt stack 0
   666  000DFC                     _EEPROM_WriteByte:
   667                           	opt stack 28
   668                           
   669                           ;incstack = 0
   670                           ;EEPROM_WriteByte@WriteMemoryAddress stored from wreg
   671  000DFC  6E10               	movwf	EEPROM_WriteByte@WriteMemoryAddress,c
   672                           
   673                           ;EEPROM.c: 19: EEADR = WriteMemoryAddress;
   674  000DFE  C010  FFA9         	movff	EEPROM_WriteByte@WriteMemoryAddress,4009	;volatile
   675                           
   676                           ;EEPROM.c: 20: EEDATA = WriteData;
   677  000E02  C00F  FFA8         	movff	EEPROM_WriteByte@WriteData,4008	;volatile
   678                           
   679                           ;EEPROM.c: 21: EECON1bits.EEPGD = 0;
   680  000E06  9EA6               	bcf	4006,7,c	;volatile
   681                           
   682                           ;EEPROM.c: 22: EECON1bits.CFGS = 0;
   683  000E08  9CA6               	bcf	4006,6,c	;volatile
   684                           
   685                           ;EEPROM.c: 23: EECON1bits.WREN = 1;
   686  000E0A  84A6               	bsf	4006,2,c	;volatile
   687                           
   688                           ;EEPROM.c: 24: INTCONbits.GIE = 0;
   689  000E0C  9EF2               	bcf	intcon,7,c	;volatile
   690                           
   691                           ;EEPROM.c: 25: EECON2 = 0x55;
   692  000E0E  0E55               	movlw	85
   693  000E10  6EA7               	movwf	4007,c	;volatile
   694                           
   695                           ;EEPROM.c: 26: EECON2 = 0x0AA;
   696  000E12  0EAA               	movlw	170
   697  000E14  6EA7               	movwf	4007,c	;volatile
   698                           
   699                           ;EEPROM.c: 27: EECON1bits.WR= 1;
   700  000E16  82A6               	bsf	4006,1,c	;volatile
   701  000E18                     l159:
   702  000E18  B2A6               	btfsc	4006,1,c	;volatile
   703  000E1A  D7FE               	goto	l159
   704                           
   705                           ;EEPROM.c: 29: INTCONbits.GIE = 1;
   706  000E1C  8EF2               	bsf	intcon,7,c	;volatile
   707                           
   708                           ;EEPROM.c: 30: EECON1bits.WREN = 0;
   709  000E1E  94A6               	bcf	4006,2,c	;volatile
   710  000E20  0012               	return		;funcret
   711  000E22                     __end_of_EEPROM_WriteByte:
   712                           	opt stack 0
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           prodh	equ	0xFF4
   718                           prodl	equ	0xFF3
   719                           intcon	equ	0xFF2
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           postdec1	equ	0xFE5
   723                           fsr1l	equ	0xFE1
   724                           indf2	equ	0xFDF
   725                           fsr2h	equ	0xFDA
   726                           fsr2l	equ	0xFD9
   727                           status	equ	0xFD8
   728                           
   729 ;; *************** function _odometroParcial *****************
   730 ;; Defined at:
   731 ;;		line 60 in file "Odometro_Total_Parcial.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;		None
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   745 ;;      Params:         0       0       0       0       0       0       0       0       0
   746 ;;      Locals:         0       0       0       0       0       0       0       0       0
   747 ;;      Temps:          0       0       0       0       0       0       0       0       0
   748 ;;      Totals:         0       0       0       0       0       0       0       0       0
   749 ;;Total ram usage:        0 bytes
   750 ;; Hardware stack levels used:    1
   751 ;; Hardware stack levels required when called:    4
   752 ;; This function calls:
   753 ;;		_EscreveFraseRamLCD
   754 ;;		_PosicaoCursorLCD
   755 ;; This function is called by:
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text3
   761  000A86                     __ptext3:
   762                           	opt stack 0
   763  000A86                     _odometroParcial:
   764                           	opt stack 26
   765                           
   766                           ;Odometro_Total_Parcial.c: 61: static unsigned char i;
   767                           ;Odometro_Total_Parcial.c: 62: if (atualizaOdoParcial){
   768                           
   769                           ;incstack = 0
   770  000A86  502E               	movf	_atualizaOdoParcial,w,c
   771  000A88  102F               	iorwf	_atualizaOdoParcial+1,w,c
   772  000A8A  B4D8               	btfsc	status,2,c
   773  000A8C  0012               	return	
   774                           
   775                           ;Odometro_Total_Parcial.c: 63: odoParcial[5]++;
   776  000A8E  2A25               	incf	_odoParcial+5,f,c
   777                           
   778                           ;Odometro_Total_Parcial.c: 65: if (odoParcial[5] > 0x39){
   779  000A90  0E39               	movlw	57
   780  000A92  6425               	cpfsgt	_odoParcial+5,c
   781  000A94  0012               	return	
   782                           
   783                           ;Odometro_Total_Parcial.c: 66: odoParcial[5] = 0x30;
   784  000A96  0E30               	movlw	48
   785  000A98  6E25               	movwf	_odoParcial+5,c
   786                           
   787                           ;Odometro_Total_Parcial.c: 67: odoParcial[3]++;
   788  000A9A  2A23               	incf	_odoParcial+3,f,c
   789                           
   790                           ;Odometro_Total_Parcial.c: 69: if (odoParcial[3] > 0x39){
   791  000A9C  0E39               	movlw	57
   792  000A9E  6423               	cpfsgt	_odoParcial+3,c
   793  000AA0  D026               	goto	l1628
   794                           
   795                           ;Odometro_Total_Parcial.c: 70: odoParcial[3] = 0x30;
   796  000AA2  0E30               	movlw	48
   797  000AA4  6E23               	movwf	_odoParcial+3,c
   798                           
   799                           ;Odometro_Total_Parcial.c: 71: odoParcial[2]++;
   800  000AA6  2A22               	incf	_odoParcial+2,f,c
   801                           
   802                           ;Odometro_Total_Parcial.c: 73: if (odoParcial[2] > 0x39){
   803  000AA8  0E39               	movlw	57
   804  000AAA  6422               	cpfsgt	_odoParcial+2,c
   805  000AAC  D020               	goto	l1628
   806                           
   807                           ;Odometro_Total_Parcial.c: 74: odoParcial[2] = 0x30;
   808  000AAE  0E30               	movlw	48
   809  000AB0  6E22               	movwf	_odoParcial+2,c
   810                           
   811                           ;Odometro_Total_Parcial.c: 75: odoParcial[1]++;
   812  000AB2  2A21               	incf	_odoParcial+1,f,c
   813                           
   814                           ;Odometro_Total_Parcial.c: 77: if (odoParcial[1] > 0x39){
   815  000AB4  0E39               	movlw	57
   816  000AB6  6421               	cpfsgt	_odoParcial+1,c
   817  000AB8  D01A               	goto	l1628
   818                           
   819                           ;Odometro_Total_Parcial.c: 78: odoParcial[1] = 0x30;
   820  000ABA  0E30               	movlw	48
   821  000ABC  6E21               	movwf	_odoParcial+1,c
   822                           
   823                           ;Odometro_Total_Parcial.c: 79: odoParcial[0]++;
   824  000ABE  2A20               	incf	_odoParcial,f,c
   825                           
   826                           ;Odometro_Total_Parcial.c: 81: if (odoParcial[0] > 0x39){
   827  000AC0  0E39               	movlw	57
   828  000AC2  6420               	cpfsgt	_odoParcial,c
   829  000AC4  D014               	goto	l1628
   830                           
   831                           ;Odometro_Total_Parcial.c: 82: for (i = 0; i <= 3; i++){
   832  000AC6  0E00               	movlw	0
   833  000AC8  6E36               	movwf	odometroParcial@i,c
   834  000ACA                     l1616:
   835  000ACA  0E03               	movlw	3
   836  000ACC  6436               	cpfsgt	odometroParcial@i,c
   837  000ACE  D001               	goto	l1620
   838  000AD0  D00E               	goto	l1628
   839  000AD2                     l1620:
   840                           
   841                           ;Odometro_Total_Parcial.c: 83: odoParcial[i] = '0';
   842  000AD2  5036               	movf	odometroParcial@i,w,c
   843  000AD4  0D01               	mullw	1
   844  000AD6  0E20               	movlw	low _odoParcial
   845  000AD8  24F3               	addwf	prodl,w,c
   846  000ADA  6ED9               	movwf	fsr2l,c
   847  000ADC  0E00               	movlw	high _odoParcial
   848  000ADE  20F4               	addwfc	prodh,w,c
   849  000AE0  6EDA               	movwf	fsr2h,c
   850  000AE2  0E30               	movlw	48
   851  000AE4  6EDF               	movwf	indf2,c
   852                           
   853                           ;Odometro_Total_Parcial.c: 84: odoParcial[5] = '0';
   854  000AE6  0E30               	movlw	48
   855  000AE8  6E25               	movwf	_odoParcial+5,c
   856  000AEA  2A36               	incf	odometroParcial@i,f,c
   857  000AEC  D7EE               	goto	l1616
   858  000AEE                     l1628:
   859                           
   860                           ;Odometro_Total_Parcial.c: 85: }
   861                           ;Odometro_Total_Parcial.c: 86: }
   862                           ;Odometro_Total_Parcial.c: 87: }
   863                           ;Odometro_Total_Parcial.c: 88: }
   864                           ;Odometro_Total_Parcial.c: 89: }
   865                           ;Odometro_Total_Parcial.c: 90: PosicaoCursorLCD(2, 7);
   866  000AEE  0E07               	movlw	7
   867  000AF0  6E12               	movwf	PosicaoCursorLCD@coluna,c
   868  000AF2  0E02               	movlw	2
   869  000AF4  ECC0  F005         	call	_PosicaoCursorLCD
   870                           
   871                           ;Odometro_Total_Parcial.c: 91: EscreveFraseRamLCD(odoParcial);
   872  000AF8  0E20               	movlw	low _odoParcial
   873  000AFA  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   874  000AFC  0E00               	movlw	high _odoParcial
   875  000AFE  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   876  000B00  EC5A  F006         	call	_EscreveFraseRamLCD	;wreg free
   877                           
   878                           ;Odometro_Total_Parcial.c: 92: atualizaOdoParcial = 0;
   879  000B04  0E00               	movlw	0
   880  000B06  6E2F               	movwf	_atualizaOdoParcial+1,c
   881  000B08  0E00               	movlw	0
   882  000B0A  6E2E               	movwf	_atualizaOdoParcial,c
   883  000B0C  0012               	return	
   884  000B0E                     __end_of_odometroParcial:
   885                           	opt stack 0
   886                           tblptru	equ	0xFF8
   887                           tblptrh	equ	0xFF7
   888                           tblptrl	equ	0xFF6
   889                           tablat	equ	0xFF5
   890                           prodh	equ	0xFF4
   891                           prodl	equ	0xFF3
   892                           intcon	equ	0xFF2
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1l	equ	0xFE1
   897                           indf2	equ	0xFDF
   898                           fsr2h	equ	0xFDA
   899                           fsr2l	equ	0xFD9
   900                           status	equ	0xFD8
   901                           
   902 ;; *************** function _initInterrupt *****************
   903 ;; Defined at:
   904 ;;		line 58 in file "main.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, status,2
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   918 ;;      Params:         0       0       0       0       0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0       0       0
   921 ;;      Totals:         0       0       0       0       0       0       0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    1
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text4
   933  000DCE                     __ptext4:
   934                           	opt stack 0
   935  000DCE                     _initInterrupt:
   936                           	opt stack 29
   937                           
   938                           ;main.c: 59: INTCON = 0b11100000;
   939                           
   940                           ;incstack = 0
   941  000DCE  0EE0               	movlw	224
   942  000DD0  6EF2               	movwf	intcon,c	;volatile
   943                           
   944                           ;main.c: 60: INTCON2 = 0b10000000;
   945  000DD2  0E80               	movlw	128
   946  000DD4  6EF1               	movwf	intcon2,c	;volatile
   947                           
   948                           ;main.c: 61: INTCON3 = 0b00000000;
   949  000DD6  0E00               	movlw	0
   950  000DD8  6EF0               	movwf	intcon3,c	;volatile
   951                           
   952                           ;main.c: 62: CCP1CON = 0b00000101;
   953  000DDA  0E05               	movlw	5
   954  000DDC  6EBD               	movwf	4029,c	;volatile
   955                           
   956                           ;main.c: 63: PIR1 = 0b00000000;
   957  000DDE  0E00               	movlw	0
   958  000DE0  6E9E               	movwf	3998,c	;volatile
   959                           
   960                           ;main.c: 64: PIR2 = 0b00000000;
   961  000DE2  0E00               	movlw	0
   962  000DE4  6EA1               	movwf	4001,c	;volatile
   963                           
   964                           ;main.c: 65: PIE1 = 0b00000100;
   965  000DE6  0E04               	movlw	4
   966  000DE8  6E9D               	movwf	3997,c	;volatile
   967                           
   968                           ;main.c: 66: PIE2 = 0b00000000;
   969  000DEA  0E00               	movlw	0
   970  000DEC  6EA0               	movwf	4000,c	;volatile
   971                           
   972                           ;main.c: 67: IPR1 = 0b00000000;
   973  000DEE  0E00               	movlw	0
   974  000DF0  6E9F               	movwf	3999,c	;volatile
   975                           
   976                           ;main.c: 68: IPR2 = 0b00000000;
   977  000DF2  0E00               	movlw	0
   978  000DF4  6EA2               	movwf	4002,c	;volatile
   979                           
   980                           ;main.c: 69: RCON = 0b00000000;
   981  000DF6  0E00               	movlw	0
   982  000DF8  6ED0               	movwf	4048,c	;volatile
   983  000DFA  0012               	return		;funcret
   984  000DFC                     __end_of_initInterrupt:
   985                           	opt stack 0
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           prodh	equ	0xFF4
   991                           prodl	equ	0xFF3
   992                           intcon	equ	0xFF2
   993                           intcon2	equ	0xFF1
   994                           intcon3	equ	0xFF0
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           indf2	equ	0xFDF
  1000                           fsr2h	equ	0xFDA
  1001                           fsr2l	equ	0xFD9
  1002                           status	equ	0xFD8
  1003                           
  1004 ;; *************** function _initHw *****************
  1005 ;; Defined at:
  1006 ;;		line 71 in file "main.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;		None
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;		None
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1020 ;;      Params:         0       0       0       0       0       0       0       0       0
  1021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1023 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        0 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    1
  1027 ;; This function calls:
  1028 ;;		Nothing
  1029 ;; This function is called by:
  1030 ;;		_main
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text5
  1035  000D50                     __ptext5:
  1036                           	opt stack 0
  1037  000D50                     _initHw:
  1038                           	opt stack 29
  1039                           
  1040                           ;main.c: 73: TRISA = 0x00;
  1041                           
  1042                           ;incstack = 0
  1043  000D50  0E00               	movlw	0
  1044  000D52  6E92               	movwf	3986,c	;volatile
  1045                           
  1046                           ;main.c: 74: TRISB = 0x00;
  1047  000D54  0E00               	movlw	0
  1048  000D56  6E93               	movwf	3987,c	;volatile
  1049                           
  1050                           ;main.c: 75: TRISC = 0x00;
  1051  000D58  0E00               	movlw	0
  1052  000D5A  6E94               	movwf	3988,c	;volatile
  1053                           
  1054                           ;main.c: 76: TRISCbits.RC2 = 1;
  1055  000D5C  8494               	bsf	3988,2,c	;volatile
  1056                           
  1057                           ;main.c: 77: TRISD = 0x00;
  1058  000D5E  0E00               	movlw	0
  1059  000D60  6E95               	movwf	3989,c	;volatile
  1060                           
  1061                           ;main.c: 78: TRISE = 0x0F;
  1062  000D62  0E0F               	movlw	15
  1063  000D64  6E96               	movwf	3990,c	;volatile
  1064                           
  1065                           ;main.c: 80: ADCON0 = 0b00000001;
  1066  000D66  0E01               	movlw	1
  1067  000D68  6EC2               	movwf	4034,c	;volatile
  1068                           
  1069                           ;main.c: 81: ADCON1 = 0b00001101;
  1070  000D6A  0E0D               	movlw	13
  1071  000D6C  6EC1               	movwf	4033,c	;volatile
  1072                           
  1073                           ;main.c: 82: ADCON2 = 0b10000100;
  1074  000D6E  0E84               	movlw	132
  1075  000D70  6EC0               	movwf	4032,c	;volatile
  1076                           
  1077                           ;main.c: 84: PORTEbits.RE0 = 0;
  1078  000D72  9084               	bcf	3972,0,c	;volatile
  1079                           
  1080                           ;main.c: 87: LATA = 0x00;
  1081  000D74  0E00               	movlw	0
  1082  000D76  6E89               	movwf	3977,c	;volatile
  1083                           
  1084                           ;main.c: 88: LATB = 0x00;
  1085  000D78  0E00               	movlw	0
  1086  000D7A  6E8A               	movwf	3978,c	;volatile
  1087                           
  1088                           ;main.c: 89: LATD = 0x00;
  1089  000D7C  0E00               	movlw	0
  1090  000D7E  6E8C               	movwf	3980,c	;volatile
  1091                           
  1092                           ;main.c: 91: T0CON = 0b01000101;
  1093  000D80  0E45               	movlw	69
  1094  000D82  6ED5               	movwf	4053,c	;volatile
  1095                           
  1096                           ;main.c: 92: CCP1CON = 0b00000101;
  1097  000D84  0E05               	movlw	5
  1098  000D86  6EBD               	movwf	4029,c	;volatile
  1099                           
  1100                           ;main.c: 93: T1CON = 0b01000100;
  1101  000D88  0E44               	movlw	68
  1102  000D8A  6ECD               	movwf	4045,c	;volatile
  1103                           
  1104                           ;main.c: 94: T3CONbits.T3CCP1 = 0;
  1105  000D8C  96B1               	bcf	4017,3,c	;volatile
  1106                           
  1107                           ;main.c: 95: INTCONbits.GIE = 1;
  1108  000D8E  8EF2               	bsf	intcon,7,c	;volatile
  1109                           
  1110                           ;main.c: 96: INTCONbits.PEIE = 1;
  1111  000D90  8CF2               	bsf	intcon,6,c	;volatile
  1112  000D92  0012               	return		;funcret
  1113  000D94                     __end_of_initHw:
  1114                           	opt stack 0
  1115                           tblptru	equ	0xFF8
  1116                           tblptrh	equ	0xFF7
  1117                           tblptrl	equ	0xFF6
  1118                           tablat	equ	0xFF5
  1119                           prodh	equ	0xFF4
  1120                           prodl	equ	0xFF3
  1121                           intcon	equ	0xFF2
  1122                           intcon2	equ	0xFF1
  1123                           intcon3	equ	0xFF0
  1124                           postinc0	equ	0xFEE
  1125                           wreg	equ	0xFE8
  1126                           postdec1	equ	0xFE5
  1127                           fsr1l	equ	0xFE1
  1128                           indf2	equ	0xFDF
  1129                           fsr2h	equ	0xFDA
  1130                           fsr2l	equ	0xFD9
  1131                           status	equ	0xFD8
  1132                           
  1133 ;; *************** function _display *****************
  1134 ;; Defined at:
  1135 ;;		line 99 in file "main.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1149 ;;      Params:         0       0       0       0       0       0       0       0       0
  1150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    4
  1156 ;; This function calls:
  1157 ;;		_EscreveFraseRamLCD
  1158 ;;		_PosicaoCursorLCD
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text6
  1165  000C5A                     __ptext6:
  1166                           	opt stack 0
  1167  000C5A                     _display:
  1168                           	opt stack 26
  1169                           
  1170                           ;main.c: 100: PosicaoCursorLCD(1, 7);
  1171                           
  1172                           ;incstack = 0
  1173  000C5A  0E07               	movlw	7
  1174  000C5C  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1175  000C5E  0E01               	movlw	1
  1176  000C60  ECC0  F005         	call	_PosicaoCursorLCD
  1177                           
  1178                           ;main.c: 101: EscreveFraseRamLCD(odoTotal);
  1179  000C64  0E27               	movlw	low _odoTotal
  1180  000C66  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1181  000C68  0E00               	movlw	high _odoTotal
  1182  000C6A  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1183  000C6C  EC5A  F006         	call	_EscreveFraseRamLCD	;wreg free
  1184                           
  1185                           ;main.c: 102: PosicaoCursorLCD(2, 7);
  1186  000C70  0E07               	movlw	7
  1187  000C72  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1188  000C74  0E02               	movlw	2
  1189  000C76  ECC0  F005         	call	_PosicaoCursorLCD
  1190                           
  1191                           ;main.c: 103: EscreveFraseRamLCD(odoParcial);
  1192  000C7A  0E20               	movlw	low _odoParcial
  1193  000C7C  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1194  000C7E  0E00               	movlw	high _odoParcial
  1195  000C80  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1196  000C82  EC5A  F006         	call	_EscreveFraseRamLCD	;wreg free
  1197                           
  1198                           ;main.c: 104: PosicaoCursorLCD(1, 14);
  1199  000C86  0E0E               	movlw	14
  1200  000C88  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1201  000C8A  0E01               	movlw	1
  1202  000C8C  ECC0  F005         	call	_PosicaoCursorLCD
  1203                           
  1204                           ;main.c: 105: EscreveFraseRamLCD("Km");
  1205  000C90  0E01               	movlw	low STR_1
  1206  000C92  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1207  000C94  0E08               	movlw	high STR_1
  1208  000C96  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1209  000C98  EC5A  F006         	call	_EscreveFraseRamLCD	;wreg free
  1210                           
  1211                           ;main.c: 106: PosicaoCursorLCD(2, 14);
  1212  000C9C  0E0E               	movlw	14
  1213  000C9E  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1214  000CA0  0E02               	movlw	2
  1215  000CA2  ECC0  F005         	call	_PosicaoCursorLCD
  1216                           
  1217                           ;main.c: 107: EscreveFraseRamLCD("Km");
  1218  000CA6  0E01               	movlw	low STR_1
  1219  000CA8  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1220  000CAA  0E08               	movlw	high STR_1
  1221  000CAC  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1222  000CAE  EC5A  F006         	call	_EscreveFraseRamLCD	;wreg free
  1223  000CB2  0012               	return		;funcret
  1224  000CB4                     __end_of_display:
  1225                           	opt stack 0
  1226                           tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           prodh	equ	0xFF4
  1231                           prodl	equ	0xFF3
  1232                           intcon	equ	0xFF2
  1233                           intcon2	equ	0xFF1
  1234                           intcon3	equ	0xFF0
  1235                           postinc0	equ	0xFEE
  1236                           wreg	equ	0xFE8
  1237                           postdec1	equ	0xFE5
  1238                           fsr1l	equ	0xFE1
  1239                           indf2	equ	0xFDF
  1240                           fsr2h	equ	0xFDA
  1241                           fsr2l	equ	0xFD9
  1242                           status	equ	0xFD8
  1243                           
  1244 ;; *************** function _PosicaoCursorLCD *****************
  1245 ;; Defined at:
  1246 ;;		line 287 in file "displayLCD.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  linha           1    wreg     unsigned char 
  1249 ;;  coluna          1   17[COMRAM] unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  linha           1   18[COMRAM] unsigned char 
  1252 ;;  EnderecoLCD     1   19[COMRAM] unsigned char 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, status,2, status,0, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1262 ;;      Params:         1       0       0       0       0       0       0       0       0
  1263 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1265 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1266 ;;Total ram usage:        3 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    3
  1269 ;; This function calls:
  1270 ;;		_EnderecoCursor
  1271 ;; This function is called by:
  1272 ;;		_odometroTotal
  1273 ;;		_odometroParcial
  1274 ;;		_display
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text7
  1279  000B80                     __ptext7:
  1280                           	opt stack 0
  1281  000B80                     _PosicaoCursorLCD:
  1282                           	opt stack 26
  1283                           
  1284                           ;incstack = 0
  1285                           ;PosicaoCursorLCD@linha stored from wreg
  1286  000B80  6E13               	movwf	PosicaoCursorLCD@linha,c
  1287                           
  1288                           ;displayLCD.c: 295: unsigned char EnderecoLCD = 0x00;
  1289  000B82  0E00               	movlw	0
  1290  000B84  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1291                           
  1292                           ;displayLCD.c: 299: if(coluna <= 16)
  1293  000B86  0E11               	movlw	17
  1294  000B88  6012               	cpfslt	PosicaoCursorLCD@coluna,c
  1295  000B8A  D02F               	goto	l1492
  1296  000B8C  D01E               	goto	l1488
  1297  000B8E                     l70:
  1298                           
  1299                           ;displayLCD.c: 306: EnderecoLCD = 0x00 + coluna;
  1300  000B8E  C012  F014         	movff	PosicaoCursorLCD@coluna,PosicaoCursorLCD@EnderecoLCD
  1301                           
  1302                           ;displayLCD.c: 307: EnderecoCursor(EnderecoLCD);
  1303  000B92  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1304  000B94  ECF8  F005         	call	_EnderecoCursor
  1305                           
  1306                           ;displayLCD.c: 308: break;
  1307  000B98  D026               	goto	l1490
  1308  000B9A                     l1472:
  1309                           
  1310                           ;displayLCD.c: 311: EnderecoLCD = 0x40 + coluna;
  1311  000B9A  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1312  000B9C  0F40               	addlw	64
  1313  000B9E  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1314                           
  1315                           ;displayLCD.c: 312: EnderecoCursor(EnderecoLCD);
  1316  000BA0  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1317  000BA2  ECF8  F005         	call	_EnderecoCursor
  1318                           
  1319                           ;displayLCD.c: 313: break;
  1320  000BA6  D01F               	goto	l1490
  1321  000BA8                     l1476:
  1322                           
  1323                           ;displayLCD.c: 316: EnderecoLCD = 0x14 + coluna;
  1324  000BA8  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1325  000BAA  0F14               	addlw	20
  1326  000BAC  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1327                           
  1328                           ;displayLCD.c: 317: EnderecoCursor(EnderecoLCD);
  1329  000BAE  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1330  000BB0  ECF8  F005         	call	_EnderecoCursor
  1331                           
  1332                           ;displayLCD.c: 318: break;
  1333  000BB4  D018               	goto	l1490
  1334  000BB6                     l1480:
  1335                           
  1336                           ;displayLCD.c: 321: EnderecoLCD = 0x54 + coluna;
  1337  000BB6  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1338  000BB8  0F54               	addlw	84
  1339  000BBA  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1340                           
  1341                           ;displayLCD.c: 322: EnderecoCursor(EnderecoLCD);
  1342  000BBC  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1343  000BBE  ECF8  F005         	call	_EnderecoCursor
  1344                           
  1345                           ;displayLCD.c: 323: break;
  1346  000BC2  D011               	goto	l1490
  1347  000BC4                     l1484:
  1348                           
  1349                           ;displayLCD.c: 326: EnderecoLCD = 0x00;
  1350  000BC4  0E00               	movlw	0
  1351  000BC6  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1352                           
  1353                           ;displayLCD.c: 328: }
  1354                           
  1355                           ;displayLCD.c: 327: break;
  1356  000BC8  D00E               	goto	l1490
  1357  000BCA                     l1488:
  1358  000BCA  5013               	movf	PosicaoCursorLCD@linha,w,c
  1359                           
  1360                           ; Switch size 1, requested type "space"
  1361                           ; Number of cases is 4, Range of values is 1 to 4
  1362                           ; switch strategies available:
  1363                           ; Name         Instructions Cycles
  1364                           ; simple_byte           13     7 (average)
  1365                           ;	Chosen strategy is simple_byte
  1366  000BCC  0A01               	xorlw	1	; case 1
  1367  000BCE  B4D8               	btfsc	status,2,c
  1368  000BD0  D7DE               	goto	l70
  1369  000BD2  0A03               	xorlw	3	; case 2
  1370  000BD4  B4D8               	btfsc	status,2,c
  1371  000BD6  D7E1               	goto	l1472
  1372  000BD8  0A01               	xorlw	1	; case 3
  1373  000BDA  B4D8               	btfsc	status,2,c
  1374  000BDC  D7E5               	goto	l1476
  1375  000BDE  0A07               	xorlw	7	; case 4
  1376  000BE0  B4D8               	btfsc	status,2,c
  1377  000BE2  D7E9               	goto	l1480
  1378  000BE4  D7EF               	goto	l1484
  1379  000BE6                     l1490:
  1380                           
  1381                           ;displayLCD.c: 330: coluna++;
  1382  000BE6  2A12               	incf	PosicaoCursorLCD@coluna,f,c
  1383                           
  1384                           ;displayLCD.c: 331: }
  1385  000BE8  0012               	return	
  1386  000BEA                     l1492:
  1387                           
  1388                           ;displayLCD.c: 332: else
  1389                           ;displayLCD.c: 333: {
  1390                           ;displayLCD.c: 334: EnderecoLCD = 0x00;
  1391  000BEA  0E00               	movlw	0
  1392  000BEC  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1393  000BEE  0012               	return	
  1394  000BF0                     __end_of_PosicaoCursorLCD:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           prodh	equ	0xFF4
  1401                           prodl	equ	0xFF3
  1402                           intcon	equ	0xFF2
  1403                           intcon2	equ	0xFF1
  1404                           intcon3	equ	0xFF0
  1405                           postinc0	equ	0xFEE
  1406                           wreg	equ	0xFE8
  1407                           postdec1	equ	0xFE5
  1408                           fsr1l	equ	0xFE1
  1409                           indf2	equ	0xFDF
  1410                           fsr2h	equ	0xFDA
  1411                           fsr2l	equ	0xFD9
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _EnderecoCursor *****************
  1415 ;; Defined at:
  1416 ;;		line 236 in file "displayLCD.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  endereco        1    wreg     unsigned char 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  endereco        1   16[COMRAM] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0
  1431 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1433 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1434 ;;Total ram usage:        1 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    2
  1437 ;; This function calls:
  1438 ;;		_Delay
  1439 ;; This function is called by:
  1440 ;;		_PosicaoCursorLCD
  1441 ;;		_CriaCaractereLCD
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text8
  1446  000BF0                     __ptext8:
  1447                           	opt stack 0
  1448  000BF0                     _EnderecoCursor:
  1449                           	opt stack 26
  1450                           
  1451                           ;incstack = 0
  1452                           ;EnderecoCursor@endereco stored from wreg
  1453  000BF0  6E11               	movwf	EnderecoCursor@endereco,c
  1454                           
  1455                           ;displayLCD.c: 239: PORTDbits.RD2 = 0;
  1456  000BF2  9483               	bcf	3971,2,c	;volatile
  1457                           
  1458                           ;displayLCD.c: 240: PORTDbits.RD1 = 0;
  1459  000BF4  9283               	bcf	3971,1,c	;volatile
  1460                           
  1461                           ;displayLCD.c: 241: PORTDbits.RD0 = 0;
  1462  000BF6  9083               	bcf	3971,0,c	;volatile
  1463                           
  1464                           ;displayLCD.c: 244: PORTDbits.RD7 = 1;
  1465  000BF8  8E83               	bsf	3971,7,c	;volatile
  1466                           
  1467                           ;displayLCD.c: 245: if(endereco&0b00010000){PORTDbits.RD4=1;}
  1468  000BFA  A811               	btfss	EnderecoCursor@endereco,4,c
  1469  000BFC  D002               	goto	l51
  1470  000BFE  8883               	bsf	3971,4,c	;volatile
  1471  000C00  D001               	goto	l978
  1472  000C02                     l51:
  1473                           
  1474                           ;displayLCD.c: 246: else {PORTDbits.RD4=0;}
  1475  000C02  9883               	bcf	3971,4,c	;volatile
  1476  000C04                     l978:
  1477                           
  1478                           ;displayLCD.c: 247: if(endereco&0b00100000){PORTDbits.RD5=1;}
  1479  000C04  AA11               	btfss	EnderecoCursor@endereco,5,c
  1480  000C06  D002               	goto	l53
  1481  000C08  8A83               	bsf	3971,5,c	;volatile
  1482  000C0A  D001               	goto	l982
  1483  000C0C                     l53:
  1484                           
  1485                           ;displayLCD.c: 248: else {PORTDbits.RD5=0;}
  1486  000C0C  9A83               	bcf	3971,5,c	;volatile
  1487  000C0E                     l982:
  1488                           
  1489                           ;displayLCD.c: 249: if(endereco&0b01000000){PORTDbits.RD6=1;}
  1490  000C0E  AC11               	btfss	EnderecoCursor@endereco,6,c
  1491  000C10  D002               	goto	l55
  1492  000C12  8C83               	bsf	3971,6,c	;volatile
  1493  000C14  D001               	goto	l56
  1494  000C16                     l55:
  1495                           
  1496                           ;displayLCD.c: 250: else {PORTDbits.RD6=0;}
  1497  000C16  9C83               	bcf	3971,6,c	;volatile
  1498  000C18                     l56:
  1499                           
  1500                           ;displayLCD.c: 253: PORTDbits.RD0 = 1;
  1501  000C18  8083               	bsf	3971,0,c	;volatile
  1502                           
  1503                           ;displayLCD.c: 254: Delay();
  1504  000C1A  EC11  F007         	call	_Delay	;wreg free
  1505                           
  1506                           ;displayLCD.c: 255: PORTDbits.RD0 = 0;
  1507  000C1E  9083               	bcf	3971,0,c	;volatile
  1508                           
  1509                           ;displayLCD.c: 256: Delay();
  1510  000C20  EC11  F007         	call	_Delay	;wreg free
  1511                           
  1512                           ;displayLCD.c: 259: if(endereco&0b00000001){PORTDbits.RD4=1;}
  1513  000C24  A011               	btfss	EnderecoCursor@endereco,0,c
  1514  000C26  D002               	goto	l57
  1515  000C28  8883               	bsf	3971,4,c	;volatile
  1516  000C2A  D001               	goto	l58
  1517  000C2C                     l57:
  1518                           
  1519                           ;displayLCD.c: 260: else {PORTDbits.RD4=0;}
  1520  000C2C  9883               	bcf	3971,4,c	;volatile
  1521  000C2E                     l58:
  1522                           
  1523                           ;displayLCD.c: 261: if(endereco&0b00000010){PORTDbits.RD5=1;}
  1524  000C2E  A211               	btfss	EnderecoCursor@endereco,1,c
  1525  000C30  D002               	goto	l59
  1526  000C32  8A83               	bsf	3971,5,c	;volatile
  1527  000C34  D001               	goto	l60
  1528  000C36                     l59:
  1529                           
  1530                           ;displayLCD.c: 262: else {PORTDbits.RD5=0;}
  1531  000C36  9A83               	bcf	3971,5,c	;volatile
  1532  000C38                     l60:
  1533                           
  1534                           ;displayLCD.c: 263: if(endereco&0b00000100){PORTDbits.RD6=1;}
  1535  000C38  A411               	btfss	EnderecoCursor@endereco,2,c
  1536  000C3A  D002               	goto	l61
  1537  000C3C  8C83               	bsf	3971,6,c	;volatile
  1538  000C3E  D001               	goto	l62
  1539  000C40                     l61:
  1540                           
  1541                           ;displayLCD.c: 264: else {PORTDbits.RD6=0;}
  1542  000C40  9C83               	bcf	3971,6,c	;volatile
  1543  000C42                     l62:
  1544                           
  1545                           ;displayLCD.c: 265: if(endereco&0b00001000){PORTDbits.RD7=1;}
  1546  000C42  A611               	btfss	EnderecoCursor@endereco,3,c
  1547  000C44  D002               	goto	l63
  1548  000C46  8E83               	bsf	3971,7,c	;volatile
  1549  000C48  D001               	goto	l64
  1550  000C4A                     l63:
  1551                           
  1552                           ;displayLCD.c: 266: else {PORTDbits.RD7=0;}
  1553  000C4A  9E83               	bcf	3971,7,c	;volatile
  1554  000C4C                     l64:
  1555                           
  1556                           ;displayLCD.c: 269: PORTDbits.RD0 = 1;
  1557  000C4C  8083               	bsf	3971,0,c	;volatile
  1558                           
  1559                           ;displayLCD.c: 270: Delay();
  1560  000C4E  EC11  F007         	call	_Delay	;wreg free
  1561                           
  1562                           ;displayLCD.c: 271: PORTDbits.RD0 = 0;
  1563  000C52  9083               	bcf	3971,0,c	;volatile
  1564                           
  1565                           ;displayLCD.c: 272: Delay();
  1566  000C54  EC11  F007         	call	_Delay	;wreg free
  1567  000C58  0012               	return		;funcret
  1568  000C5A                     __end_of_EnderecoCursor:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           prodh	equ	0xFF4
  1575                           prodl	equ	0xFF3
  1576                           intcon	equ	0xFF2
  1577                           intcon2	equ	0xFF1
  1578                           intcon3	equ	0xFF0
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           postdec1	equ	0xFE5
  1582                           fsr1l	equ	0xFE1
  1583                           indf2	equ	0xFDF
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _EscreveFraseRamLCD *****************
  1589 ;; Defined at:
  1590 ;;		line 470 in file "displayLCD.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  buffer          2   17[COMRAM] PTR unsigned char 
  1593 ;;		 -> STR_2(3), STR_1(3), odoParcial(7), odoTotal(7), 
  1594 ;;		 -> EscreveInteiroLCD@texto(7), 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1606 ;;      Params:         2       0       0       0       0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1609 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1610 ;;Total ram usage:        2 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    3
  1613 ;; This function calls:
  1614 ;;		_EscreveCaractereLCD
  1615 ;; This function is called by:
  1616 ;;		_odometroTotal
  1617 ;;		_odometroParcial
  1618 ;;		_display
  1619 ;;		_EscreveInteiroLCD
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text9
  1624  000CB4                     __ptext9:
  1625                           	opt stack 0
  1626  000CB4                     _EscreveFraseRamLCD:
  1627                           	opt stack 26
  1628                           
  1629                           ;displayLCD.c: 472: while(*buffer)
  1630                           
  1631                           ;incstack = 0
  1632  000CB4  D014               	goto	l1500
  1633  000CB6                     l1496:
  1634                           
  1635                           ;displayLCD.c: 473: {
  1636                           ;displayLCD.c: 474: EscreveCaractereLCD(*buffer);
  1637  000CB6  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1638  000CBA  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1639  000CBE  6AF8               	clrf	tblptru,c
  1640  000CC0  0E07               	movlw	(high __ramtop+-1)
  1641  000CC2  64F7               	cpfsgt	tblptrh,c
  1642  000CC4  D003               	bra	u677
  1643  000CC6  0008               	tblrd		*
  1644  000CC8  50F5               	movf	tablat,w,c
  1645  000CCA  D005               	bra	u670
  1646  000CCC                     u677:
  1647  000CCC  CFF6 FFE9          	movff	tblptrl,fsr0l
  1648  000CD0  CFF7 FFEA          	movff	tblptrh,fsr0h
  1649  000CD4  50EF               	movf	indf0,w,c
  1650  000CD6                     u670:
  1651  000CD6  EC87  F005         	call	_EscreveCaractereLCD
  1652                           
  1653                           ;displayLCD.c: 475: buffer++;
  1654  000CDA  4A12               	infsnz	EscreveFraseRamLCD@buffer,f,c
  1655  000CDC  2A13               	incf	EscreveFraseRamLCD@buffer+1,f,c
  1656  000CDE                     l1500:
  1657  000CDE  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1658  000CE2  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1659  000CE6  6AF8               	clrf	tblptru,c
  1660  000CE8  0E07               	movlw	(high __ramtop+-1)
  1661  000CEA  64F7               	cpfsgt	tblptrh,c
  1662  000CEC  D003               	bra	u687
  1663  000CEE  0008               	tblrd		*
  1664  000CF0  50F5               	movf	tablat,w,c
  1665  000CF2  D005               	bra	u680
  1666  000CF4                     u687:
  1667  000CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
  1668  000CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
  1669  000CFC  50EF               	movf	indf0,w,c
  1670  000CFE                     u680:
  1671  000CFE  0900               	iorlw	0
  1672  000D00  B4D8               	btfsc	status,2,c
  1673  000D02  0012               	return	
  1674  000D04  D7D8               	goto	l1496
  1675  000D06                     __end_of_EscreveFraseRamLCD:
  1676                           	opt stack 0
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           prodh	equ	0xFF4
  1682                           prodl	equ	0xFF3
  1683                           intcon	equ	0xFF2
  1684                           intcon2	equ	0xFF1
  1685                           intcon3	equ	0xFF0
  1686                           indf0	equ	0xFEF
  1687                           postinc0	equ	0xFEE
  1688                           fsr0h	equ	0xFEA
  1689                           fsr0l	equ	0xFE9
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1l	equ	0xFE1
  1693                           indf2	equ	0xFDF
  1694                           fsr2h	equ	0xFDA
  1695                           fsr2l	equ	0xFD9
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _EscreveCaractereLCD *****************
  1699 ;; Defined at:
  1700 ;;		line 348 in file "displayLCD.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  data            1    wreg     unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  data            1   16[COMRAM] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2, status,0, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1714 ;;      Params:         0       0       0       0       0       0       0       0       0
  1715 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1717 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1718 ;;Total ram usage:        1 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    2
  1721 ;; This function calls:
  1722 ;;		_Delay
  1723 ;; This function is called by:
  1724 ;;		_EscreveFraseRamLCD
  1725 ;;		_EscreveFloatLCD
  1726 ;;		_EscreveFraseLCD
  1727 ;;		_CriaCaractereLCD
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text10
  1732  000B0E                     __ptext10:
  1733                           	opt stack 0
  1734  000B0E                     _EscreveCaractereLCD:
  1735                           	opt stack 26
  1736                           
  1737                           ;incstack = 0
  1738                           ;EscreveCaractereLCD@data stored from wreg
  1739  000B0E  6E11               	movwf	EscreveCaractereLCD@data,c
  1740                           
  1741                           ;displayLCD.c: 351: PORTDbits.RD2 = 0;
  1742  000B10  9483               	bcf	3971,2,c	;volatile
  1743                           
  1744                           ;displayLCD.c: 352: PORTDbits.RD1 = 1;
  1745  000B12  8283               	bsf	3971,1,c	;volatile
  1746                           
  1747                           ;displayLCD.c: 353: PORTDbits.RD0 = 0;
  1748  000B14  9083               	bcf	3971,0,c	;volatile
  1749                           
  1750                           ;displayLCD.c: 356: if(data&0b00010000){PORTDbits.RD4=1;}
  1751  000B16  A811               	btfss	EscreveCaractereLCD@data,4,c
  1752  000B18  D002               	goto	l80
  1753  000B1A  8883               	bsf	3971,4,c	;volatile
  1754  000B1C  D001               	goto	l1010
  1755  000B1E                     l80:
  1756                           
  1757                           ;displayLCD.c: 357: else {PORTDbits.RD4=0;}
  1758  000B1E  9883               	bcf	3971,4,c	;volatile
  1759  000B20                     l1010:
  1760                           
  1761                           ;displayLCD.c: 358: if(data&0b00100000){PORTDbits.RD5=1;}
  1762  000B20  AA11               	btfss	EscreveCaractereLCD@data,5,c
  1763  000B22  D002               	goto	l82
  1764  000B24  8A83               	bsf	3971,5,c	;volatile
  1765  000B26  D001               	goto	l1014
  1766  000B28                     l82:
  1767                           
  1768                           ;displayLCD.c: 359: else {PORTDbits.RD5=0;}
  1769  000B28  9A83               	bcf	3971,5,c	;volatile
  1770  000B2A                     l1014:
  1771                           
  1772                           ;displayLCD.c: 360: if(data&0b01000000){PORTDbits.RD6=1;}
  1773  000B2A  AC11               	btfss	EscreveCaractereLCD@data,6,c
  1774  000B2C  D002               	goto	l84
  1775  000B2E  8C83               	bsf	3971,6,c	;volatile
  1776  000B30  D001               	goto	l1018
  1777  000B32                     l84:
  1778                           
  1779                           ;displayLCD.c: 361: else {PORTDbits.RD6=0;}
  1780  000B32  9C83               	bcf	3971,6,c	;volatile
  1781  000B34                     l1018:
  1782                           
  1783                           ;displayLCD.c: 362: if(data&0b10000000){PORTDbits.RD7=1;}
  1784  000B34  AE11               	btfss	EscreveCaractereLCD@data,7,c
  1785  000B36  D002               	goto	l86
  1786  000B38  8E83               	bsf	3971,7,c	;volatile
  1787  000B3A  D001               	goto	l87
  1788  000B3C                     l86:
  1789                           
  1790                           ;displayLCD.c: 363: else {PORTDbits.RD7=0;}
  1791  000B3C  9E83               	bcf	3971,7,c	;volatile
  1792  000B3E                     l87:
  1793                           
  1794                           ;displayLCD.c: 366: PORTDbits.RD0 = 1;
  1795  000B3E  8083               	bsf	3971,0,c	;volatile
  1796                           
  1797                           ;displayLCD.c: 367: Delay();
  1798  000B40  EC11  F007         	call	_Delay	;wreg free
  1799                           
  1800                           ;displayLCD.c: 368: PORTDbits.RD0 = 0;
  1801  000B44  9083               	bcf	3971,0,c	;volatile
  1802                           
  1803                           ;displayLCD.c: 369: Delay();
  1804  000B46  EC11  F007         	call	_Delay	;wreg free
  1805                           
  1806                           ;displayLCD.c: 373: if(data&0b00000001){PORTDbits.RD4=1;}
  1807  000B4A  A011               	btfss	EscreveCaractereLCD@data,0,c
  1808  000B4C  D002               	goto	l88
  1809  000B4E  8883               	bsf	3971,4,c	;volatile
  1810  000B50  D001               	goto	l89
  1811  000B52                     l88:
  1812                           
  1813                           ;displayLCD.c: 374: else {PORTDbits.RD4=0;}
  1814  000B52  9883               	bcf	3971,4,c	;volatile
  1815  000B54                     l89:
  1816                           
  1817                           ;displayLCD.c: 375: if(data&0b00000010){PORTDbits.RD5=1;}
  1818  000B54  A211               	btfss	EscreveCaractereLCD@data,1,c
  1819  000B56  D002               	goto	l90
  1820  000B58  8A83               	bsf	3971,5,c	;volatile
  1821  000B5A  D001               	goto	l91
  1822  000B5C                     l90:
  1823                           
  1824                           ;displayLCD.c: 376: else {PORTDbits.RD5=0;}
  1825  000B5C  9A83               	bcf	3971,5,c	;volatile
  1826  000B5E                     l91:
  1827                           
  1828                           ;displayLCD.c: 377: if(data&0b00000100){PORTDbits.RD6=1;}
  1829  000B5E  A411               	btfss	EscreveCaractereLCD@data,2,c
  1830  000B60  D002               	goto	l92
  1831  000B62  8C83               	bsf	3971,6,c	;volatile
  1832  000B64  D001               	goto	l93
  1833  000B66                     l92:
  1834                           
  1835                           ;displayLCD.c: 378: else {PORTDbits.RD6=0;}
  1836  000B66  9C83               	bcf	3971,6,c	;volatile
  1837  000B68                     l93:
  1838                           
  1839                           ;displayLCD.c: 379: if(data&0b00001000){PORTDbits.RD7=1;}
  1840  000B68  A611               	btfss	EscreveCaractereLCD@data,3,c
  1841  000B6A  D002               	goto	l94
  1842  000B6C  8E83               	bsf	3971,7,c	;volatile
  1843  000B6E  D001               	goto	l95
  1844  000B70                     l94:
  1845                           
  1846                           ;displayLCD.c: 380: else {PORTDbits.RD7=0;}
  1847  000B70  9E83               	bcf	3971,7,c	;volatile
  1848  000B72                     l95:
  1849                           
  1850                           ;displayLCD.c: 383: PORTDbits.RD0 = 1;
  1851  000B72  8083               	bsf	3971,0,c	;volatile
  1852                           
  1853                           ;displayLCD.c: 384: Delay();
  1854  000B74  EC11  F007         	call	_Delay	;wreg free
  1855                           
  1856                           ;displayLCD.c: 385: PORTDbits.RD0 = 0;
  1857  000B78  9083               	bcf	3971,0,c	;volatile
  1858                           
  1859                           ;displayLCD.c: 386: Delay();
  1860  000B7A  EC11  F007         	call	_Delay	;wreg free
  1861  000B7E  0012               	return		;funcret
  1862  000B80                     __end_of_EscreveCaractereLCD:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           prodh	equ	0xFF4
  1869                           prodl	equ	0xFF3
  1870                           intcon	equ	0xFF2
  1871                           intcon2	equ	0xFF1
  1872                           intcon3	equ	0xFF0
  1873                           indf0	equ	0xFEF
  1874                           postinc0	equ	0xFEE
  1875                           fsr0h	equ	0xFEA
  1876                           fsr0l	equ	0xFE9
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           indf2	equ	0xFDF
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _Init_EEPROM *****************
  1886 ;; Defined at:
  1887 ;;		line 5 in file "EEPROM.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1901 ;;      Params:         0       0       0       0       0       0       0       0       0
  1902 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1904 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1905 ;;Total ram usage:        0 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    1
  1908 ;; This function calls:
  1909 ;;		Nothing
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text11
  1916  000E6A                     __ptext11:
  1917                           	opt stack 0
  1918  000E6A                     _Init_EEPROM:
  1919                           	opt stack 29
  1920                           
  1921                           ;EEPROM.c: 7: EECON1 = 0b00000100;
  1922                           
  1923                           ;incstack = 0
  1924  000E6A  0E04               	movlw	4
  1925  000E6C  6EA6               	movwf	4006,c	;volatile
  1926  000E6E  0012               	return		;funcret
  1927  000E70                     __end_of_Init_EEPROM:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           intcon	equ	0xFF2
  1936                           intcon2	equ	0xFF1
  1937                           intcon3	equ	0xFF0
  1938                           indf0	equ	0xFEF
  1939                           postinc0	equ	0xFEE
  1940                           fsr0h	equ	0xFEA
  1941                           fsr0l	equ	0xFE9
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _EEPROM_ReadByte *****************
  1951 ;; Defined at:
  1952 ;;		line 10 in file "EEPROM.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  MemoryAddres    1    wreg     unsigned char 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  MemoryAddres    1   14[COMRAM] unsigned char 
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      unsigned char 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0
  1967 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1969 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1970 ;;Total ram usage:        1 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    1
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text12
  1981  000E5C                     __ptext12:
  1982                           	opt stack 0
  1983  000E5C                     _EEPROM_ReadByte:
  1984                           	opt stack 29
  1985                           
  1986                           ;incstack = 0
  1987                           ;EEPROM_ReadByte@MemoryAddress stored from wreg
  1988  000E5C  6E0F               	movwf	EEPROM_ReadByte@MemoryAddress,c
  1989                           
  1990                           ;EEPROM.c: 12: EEADR = MemoryAddress;
  1991  000E5E  C00F  FFA9         	movff	EEPROM_ReadByte@MemoryAddress,4009	;volatile
  1992                           
  1993                           ;EEPROM.c: 13: EECON1 = 0x01;
  1994  000E62  0E01               	movlw	1
  1995  000E64  6EA6               	movwf	4006,c	;volatile
  1996                           
  1997                           ;EEPROM.c: 14: return(EEDATA);
  1998                           ;	Return value of _EEPROM_ReadByte is never used
  1999  000E66  50A8               	movf	4008,w,c	;volatile
  2000  000E68  0012               	return	
  2001  000E6A                     __end_of_EEPROM_ReadByte:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           prodh	equ	0xFF4
  2008                           prodl	equ	0xFF3
  2009                           intcon	equ	0xFF2
  2010                           intcon2	equ	0xFF1
  2011                           intcon3	equ	0xFF0
  2012                           indf0	equ	0xFEF
  2013                           postinc0	equ	0xFEE
  2014                           fsr0h	equ	0xFEA
  2015                           fsr0l	equ	0xFE9
  2016                           wreg	equ	0xFE8
  2017                           postdec1	equ	0xFE5
  2018                           fsr1l	equ	0xFE1
  2019                           indf2	equ	0xFDF
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _ConfiguraLCD *****************
  2025 ;; Defined at:
  2026 ;;		line 87 in file "displayLCD.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2040 ;;      Params:         0       0       0       0       0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2042 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2043 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2044 ;;Total ram usage:        1 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    3
  2047 ;; This function calls:
  2048 ;;		_Delay
  2049 ;;		_EscreveComandoLCD
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text13
  2056  0008C6                     __ptext13:
  2057                           	opt stack 0
  2058  0008C6                     _ConfiguraLCD:
  2059                           	opt stack 27
  2060                           
  2061                           ;displayLCD.c: 90: TRISDbits.RD2 = 0;
  2062                           
  2063                           ;incstack = 0
  2064  0008C6  9495               	bcf	3989,2,c	;volatile
  2065                           
  2066                           ;displayLCD.c: 91: TRISDbits.RD1 = 0;
  2067  0008C8  9295               	bcf	3989,1,c	;volatile
  2068                           
  2069                           ;displayLCD.c: 92: TRISDbits.RD0 = 0;
  2070  0008CA  9095               	bcf	3989,0,c	;volatile
  2071                           
  2072                           ;displayLCD.c: 95: TRISDbits.RD4=0;
  2073  0008CC  9895               	bcf	3989,4,c	;volatile
  2074                           
  2075                           ;displayLCD.c: 96: TRISDbits.RD5=0;
  2076  0008CE  9A95               	bcf	3989,5,c	;volatile
  2077                           
  2078                           ;displayLCD.c: 97: TRISDbits.RD6=0;
  2079  0008D0  9C95               	bcf	3989,6,c	;volatile
  2080                           
  2081                           ;displayLCD.c: 98: TRISDbits.RD7=0;
  2082  0008D2  9E95               	bcf	3989,7,c	;volatile
  2083                           
  2084                           ;displayLCD.c: 105: PORTDbits.RD2 = 0;
  2085  0008D4  9483               	bcf	3971,2,c	;volatile
  2086                           
  2087                           ;displayLCD.c: 106: PORTDbits.RD1 = 0;
  2088  0008D6  9283               	bcf	3971,1,c	;volatile
  2089                           
  2090                           ;displayLCD.c: 107: PORTDbits.RD0 = 0;
  2091  0008D8  9083               	bcf	3971,0,c	;volatile
  2092                           
  2093                           ;displayLCD.c: 111: PORTDbits.RD7=0;
  2094  0008DA  9E83               	bcf	3971,7,c	;volatile
  2095                           
  2096                           ;displayLCD.c: 112: PORTDbits.RD6=0;
  2097  0008DC  9C83               	bcf	3971,6,c	;volatile
  2098                           
  2099                           ;displayLCD.c: 113: PORTDbits.RD5=1;
  2100  0008DE  8A83               	bsf	3971,5,c	;volatile
  2101                           
  2102                           ;displayLCD.c: 114: PORTDbits.RD4=1;
  2103  0008E0  8883               	bsf	3971,4,c	;volatile
  2104                           
  2105                           ;displayLCD.c: 119: _delay((unsigned long)((15)*(48000000/4000.0)));
  2106  0008E2  0EEA               	movlw	234
  2107  0008E4  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2108  0008E6  0EC3               	movlw	195
  2109  0008E8                     u947:
  2110  0008E8  2EE8               	decfsz	wreg,f,c
  2111  0008EA  D7FE               	bra	u947
  2112  0008EC  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2113  0008EE  D7FC               	bra	u947
  2114  0008F0  F000               	nop	
  2115                           
  2116                           ;displayLCD.c: 123: PORTDbits.RD0 = 1;
  2117  0008F2  8083               	bsf	3971,0,c	;volatile
  2118                           
  2119                           ;displayLCD.c: 124: Delay();
  2120  0008F4  EC11  F007         	call	_Delay	;wreg free
  2121                           
  2122                           ;displayLCD.c: 125: PORTDbits.RD0 = 0;
  2123  0008F8  9083               	bcf	3971,0,c	;volatile
  2124                           
  2125                           ;displayLCD.c: 126: Delay();
  2126  0008FA  EC11  F007         	call	_Delay	;wreg free
  2127                           
  2128                           ;displayLCD.c: 131: _delay((unsigned long)((5)*(48000000/4000.0)));
  2129  0008FE  0E4E               	movlw	78
  2130  000900  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2131  000902  0EEB               	movlw	235
  2132  000904                     u957:
  2133  000904  2EE8               	decfsz	wreg,f,c
  2134  000906  D7FE               	bra	u957
  2135  000908  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2136  00090A  D7FC               	bra	u957
  2137  00090C  F000               	nop	
  2138                           
  2139                           ;displayLCD.c: 134: PORTDbits.RD0 = 1;
  2140  00090E  8083               	bsf	3971,0,c	;volatile
  2141                           
  2142                           ;displayLCD.c: 135: Delay();
  2143  000910  EC11  F007         	call	_Delay	;wreg free
  2144                           
  2145                           ;displayLCD.c: 136: PORTDbits.RD0 = 0;
  2146  000914  9083               	bcf	3971,0,c	;volatile
  2147                           
  2148                           ;displayLCD.c: 137: Delay();
  2149  000916  EC11  F007         	call	_Delay	;wreg free
  2150                           
  2151                           ;displayLCD.c: 142: _delay((unsigned long)((5)*(48000000/4000.0)));
  2152  00091A  0E4E               	movlw	78
  2153  00091C  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2154  00091E  0EEB               	movlw	235
  2155  000920                     u967:
  2156  000920  2EE8               	decfsz	wreg,f,c
  2157  000922  D7FE               	bra	u967
  2158  000924  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2159  000926  D7FC               	bra	u967
  2160  000928  F000               	nop	
  2161                           
  2162                           ;displayLCD.c: 145: PORTDbits.RD0 = 1;
  2163  00092A  8083               	bsf	3971,0,c	;volatile
  2164                           
  2165                           ;displayLCD.c: 146: Delay();
  2166  00092C  EC11  F007         	call	_Delay	;wreg free
  2167                           
  2168                           ;displayLCD.c: 147: PORTDbits.RD0 = 0;
  2169  000930  9083               	bcf	3971,0,c	;volatile
  2170                           
  2171                           ;displayLCD.c: 148: Delay();
  2172  000932  EC11  F007         	call	_Delay	;wreg free
  2173                           
  2174                           ;displayLCD.c: 151: PORTDbits.RD7=0;
  2175  000936  9E83               	bcf	3971,7,c	;volatile
  2176                           
  2177                           ;displayLCD.c: 152: PORTDbits.RD6=0;
  2178  000938  9C83               	bcf	3971,6,c	;volatile
  2179                           
  2180                           ;displayLCD.c: 153: PORTDbits.RD5=1;
  2181  00093A  8A83               	bsf	3971,5,c	;volatile
  2182                           
  2183                           ;displayLCD.c: 154: PORTDbits.RD4=0;
  2184  00093C  9883               	bcf	3971,4,c	;volatile
  2185                           
  2186                           ;displayLCD.c: 158: PORTDbits.RD0 = 1;
  2187  00093E  8083               	bsf	3971,0,c	;volatile
  2188                           
  2189                           ;displayLCD.c: 159: Delay();
  2190  000940  EC11  F007         	call	_Delay	;wreg free
  2191                           
  2192                           ;displayLCD.c: 160: PORTDbits.RD0 = 0;
  2193  000944  9083               	bcf	3971,0,c	;volatile
  2194                           
  2195                           ;displayLCD.c: 161: Delay();
  2196  000946  EC11  F007         	call	_Delay	;wreg free
  2197                           
  2198                           ;displayLCD.c: 165: EscreveComandoLCD(0b00101000);
  2199  00094A  0E28               	movlw	40
  2200  00094C  ECFD  F004         	call	_EscreveComandoLCD
  2201                           
  2202                           ;displayLCD.c: 166: EscreveComandoLCD(0b00000110);
  2203  000950  0E06               	movlw	6
  2204  000952  ECFD  F004         	call	_EscreveComandoLCD
  2205                           
  2206                           ;displayLCD.c: 167: EscreveComandoLCD(0b00001110);
  2207  000956  0E0E               	movlw	14
  2208  000958  ECFD  F004         	call	_EscreveComandoLCD
  2209                           
  2210                           ;displayLCD.c: 168: EscreveComandoLCD(0b00000001);
  2211  00095C  0E01               	movlw	1
  2212  00095E  ECFD  F004         	call	_EscreveComandoLCD
  2213  000962  0012               	return		;funcret
  2214  000964                     __end_of_ConfiguraLCD:
  2215                           	opt stack 0
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           prodh	equ	0xFF4
  2221                           prodl	equ	0xFF3
  2222                           intcon	equ	0xFF2
  2223                           intcon2	equ	0xFF1
  2224                           intcon3	equ	0xFF0
  2225                           indf0	equ	0xFEF
  2226                           postinc0	equ	0xFEE
  2227                           fsr0h	equ	0xFEA
  2228                           fsr0l	equ	0xFE9
  2229                           wreg	equ	0xFE8
  2230                           postdec1	equ	0xFE5
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _EscreveComandoLCD *****************
  2238 ;; Defined at:
  2239 ;;		line 179 in file "displayLCD.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  cmd             1    wreg     unsigned char 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  cmd             1   16[COMRAM] unsigned char 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2, status,0, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2253 ;;      Params:         0       0       0       0       0       0       0       0       0
  2254 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2256 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2257 ;;Total ram usage:        1 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    2
  2260 ;; This function calls:
  2261 ;;		_Delay
  2262 ;; This function is called by:
  2263 ;;		_ConfiguraLCD
  2264 ;;		_CriaCaractereLCD
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text14
  2269  0009FA                     __ptext14:
  2270                           	opt stack 0
  2271  0009FA                     _EscreveComandoLCD:
  2272                           	opt stack 27
  2273                           
  2274                           ;incstack = 0
  2275                           ;EscreveComandoLCD@cmd stored from wreg
  2276  0009FA  6E11               	movwf	EscreveComandoLCD@cmd,c
  2277                           
  2278                           ;displayLCD.c: 182: PORTDbits.RD2 = 0;
  2279  0009FC  9483               	bcf	3971,2,c	;volatile
  2280                           
  2281                           ;displayLCD.c: 183: PORTDbits.RD1 = 0;
  2282  0009FE  9283               	bcf	3971,1,c	;volatile
  2283                           
  2284                           ;displayLCD.c: 184: PORTDbits.RD0 = 0;
  2285  000A00  9083               	bcf	3971,0,c	;volatile
  2286                           
  2287                           ;displayLCD.c: 187: if(cmd&0b00010000){PORTDbits.RD4=1;}
  2288  000A02  A811               	btfss	EscreveComandoLCD@cmd,4,c
  2289  000A04  D002               	goto	l29
  2290  000A06  8883               	bsf	3971,4,c	;volatile
  2291  000A08  D001               	goto	l1046
  2292  000A0A                     l29:
  2293                           
  2294                           ;displayLCD.c: 188: else {PORTDbits.RD4=0;}
  2295  000A0A  9883               	bcf	3971,4,c	;volatile
  2296  000A0C                     l1046:
  2297                           
  2298                           ;displayLCD.c: 189: if(cmd&0b00100000){PORTDbits.RD5=1;}
  2299  000A0C  AA11               	btfss	EscreveComandoLCD@cmd,5,c
  2300  000A0E  D002               	goto	l31
  2301  000A10  8A83               	bsf	3971,5,c	;volatile
  2302  000A12  D001               	goto	l1050
  2303  000A14                     l31:
  2304                           
  2305                           ;displayLCD.c: 190: else {PORTDbits.RD5=0;}
  2306  000A14  9A83               	bcf	3971,5,c	;volatile
  2307  000A16                     l1050:
  2308                           
  2309                           ;displayLCD.c: 191: if(cmd&0b01000000){PORTDbits.RD6=1;}
  2310  000A16  AC11               	btfss	EscreveComandoLCD@cmd,6,c
  2311  000A18  D002               	goto	l33
  2312  000A1A  8C83               	bsf	3971,6,c	;volatile
  2313  000A1C  D001               	goto	l1054
  2314  000A1E                     l33:
  2315                           
  2316                           ;displayLCD.c: 192: else {PORTDbits.RD6=0;}
  2317  000A1E  9C83               	bcf	3971,6,c	;volatile
  2318  000A20                     l1054:
  2319                           
  2320                           ;displayLCD.c: 193: if(cmd&0b10000000){PORTDbits.RD7=1;}
  2321  000A20  AE11               	btfss	EscreveComandoLCD@cmd,7,c
  2322  000A22  D002               	goto	l35
  2323  000A24  8E83               	bsf	3971,7,c	;volatile
  2324  000A26  D001               	goto	l36
  2325  000A28                     l35:
  2326                           
  2327                           ;displayLCD.c: 194: else {PORTDbits.RD7=0;}
  2328  000A28  9E83               	bcf	3971,7,c	;volatile
  2329  000A2A                     l36:
  2330                           
  2331                           ;displayLCD.c: 197: PORTDbits.RD0 = 1;
  2332  000A2A  8083               	bsf	3971,0,c	;volatile
  2333                           
  2334                           ;displayLCD.c: 198: Delay();
  2335  000A2C  EC11  F007         	call	_Delay	;wreg free
  2336                           
  2337                           ;displayLCD.c: 199: PORTDbits.RD0 = 0;
  2338  000A30  9083               	bcf	3971,0,c	;volatile
  2339                           
  2340                           ;displayLCD.c: 200: Delay();
  2341  000A32  EC11  F007         	call	_Delay	;wreg free
  2342                           
  2343                           ;displayLCD.c: 203: if(cmd&0b00000001){PORTDbits.RD4=1;}
  2344  000A36  A011               	btfss	EscreveComandoLCD@cmd,0,c
  2345  000A38  D002               	goto	l37
  2346  000A3A  8883               	bsf	3971,4,c	;volatile
  2347  000A3C  D001               	goto	l38
  2348  000A3E                     l37:
  2349                           
  2350                           ;displayLCD.c: 204: else {PORTDbits.RD4=0;}
  2351  000A3E  9883               	bcf	3971,4,c	;volatile
  2352  000A40                     l38:
  2353                           
  2354                           ;displayLCD.c: 205: if(cmd&0b00000010){PORTDbits.RD5=1;}
  2355  000A40  A211               	btfss	EscreveComandoLCD@cmd,1,c
  2356  000A42  D002               	goto	l39
  2357  000A44  8A83               	bsf	3971,5,c	;volatile
  2358  000A46  D001               	goto	l40
  2359  000A48                     l39:
  2360                           
  2361                           ;displayLCD.c: 206: else {PORTDbits.RD5=0;}
  2362  000A48  9A83               	bcf	3971,5,c	;volatile
  2363  000A4A                     l40:
  2364                           
  2365                           ;displayLCD.c: 207: if(cmd&0b00000100){PORTDbits.RD6=1;}
  2366  000A4A  A411               	btfss	EscreveComandoLCD@cmd,2,c
  2367  000A4C  D002               	goto	l41
  2368  000A4E  8C83               	bsf	3971,6,c	;volatile
  2369  000A50  D001               	goto	l42
  2370  000A52                     l41:
  2371                           
  2372                           ;displayLCD.c: 208: else {PORTDbits.RD6=0;}
  2373  000A52  9C83               	bcf	3971,6,c	;volatile
  2374  000A54                     l42:
  2375                           
  2376                           ;displayLCD.c: 209: if(cmd&0b00001000){PORTDbits.RD7=1;}
  2377  000A54  A611               	btfss	EscreveComandoLCD@cmd,3,c
  2378  000A56  D002               	goto	l43
  2379  000A58  8E83               	bsf	3971,7,c	;volatile
  2380  000A5A  D001               	goto	l44
  2381  000A5C                     l43:
  2382                           
  2383                           ;displayLCD.c: 210: else {PORTDbits.RD7=0;}
  2384  000A5C  9E83               	bcf	3971,7,c	;volatile
  2385  000A5E                     l44:
  2386                           
  2387                           ;displayLCD.c: 213: PORTDbits.RD0 = 1;
  2388  000A5E  8083               	bsf	3971,0,c	;volatile
  2389                           
  2390                           ;displayLCD.c: 214: Delay();
  2391  000A60  EC11  F007         	call	_Delay	;wreg free
  2392                           
  2393                           ;displayLCD.c: 215: PORTDbits.RD0 = 0;
  2394  000A64  9083               	bcf	3971,0,c	;volatile
  2395                           
  2396                           ;displayLCD.c: 216: Delay();
  2397  000A66  EC11  F007         	call	_Delay	;wreg free
  2398                           
  2399                           ;displayLCD.c: 221: if (cmd==0x01 || cmd==0x02 || cmd==0x03)
  2400  000A6A  0411               	decf	EscreveComandoLCD@cmd,w,c
  2401  000A6C  B4D8               	btfsc	status,2,c
  2402  000A6E  D008               	goto	l1082
  2403  000A70  0E02               	movlw	2
  2404  000A72  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2405  000A74  B4D8               	btfsc	status,2,c
  2406  000A76  D004               	goto	l1082
  2407  000A78  0E03               	movlw	3
  2408  000A7A  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2409  000A7C  A4D8               	btfss	status,2,c
  2410  000A7E  0012               	return	
  2411  000A80                     l1082:
  2412                           
  2413                           ;displayLCD.c: 222: { Delay(); }
  2414  000A80  EC11  F007         	call	_Delay	;wreg free
  2415  000A84  0012               	return	
  2416  000A86                     __end_of_EscreveComandoLCD:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           prodh	equ	0xFF4
  2423                           prodl	equ	0xFF3
  2424                           intcon	equ	0xFF2
  2425                           intcon2	equ	0xFF1
  2426                           intcon3	equ	0xFF0
  2427                           indf0	equ	0xFEF
  2428                           postinc0	equ	0xFEE
  2429                           fsr0h	equ	0xFEA
  2430                           fsr0l	equ	0xFE9
  2431                           wreg	equ	0xFE8
  2432                           postdec1	equ	0xFE5
  2433                           fsr1l	equ	0xFE1
  2434                           indf2	equ	0xFDF
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _Delay *****************
  2440 ;; Defined at:
  2441 ;;		line 61 in file "displayLCD.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  Cnt2            1   15[COMRAM] unsigned char 
  2446 ;;  Cnt1            1   14[COMRAM] unsigned char 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2456 ;;      Params:         0       0       0       0       0       0       0       0       0
  2457 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2459 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2460 ;;Total ram usage:        2 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    1
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_ConfiguraLCD
  2467 ;;		_EscreveComandoLCD
  2468 ;;		_EnderecoCursor
  2469 ;;		_EscreveCaractereLCD
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text15
  2474  000E22                     __ptext15:
  2475                           	opt stack 0
  2476  000E22                     _Delay:
  2477                           	opt stack 26
  2478                           
  2479                           ;displayLCD.c: 63: unsigned char Cnt1, Cnt2;
  2480                           ;displayLCD.c: 65: for(Cnt1 = 0; Cnt1<100; Cnt1++)
  2481                           
  2482                           ;incstack = 0
  2483  000E22  0E00               	movlw	0
  2484  000E24  6E0F               	movwf	Delay@Cnt1,c
  2485  000E26                     l954:
  2486  000E26  0E63               	movlw	99
  2487  000E28  640F               	cpfsgt	Delay@Cnt1,c
  2488  000E2A  D001               	goto	l19
  2489  000E2C  0012               	return	
  2490  000E2E                     l19:
  2491                           
  2492                           ;displayLCD.c: 66: {
  2493                           ;displayLCD.c: 67: __nop();
  2494  000E2E  F000               	nop	
  2495                           
  2496                           ;displayLCD.c: 68: for(Cnt2 = 0; Cnt2<50; Cnt2++)
  2497  000E30  0E00               	movlw	0
  2498  000E32  6E10               	movwf	Delay@Cnt2,c
  2499  000E34                     l960:
  2500  000E34  0E31               	movlw	49
  2501  000E36  6410               	cpfsgt	Delay@Cnt2,c
  2502  000E38  D001               	goto	l21
  2503  000E3A  D003               	goto	l968
  2504  000E3C                     l21:
  2505                           
  2506                           ;displayLCD.c: 69: {
  2507                           ;displayLCD.c: 70: __nop();
  2508  000E3C  F000               	nop	
  2509  000E3E  2A10               	incf	Delay@Cnt2,f,c
  2510  000E40  D7F9               	goto	l960
  2511  000E42                     l968:
  2512  000E42  2A0F               	incf	Delay@Cnt1,f,c
  2513  000E44  D7F0               	goto	l954
  2514  000E46                     __end_of_Delay:
  2515                           	opt stack 0
  2516                           tblptru	equ	0xFF8
  2517                           tblptrh	equ	0xFF7
  2518                           tblptrl	equ	0xFF6
  2519                           tablat	equ	0xFF5
  2520                           prodh	equ	0xFF4
  2521                           prodl	equ	0xFF3
  2522                           intcon	equ	0xFF2
  2523                           intcon2	equ	0xFF1
  2524                           intcon3	equ	0xFF0
  2525                           indf0	equ	0xFEF
  2526                           postinc0	equ	0xFEE
  2527                           fsr0h	equ	0xFEA
  2528                           fsr0l	equ	0xFE9
  2529                           wreg	equ	0xFE8
  2530                           postdec1	equ	0xFE5
  2531                           fsr1l	equ	0xFE1
  2532                           indf2	equ	0xFDF
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _isr *****************
  2538 ;; Defined at:
  2539 ;;		line 19 in file "main.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;		None
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;		None
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      void 
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, status,0
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2553 ;;      Params:         0       0       0       0       0       0       0       0       0
  2554 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2555 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2556 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2557 ;;Total ram usage:       14 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		Interrupt level 2
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	intcode
  2567  000008                     __pintcode:
  2568                           	opt stack 0
  2569  000008                     _isr:
  2570                           	opt stack 26
  2571                           
  2572                           ;incstack = 0
  2573  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2574  00000A  ED03  F004         	call	int_func,f	;refresh shadow registers
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           intcon	equ	0xFF2
  2582                           intcon2	equ	0xFF1
  2583                           intcon3	equ	0xFF0
  2584                           indf0	equ	0xFEF
  2585                           postinc0	equ	0xFEE
  2586                           fsr0h	equ	0xFEA
  2587                           fsr0l	equ	0xFE9
  2588                           wreg	equ	0xFE8
  2589                           postdec1	equ	0xFE5
  2590                           fsr1l	equ	0xFE1
  2591                           indf2	equ	0xFDF
  2592                           fsr2h	equ	0xFDA
  2593                           fsr2l	equ	0xFD9
  2594                           status	equ	0xFD8
  2595                           
  2596                           	psect	intcode_body
  2597  000806                     __pintcode_body:
  2598                           	opt stack 26
  2599  000806                     int_func:
  2600                           	opt stack 26
  2601  000806  0006               	pop		; remove dummy address from shadow register refresh
  2602  000808  CFFA F001          	movff	pclath,??_isr
  2603  00080C  CFFB F002          	movff	pclatu,??_isr+1
  2604  000810  CFE9 F003          	movff	fsr0l,??_isr+2
  2605  000814  CFEA F004          	movff	fsr0h,??_isr+3
  2606  000818  CFE1 F005          	movff	fsr1l,??_isr+4
  2607  00081C  CFE2 F006          	movff	fsr1h,??_isr+5
  2608  000820  CFD9 F007          	movff	fsr2l,??_isr+6
  2609  000824  CFDA F008          	movff	fsr2h,??_isr+7
  2610  000828  CFF3 F009          	movff	prodl,??_isr+8
  2611  00082C  CFF4 F00A          	movff	prodh,??_isr+9
  2612  000830  CFF6 F00B          	movff	tblptrl,??_isr+10
  2613  000834  CFF7 F00C          	movff	tblptrh,??_isr+11
  2614  000838  CFF8 F00D          	movff	tblptru,??_isr+12
  2615  00083C  CFF5 F00E          	movff	tablat,??_isr+13
  2616                           
  2617                           ;main.c: 20: if ((PIR1bits.CCP1IF) && (PIE1bits.CCP1IE)){
  2618  000840  B49E               	btfsc	3998,2,c	;volatile
  2619  000842  A49D               	btfss	3997,2,c	;volatile
  2620  000844  D022               	goto	i2l303
  2621                           
  2622                           ;main.c: 21: bordaParcial++;
  2623  000846  4A32               	infsnz	_bordaParcial,f,c
  2624  000848  2A33               	incf	_bordaParcial+1,f,c
  2625                           
  2626                           ;main.c: 22: bordaTotal++;
  2627  00084A  4A34               	infsnz	_bordaTotal,f,c
  2628  00084C  2A35               	incf	_bordaTotal+1,f,c
  2629                           
  2630                           ;main.c: 23: if (bordaParcial == 500){
  2631  00084E  0EF4               	movlw	244
  2632  000850  1832               	xorwf	_bordaParcial,w,c
  2633  000852  E10B               	bnz	i2l1430
  2634  000854  0433               	decf	_bordaParcial+1,w,c
  2635  000856  A4D8               	btfss	status,2,c
  2636  000858  D008               	goto	i2l1430
  2637                           
  2638                           ;main.c: 24: atualizaOdoParcial = 1;
  2639  00085A  0E00               	movlw	0
  2640  00085C  6E2F               	movwf	_atualizaOdoParcial+1,c
  2641  00085E  0E01               	movlw	1
  2642  000860  6E2E               	movwf	_atualizaOdoParcial,c
  2643                           
  2644                           ;main.c: 25: bordaParcial = 0;
  2645  000862  0E00               	movlw	0
  2646  000864  6E33               	movwf	_bordaParcial+1,c
  2647  000866  0E00               	movlw	0
  2648  000868  6E32               	movwf	_bordaParcial,c
  2649  00086A                     i2l1430:
  2650                           
  2651                           ;main.c: 26: }
  2652                           ;main.c: 27: if (bordaTotal == 5000){
  2653  00086A  0E88               	movlw	136
  2654  00086C  1834               	xorwf	_bordaTotal,w,c
  2655  00086E  E10C               	bnz	i2l1434
  2656  000870  0E13               	movlw	19
  2657  000872  1835               	xorwf	_bordaTotal+1,w,c
  2658  000874  A4D8               	btfss	status,2,c
  2659  000876  D008               	goto	i2l1434
  2660                           
  2661                           ;main.c: 28: atualizaOdoTotal = 1;
  2662  000878  0E00               	movlw	0
  2663  00087A  6E31               	movwf	_atualizaOdoTotal+1,c
  2664  00087C  0E01               	movlw	1
  2665  00087E  6E30               	movwf	_atualizaOdoTotal,c
  2666                           
  2667                           ;main.c: 29: bordaTotal = 0;
  2668  000880  0E00               	movlw	0
  2669  000882  6E35               	movwf	_bordaTotal+1,c
  2670  000884  0E00               	movlw	0
  2671  000886  6E34               	movwf	_bordaTotal,c
  2672  000888                     i2l1434:
  2673                           
  2674                           ;main.c: 30: }
  2675                           ;main.c: 31: PIR1bits.CCP1IF = 0;
  2676  000888  949E               	bcf	3998,2,c	;volatile
  2677  00088A                     i2l303:
  2678  00088A  C00E  FFF5         	movff	??_isr+13,tablat
  2679  00088E  C00D  FFF8         	movff	??_isr+12,tblptru
  2680  000892  C00C  FFF7         	movff	??_isr+11,tblptrh
  2681  000896  C00B  FFF6         	movff	??_isr+10,tblptrl
  2682  00089A  C00A  FFF4         	movff	??_isr+9,prodh
  2683  00089E  C009  FFF3         	movff	??_isr+8,prodl
  2684  0008A2  C008  FFDA         	movff	??_isr+7,fsr2h
  2685  0008A6  C007  FFD9         	movff	??_isr+6,fsr2l
  2686  0008AA  C006  FFE2         	movff	??_isr+5,fsr1h
  2687  0008AE  C005  FFE1         	movff	??_isr+4,fsr1l
  2688  0008B2  C004  FFEA         	movff	??_isr+3,fsr0h
  2689  0008B6  C003  FFE9         	movff	??_isr+2,fsr0l
  2690  0008BA  C002  FFFB         	movff	??_isr+1,pclatu
  2691  0008BE  C001  FFFA         	movff	??_isr,pclath
  2692  0008C2  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2693  0008C4  0011               	retfie		f
  2694  0008C6                     __end_of_isr:
  2695                           	opt stack 0
  2696                           pclatu	equ	0xFFB
  2697                           pclath	equ	0xFFA
  2698                           tblptru	equ	0xFF8
  2699                           tblptrh	equ	0xFF7
  2700                           tblptrl	equ	0xFF6
  2701                           tablat	equ	0xFF5
  2702                           prodh	equ	0xFF4
  2703                           prodl	equ	0xFF3
  2704                           intcon	equ	0xFF2
  2705                           intcon2	equ	0xFF1
  2706                           intcon3	equ	0xFF0
  2707                           indf0	equ	0xFEF
  2708                           postinc0	equ	0xFEE
  2709                           fsr0h	equ	0xFEA
  2710                           fsr0l	equ	0xFE9
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           fsr2h	equ	0xFDA
  2717                           fsr2l	equ	0xFD9
  2718                           status	equ	0xFD8
  2719                           pclatu	equ	0xFFB
  2720                           pclath	equ	0xFFA
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           prodh	equ	0xFF4
  2726                           prodl	equ	0xFF3
  2727                           intcon	equ	0xFF2
  2728                           intcon2	equ	0xFF1
  2729                           intcon3	equ	0xFF0
  2730                           indf0	equ	0xFEF
  2731                           postinc0	equ	0xFEE
  2732                           fsr0h	equ	0xFEA
  2733                           fsr0l	equ	0xFE9
  2734                           wreg	equ	0xFE8
  2735                           postdec1	equ	0xFE5
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           fsr2h	equ	0xFDA
  2740                           fsr2l	equ	0xFD9
  2741                           status	equ	0xFD8
  2742                           
  2743                           	psect	rparam
  2744  0000                     pclatu	equ	0xFFB
  2745                           pclath	equ	0xFFA
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           prodh	equ	0xFF4
  2751                           prodl	equ	0xFF3
  2752                           intcon	equ	0xFF2
  2753                           intcon2	equ	0xFF1
  2754                           intcon3	equ	0xFF0
  2755                           indf0	equ	0xFEF
  2756                           postinc0	equ	0xFEE
  2757                           fsr0h	equ	0xFEA
  2758                           fsr0l	equ	0xFE9
  2759                           wreg	equ	0xFE8
  2760                           postdec1	equ	0xFE5
  2761                           fsr1h	equ	0xFE2
  2762                           fsr1l	equ	0xFE1
  2763                           indf2	equ	0xFDF
  2764                           fsr2h	equ	0xFDA
  2765                           fsr2l	equ	0xFD9
  2766                           status	equ	0xFD8
  2767                           
  2768                           	psect	temp
  2769  000037                     btemp:
  2770                           	opt stack 0
  2771  000037                     	ds	1
  2772  0000                     int$flags	set	btemp
  2773                           pclatu	equ	0xFFB
  2774                           pclath	equ	0xFFA
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           intcon	equ	0xFF2
  2782                           intcon2	equ	0xFF1
  2783                           intcon3	equ	0xFF0
  2784                           indf0	equ	0xFEF
  2785                           postinc0	equ	0xFEE
  2786                           fsr0h	equ	0xFEA
  2787                           fsr0l	equ	0xFE9
  2788                           wreg	equ	0xFE8
  2789                           postdec1	equ	0xFE5
  2790                           fsr1h	equ	0xFE2
  2791                           fsr1l	equ	0xFE1
  2792                           indf2	equ	0xFDF
  2793                           fsr2h	equ	0xFDA
  2794                           fsr2l	equ	0xFD9
  2795                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        21
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     24      54
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    EscreveFraseRamLCD@buffer	PTR unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[3]), STR_1(CODE[3]), odoParcial(COMRAM[7]), odoTotal(COMRAM[7]), 
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_odometroTotal
    _odometroTotal->_PosicaoCursorLCD
    _odometroParcial->_PosicaoCursorLCD
    _display->_PosicaoCursorLCD
    _PosicaoCursorLCD->_EnderecoCursor
    _EnderecoCursor->_Delay
    _EscreveFraseRamLCD->_EscreveCaractereLCD
    _EscreveCaractereLCD->_Delay
    _ConfiguraLCD->_EscreveComandoLCD
    _EscreveComandoLCD->_Delay

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4920
                                             22 COMRAM     2     2      0
                       _ConfiguraLCD
                    _EEPROM_ReadByte
                        _Init_EEPROM
                            _display
                             _initHw
                      _initInterrupt
                    _odometroParcial
                      _odometroTotal
 ---------------------------------------------------------------------------------
 (1) _odometroTotal                                        2     2      0    1650
                                             20 COMRAM     2     2      0
                   _EEPROM_WriteByte
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteByte                                     2     1      1     108
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _odometroParcial                                      0     0      0    1450
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initHw                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              0     0      0    1450
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _PosicaoCursorLCD                                     3     2      1     777
                                             17 COMRAM     3     2      1
                     _EnderecoCursor
 ---------------------------------------------------------------------------------
 (3) _EnderecoCursor                                       1     1      0     165
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _EscreveFraseRamLCD                                   2     0      2     673
                                             17 COMRAM     2     0      2
                _EscreveCaractereLCD
 ---------------------------------------------------------------------------------
 (3) _EscreveCaractereLCD                                  1     1      0     180
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _Init_EEPROM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_ReadByte                                      1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0     285
                                             17 COMRAM     1     1      0
                              _Delay
                  _EscreveComandoLCD
 ---------------------------------------------------------------------------------
 (2) _EscreveComandoLCD                                    1     1      0     225
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     2      0      60
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfiguraLCD
     _Delay
     _EscreveComandoLCD
       _Delay
   _EEPROM_ReadByte
   _Init_EEPROM
   _display
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _initHw
   _initInterrupt
   _odometroParcial
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _odometroTotal
     _EEPROM_WriteByte
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     18      36       1       57.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      36      20        0.0%
DATA                 0      0      36       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Nov 13 23:37:48 2019

                                l21 0E3C                                  l31 0A14  
                                l40 0A4A                                  l41 0A52  
                                l33 0A1E                                  l42 0A54  
                                l19 0E2E                                  l43 0A5C  
                                l35 0A28                                  l51 0C02  
                                l44 0A5E                                  l36 0A2A  
                                l60 0C38                                  l37 0A3E  
                                l29 0A0A                                  l61 0C40  
                                l53 0C0C                                  l38 0A40  
                                l62 0C42                                  l70 0B8E  
                                l39 0A48                                  l63 0C4A  
                                l55 0C16                                  l80 0B1E  
                                l64 0C4C                                  l56 0C18  
                                l57 0C2C                                  l90 0B5C  
                                l82 0B28                                  l58 0C2E  
                                l91 0B5E                                  l59 0C36  
                                l92 0B66                                  l84 0B32  
                                l93 0B68                                  l94 0B70  
                                l86 0B3C                                  l95 0B72  
                                l87 0B3E                                  l88 0B52  
                                l89 0B54                                 l159 0E18  
                               l960 0E34                                 l954 0E26  
                               l982 0C0E                                 l968 0E42  
                               l978 0C04                                 u670 0CD6  
                               u680 0CFE                                 u677 0CCC  
                               u687 0CF4                                 u947 08E8  
                               u957 0904                                 u967 0920  
                               _isr 0008                                 prod 000FF3  
                               wreg 000FE8                                l1010 0B20  
                              l1014 0B2A                                l1050 0A16  
                              l1018 0B34                                l1054 0A20  
                              l1046 0A0C                                l1082 0A80  
                              l1500 0CDE                                l1620 0AD2  
                              l1480 0BB6                                l1472 0B9A  
                              l1616 0ACA                                l1490 0BE6  
                              l1562 09AA                                l1484 0BC4  
                              l1476 0BA8                                l1492 0BEA  
                              l1628 0AEE                                l1572 09D0  
                              l1496 0CB6                                l1488 0BCA  
                              l1576 09D8                                l1568 09C8  
                              l1690 0D2A                                l1686 0D22  
                              l1698 0D46                                ?_isr 0001  
                              STR_1 0801                                STR_2 0801  
                              _LATA 000F89                                _LATB 000F8A  
                              _LATD 000F8C                                _IPR1 000F9F  
                              _IPR2 000FA2                                _PIE1 000F9D  
                              _PIE2 000FA0                                _PIR1 000F9E  
                              _PIR2 000FA1                                _RCON 000FD0  
                     ??_Init_EEPROM 000F                                _main 0D06  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              indf0 000FEF                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 0037                                prodh 000FF4  
                              prodl 000FF3                                start 000E  
          __size_of_EEPROM_ReadByte 000E                        ___param_bank 000000  
        __end_of_EscreveFraseRamLCD 0D06                               ??_isr 0001  
                             ?_main 0001                               _EEADR 000FA9  
                             _T0CON 000FD5                               _T1CON 000FCD  
                             i2l303 088A                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _Delay 0E22                     __end_of_display 0CB4  
                             main@i 0018                EscreveComandoLCD@cmd 0011  
                             main@j 0017                               pclath 000FFA  
                             tablat 000FF5                               status 000FD8  
                  ?_odometroParcial 0001                 __end_of_Init_EEPROM 0E70  
                   __initialization 0D94              __size_of_initInterrupt 002E  
                      __end_of_main 0D50                              ??_main 0017  
              __end_of_ConfiguraLCD 0964                       __activetblptr 000002  
                 _EscreveComandoLCD 09FA                              ?_Delay 0001  
                ?_EscreveComandoLCD 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _EEDATA 000FA8                              _EECON1 000FA6  
                            _EECON2 000FA7                              i2l1430 086A  
                            i2l1434 0888                              _INTCON 000FF2  
               ??_EscreveComandoLCD 0011                  _atualizaOdoParcial 002E  
                 ?_PosicaoCursorLCD 0012        __size_of_EscreveCaractereLCD 0072  
                ??_PosicaoCursorLCD 0013                              _initHw 0D50  
                 ??_EEPROM_ReadByte 000F                              clear_0 0DBA  
         __end_of_EscreveComandoLCD 0A86            __end_of_EEPROM_WriteByte 0E22  
                         ??_display 0015                        __pdataCOMRAM 0019  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
           __size_of_EnderecoCursor 006A                       _initInterrupt 0DCE  
                       _Init_EEPROM 0E6A                          __accesstop 0060  
           __end_of__initialization 0DC0                       ___rparam_used 000001  
                     __end_of_Delay 0E46                      __pcstackCOMRAM 0001  
                           ??_Delay 000F                      ?_initInterrupt 0001  
         EEPROM_WriteByte@WriteData 000F               __size_of_ConfiguraLCD 009E  
                           _CCP1CON 000FBD                             ?_initHw 0001  
        __size_of_EscreveComandoLCD 008C                          _bordaTotal 0034  
                           _INTCON2 000FF1                             _INTCON3 000FF0  
                _EscreveFraseRamLCD 0CB4              __size_of_odometroTotal 0096  
               ?_EscreveFraseRamLCD 0012                        _ConfiguraLCD 08C6  
                           __Hparam 0000                             __Lparam 0000  
                        _odoParcial 0020                ??_EscreveFraseRamLCD 0014  
                      __psmallconst 0800                     __size_of_initHw 0044  
                           __pcinit 0D94                        _bordaParcial 0032  
                           __ramtop 0800                             __ptext0 0D06  
                           __ptext1 0964                             __ptext2 0DFC  
                           __ptext3 0A86                             __ptext4 0DCE  
                           __ptext5 0D50                             __ptext6 0C5A  
                           __ptext7 0B80                             __ptext8 0BF0  
                           __ptext9 0CB4                             _display 0C5A  
                    odometroTotal@i 0016                      odometroTotal@j 0015  
                   ??_initInterrupt 000F                        __size_of_isr 08BE  
                         _T3CONbits 000FB1                      _EnderecoCursor 0BF0  
                         Delay@Cnt1 000F                           Delay@Cnt2 0010  
                    __pintcode_body 0806                 _EscreveCaractereLCD 0B0E  
              end_of_initialization 0DC0                       __Lmediumconst 0000  
                           int_func 0806                     _EEPROM_ReadByte 0E5C  
                     _odometroTotal 0964                             postdec1 000FE5  
                           postinc0 000FEE                ?_EscreveCaractereLCD 0001  
          __size_of_odometroParcial 0088         PosicaoCursorLCD@EnderecoLCD 0014  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                 ?_EEPROM_WriteByte 000F              __end_of_EnderecoCursor 0C5A  
                ??_EEPROM_WriteByte 0010                           _TRISCbits 000F94  
                         _TRISDbits 000F95           __size_of_PosicaoCursorLCD 0070  
                      ?_Init_EEPROM 0001                      ?_odometroTotal 0001  
             ??_EscreveCaractereLCD 0011                       __pidataCOMRAM 0E46  
                  _atualizaOdoTotal 0030                      __end_of_initHw 0D94  
                   ?_EnderecoCursor 0001                 start_initialization 0D94  
                       __end_of_isr 08C6            EscreveFraseRamLCD@buffer 0012  
           __end_of_EEPROM_ReadByte 0E6A                            ??_initHw 000F  
                 ??_odometroParcial 0015                         __pbssCOMRAM 002E  
                  odometroParcial@i 0036                     ??_odometroTotal 0015  
                         __pintcode 0008        EEPROM_ReadByte@MemoryAddress 000F  
            EscreveInteiroLCD@F3948 0019                            ?_display 0001  
                       __smallconst 0800                      __size_of_Delay 0024  
                  _PosicaoCursorLCD 0B80                    ?_EEPROM_ReadByte 0001  
            EnderecoCursor@endereco 0011                __size_of_Init_EEPROM 0006  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
           EscreveCaractereLCD@data 0011         __size_of_EscreveFraseRamLCD 0052  
             __end_of_initInterrupt 0DFC                           copy_data0 0DA8  
         __size_of_EEPROM_WriteByte 0026                          _EECON1bits 000FA6  
                          __Hrparam 0000                            __Lrparam 0000  
                  ??_EnderecoCursor 0011                    __size_of_display 005A  
                          __ptext10 0B0E                            __ptext11 0E6A  
                          __ptext12 0E5C                            __ptext13 08C6  
                          __ptext14 09FA                            __ptext15 0E22  
                          _odoTotal 0027                       __size_of_main 004A  
       __end_of_EscreveCaractereLCD 0B80                     _odometroParcial 0A86  
                          int$flags 0037                          _INTCONbits 000FF2  
                          intlevel2 0000  EEPROM_WriteByte@WriteMemoryAddress 0010  
                     ?_ConfiguraLCD 0001            __end_of_PosicaoCursorLCD 0BF0  
            PosicaoCursorLCD@coluna 0012               PosicaoCursorLCD@linha 0013  
                    ??_ConfiguraLCD 0012                    _EEPROM_WriteByte 0DFC  
           __end_of_odometroParcial 0B0E               __end_of_odometroTotal 09FA  
