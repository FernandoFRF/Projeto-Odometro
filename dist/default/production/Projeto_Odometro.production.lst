

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Nov 25 22:15:43 2019

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.40
    41                           ; Generated 01/12/2016 GMT
    42                           ; 
    43                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4550 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  001294                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for EscreveInteiroLCD@F3948
    80  001294  30                 	db	48
    81  001295  30                 	db	48
    82  001296  30                 	db	48
    83  001297  30                 	db	48
    84  001298  30                 	db	48
    85  001299  30                 	db	48
    86  00129A  00                 	db	0
    87                           
    88                           ;initializer for _odoParcial
    89  00129B  30                 	db	48
    90  00129C  30                 	db	48
    91  00129D  30                 	db	48
    92  00129E  30                 	db	48
    93  00129F  2C                 	db	44
    94  0012A0  30                 	db	48
    95  0012A1  00                 	db	0
    96                           
    97                           ;initializer for _odoTotal
    98  0012A2  30                 	db	48
    99  0012A3  30                 	db	48
   100  0012A4  30                 	db	48
   101  0012A5  30                 	db	48
   102  0012A6  30                 	db	48
   103  0012A7  30                 	db	48
   104  0012A8  00                 	db	0
   105  0000                     _ADCON0	set	4034
   106  0000                     _ADCON0bits	set	4034
   107  0000                     _ADCON1	set	4033
   108  0000                     _ADCON2	set	4032
   109  0000                     _ADRESH	set	4036
   110  0000                     _ADRESL	set	4035
   111  0000                     _CCP1CON	set	4029
   112  0000                     _EEADR	set	4009
   113  0000                     _EECON1	set	4006
   114  0000                     _EECON1bits	set	4006
   115  0000                     _EECON2	set	4007
   116  0000                     _EEDATA	set	4008
   117  0000                     _INTCON	set	4082
   118  0000                     _INTCON2	set	4081
   119  0000                     _INTCON3	set	4080
   120  0000                     _INTCONbits	set	4082
   121  0000                     _IPR1	set	3999
   122  0000                     _IPR2	set	4002
   123  0000                     _LATA	set	3977
   124  0000                     _LATB	set	3978
   125  0000                     _LATD	set	3980
   126  0000                     _PIE1	set	3997
   127  0000                     _PIE1bits	set	3997
   128  0000                     _PIE2	set	4000
   129  0000                     _PIR1	set	3998
   130  0000                     _PIR1bits	set	3998
   131  0000                     _PIR2	set	4001
   132  0000                     _PORTB	set	3969
   133  0000                     _PORTCbits	set	3970
   134  0000                     _PORTDbits	set	3971
   135  0000                     _PORTEbits	set	3972
   136  0000                     _RCON	set	4048
   137  0000                     _T0CON	set	4053
   138  0000                     _T1CON	set	4045
   139  0000                     _T3CONbits	set	4017
   140  0000                     _TRISA	set	3986
   141  0000                     _TRISB	set	3987
   142  0000                     _TRISC	set	3988
   143  0000                     _TRISCbits	set	3988
   144  0000                     _TRISD	set	3989
   145  0000                     _TRISDbits	set	3989
   146  0000                     _TRISE	set	3990
   147                           
   148                           	psect	smallconst
   149  000800                     __psmallconst:
   150                           	opt stack 0
   151  000800  00                 	db	0
   152  000801                     STR_1:
   153  000801  4B                 	db	75	;'K'
   154  000802  6D                 	db	109	;'m'
   155  000803  00                 	db	0
   156  000804  00                 	db	0	; dummy byte at the end
   157  0000                     
   158                           ; #config settings
   159                           
   160                           	psect	cinit
   161  001116                     __pcinit:
   162                           	opt stack 0
   163  001116                     start_initialization:
   164                           	opt stack 0
   165  001116                     __initialization:
   166                           	opt stack 0
   167                           
   168                           ; Initialize objects allocated to COMRAM (21 bytes)
   169                           ; load TBLPTR registers with __pidataCOMRAM
   170  001116  0E94               	movlw	low __pidataCOMRAM
   171  001118  6EF6               	movwf	tblptrl,c
   172  00111A  0E12               	movlw	high __pidataCOMRAM
   173  00111C  6EF7               	movwf	tblptrh,c
   174  00111E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   175  001120  6EF8               	movwf	tblptru,c
   176  001122  EE00  F03C         	lfsr	0,__pdataCOMRAM
   177  001126  EE10 F015          	lfsr	1,21
   178  00112A                     copy_data0:
   179  00112A  0009               	tblrd		*+
   180  00112C  CFF5 FFEE          	movff	tablat,postinc0
   181  001130  50E5               	movf	postdec1,w,c
   182  001132  50E1               	movf	fsr1l,w,c
   183  001134  E1FA               	bnz	copy_data0
   184                           
   185                           ; Clear objects allocated to BANK0 (20 bytes)
   186  001136  EE00  F060         	lfsr	0,__pbssBANK0
   187  00113A  0E14               	movlw	20
   188  00113C                     clear_0:
   189  00113C  6AEE               	clrf	postinc0,c
   190  00113E  06E8               	decf	wreg,f,c
   191  001140  E1FD               	bnz	clear_0
   192                           
   193                           ; Clear objects allocated to COMRAM (28 bytes)
   194  001142  EE00  F020         	lfsr	0,__pbssCOMRAM
   195  001146  0E1C               	movlw	28
   196  001148                     clear_1:
   197  001148  6AEE               	clrf	postinc0,c
   198  00114A  06E8               	decf	wreg,f,c
   199  00114C  E1FD               	bnz	clear_1
   200  00114E                     end_of_initialization:
   201                           	opt stack 0
   202  00114E                     __end_of__initialization:
   203                           	opt stack 0
   204  00114E  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   205  001150  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   206  001152  0E00               	movlw	low (__Lmediumconst shr (0+16))
   207  001154  6EF8               	movwf	tblptru,c
   208  001156  0100               	movlb	0
   209  001158  EF39  F009         	goto	_main	;jump to C main() function
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           postdec1	equ	0xFE5
   217                           fsr1l	equ	0xFE1
   218                           
   219                           	psect	bssCOMRAM
   220  000020                     __pbssCOMRAM:
   221                           	opt stack 0
   222  000020                     _porcentagemTensao:
   223                           	opt stack 0
   224  000020                     	ds	4
   225  000024                     _atualizaOdoParcial:
   226                           	opt stack 0
   227  000024                     	ds	2
   228  000026                     _atualizaOdoTotal:
   229                           	opt stack 0
   230  000026                     	ds	2
   231  000028                     _bordaParcial:
   232                           	opt stack 0
   233  000028                     	ds	2
   234  00002A                     _bordaTotal:
   235                           	opt stack 0
   236  00002A                     	ds	2
   237  00002C                     _countLed:
   238                           	opt stack 0
   239  00002C                     	ds	2
   240  00002E                     _tempoCombustivel:
   241                           	opt stack 0
   242  00002E                     	ds	2
   243  000030                     _valorADCMedia:
   244                           	opt stack 0
   245  000030                     	ds	2
   246  000032                     _valorTensao:
   247                           	opt stack 0
   248  000032                     	ds	2
   249  000034                     _numeroC:
   250                           	opt stack 0
   251  000034                     	ds	1
   252  000035                     _primeiroFiltro:
   253                           	opt stack 0
   254  000035                     	ds	1
   255  000036                     _reserva:
   256                           	opt stack 0
   257  000036                     	ds	1
   258  000037                     odometroParcial@i:
   259                           	opt stack 0
   260  000037                     	ds	1
   261  000038                     _valorADC:
   262                           	opt stack 0
   263  000038                     	ds	4
   264                           tblptru	equ	0xFF8
   265                           tblptrh	equ	0xFF7
   266                           tblptrl	equ	0xFF6
   267                           tablat	equ	0xFF5
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           postdec1	equ	0xFE5
   271                           fsr1l	equ	0xFE1
   272                           
   273                           	psect	dataCOMRAM
   274  00003C                     __pdataCOMRAM:
   275                           	opt stack 0
   276  00003C                     EscreveInteiroLCD@F3948:
   277                           	opt stack 0
   278  00003C                     	ds	7
   279  000043                     _odoParcial:
   280                           	opt stack 0
   281  000043                     	ds	7
   282  00004A                     _odoTotal:
   283                           	opt stack 0
   284  00004A                     	ds	7
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1l	equ	0xFE1
   293                           
   294                           	psect	bssBANK0
   295  000060                     __pbssBANK0:
   296                           	opt stack 0
   297  000060                     _combArray:
   298                           	opt stack 0
   299  000060                     	ds	20
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           postdec1	equ	0xFE5
   307                           fsr1l	equ	0xFE1
   308                           
   309                           	psect	cstackBANK0
   310  000074                     __pcstackBANK0:
   311                           	opt stack 0
   312  000074                     ?___lldiv:
   313                           	opt stack 0
   314  000074                     ___lldiv@dividend:
   315                           	opt stack 0
   316                           
   317                           ; 4 bytes @ 0x0
   318  000074                     	ds	4
   319  000078                     ___lldiv@divisor:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x4
   323  000078                     	ds	4
   324  00007C                     ??_Combustivel:
   325                           
   326                           ; 1 bytes @ 0x8
   327  00007C                     	ds	2
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           postdec1	equ	0xFE5
   335                           fsr1l	equ	0xFE1
   336                           
   337                           	psect	cstackCOMRAM
   338  000001                     __pcstackCOMRAM:
   339                           	opt stack 0
   340  000001                     ??_isr:
   341  000001                     
   342                           ; 1 bytes @ 0x0
   343  000001                     	ds	14
   344  00000F                     ??_ADCRead:
   345  00000F                     ?___lwdiv:
   346                           	opt stack 0
   347  00000F                     ?___lmul:
   348                           	opt stack 0
   349  00000F                     Delay@Cnt1:
   350                           	opt stack 0
   351  00000F                     ___lwdiv@dividend:
   352                           	opt stack 0
   353  00000F                     ___lmul@multiplier:
   354                           	opt stack 0
   355                           
   356                           ; 4 bytes @ 0xE
   357  00000F                     	ds	1
   358  000010                     Delay@Cnt2:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0xF
   362  000010                     	ds	1
   363  000011                     EscreveComandoLCD@cmd:
   364                           	opt stack 0
   365  000011                     EnderecoCursor@endereco:
   366                           	opt stack 0
   367  000011                     EscreveCaractereLCD@data:
   368                           	opt stack 0
   369  000011                     ___lwdiv@divisor:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x10
   373  000011                     	ds	1
   374  000012                     ??_ConfiguraLCD:
   375  000012                     PosicaoCursorLCD@coluna:
   376                           	opt stack 0
   377  000012                     EscreveFraseRamLCD@buffer:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x11
   381  000012                     	ds	1
   382  000013                     PosicaoCursorLCD@linha:
   383                           	opt stack 0
   384  000013                     ___lwdiv@quotient:
   385                           	opt stack 0
   386  000013                     ___lmul@multiplicand:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x12
   390  000013                     	ds	1
   391  000014                     PosicaoCursorLCD@EnderecoLCD:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x13
   395  000014                     	ds	1
   396  000015                     odometroParcial@position:
   397                           	opt stack 0
   398  000015                     ___lwdiv@counter:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x14
   402  000015                     	ds	1
   403  000016                     odometroParcial@trava:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x15
   407  000016                     	ds	1
   408  000017                     ___lmul@product:
   409                           	opt stack 0
   410                           
   411                           ; 4 bytes @ 0x16
   412  000017                     	ds	4
   413  00001B                     ___lldiv@quotient:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x1A
   417  00001B                     	ds	4
   418  00001F                     ___lldiv@counter:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1E
   422  00001F                     	ds	1
   423  000020                     tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           postdec1	equ	0xFE5
   430                           fsr1l	equ	0xFE1
   431                           
   432                           ; 1 bytes @ 0x1F
   433 ;;
   434 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   435 ;;
   436 ;; *************** function _main *****************
   437 ;; Defined at:
   438 ;;		line 38 in file "main.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;		None
   441 ;; Auto vars:     Size  Location     Type
   442 ;;		None
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   447 ;; Tracked objects:
   448 ;;		On entry : 0/0
   449 ;;		On exit  : 0/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   452 ;;      Params:         0       0       0       0       0       0       0       0       0
   453 ;;      Locals:         0       0       0       0       0       0       0       0       0
   454 ;;      Temps:          0       0       0       0       0       0       0       0       0
   455 ;;      Totals:         0       0       0       0       0       0       0       0       0
   456 ;;Total ram usage:        0 bytes
   457 ;; Hardware stack levels required when called:    5
   458 ;; This function calls:
   459 ;;		_Combustivel
   460 ;;		_ConfiguraLCD
   461 ;;		_Init_EEPROM
   462 ;;		_display
   463 ;;		_initHw
   464 ;;		_initInterrupt
   465 ;;		_odometroParcial
   466 ;;		_odometroTotal
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text0
   473  001272                     __ptext0:
   474                           	opt stack 0
   475  001272                     _main:
   476                           	opt stack 26
   477                           
   478                           ;main.c: 39: ConfiguraLCD();
   479                           
   480                           ;incstack = 0
   481  001272  EC2D  F006         	call	_ConfiguraLCD	;wreg free
   482                           
   483                           ;main.c: 40: initInterrupt();
   484  001276  EC10  F009         	call	_initInterrupt	;wreg free
   485                           
   486                           ;main.c: 41: initHw();
   487  00127A  ECAE  F008         	call	_initHw	;wreg free
   488                           
   489                           ;main.c: 42: Init_EEPROM();
   490  00127E  EC55  F009         	call	_Init_EEPROM	;wreg free
   491                           
   492                           ;main.c: 43: display();
   493  001282  ECE1  F007         	call	_display	;wreg free
   494  001286                     l2265:
   495                           
   496                           ;main.c: 46: {
   497                           ;main.c: 47: odometroTotal();
   498  001286  ECAE  F007         	call	_odometroTotal	;wreg free
   499                           
   500                           ;main.c: 48: odometroParcial();
   501  00128A  EC13  F005         	call	_odometroParcial	;wreg free
   502                           
   503                           ;main.c: 50: Combustivel();
   504  00128E  EC03  F004         	call	_Combustivel	;wreg free
   505  001292  D7F9               	goto	l2265
   506  001294                     __end_of_main:
   507                           	opt stack 0
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           postdec1	equ	0xFE5
   515                           fsr1l	equ	0xFE1
   516                           
   517 ;; *************** function _odometroTotal *****************
   518 ;; Defined at:
   519 ;;		line 17 in file "Odometro_Total_Parcial.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;		None
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      void 
   526 ;; Registers used:
   527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   533 ;;      Params:         0       0       0       0       0       0       0       0       0
   534 ;;      Locals:         0       0       0       0       0       0       0       0       0
   535 ;;      Temps:          0       0       0       0       0       0       0       0       0
   536 ;;      Totals:         0       0       0       0       0       0       0       0       0
   537 ;;Total ram usage:        0 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    4
   540 ;; This function calls:
   541 ;;		_EscreveFraseRamLCD
   542 ;;		_PosicaoCursorLCD
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text1
   549  000F5C                     __ptext1:
   550                           	opt stack 0
   551  000F5C                     _odometroTotal:
   552                           	opt stack 26
   553                           
   554                           ;Odometro_Total_Parcial.c: 19: if (atualizaOdoTotal)
   555                           
   556                           ;incstack = 0
   557  000F5C  5026               	movf	_atualizaOdoTotal,w,c
   558  000F5E  1027               	iorwf	_atualizaOdoTotal+1,w,c
   559  000F60  B4D8               	btfsc	status,2,c
   560  000F62  0012               	return	
   561                           
   562                           ;Odometro_Total_Parcial.c: 20: {
   563                           ;Odometro_Total_Parcial.c: 21: odoTotal[5]++;
   564  000F64  2A4F               	incf	_odoTotal+5,f,c
   565                           
   566                           ;Odometro_Total_Parcial.c: 22: if (odoTotal[5] > 0x39)
   567  000F66  0E39               	movlw	57
   568  000F68  644F               	cpfsgt	_odoTotal+5,c
   569  000F6A  D01B               	goto	l1903
   570                           
   571                           ;Odometro_Total_Parcial.c: 23: {
   572                           ;Odometro_Total_Parcial.c: 24: odoTotal[5] = 0x30;
   573  000F6C  0E30               	movlw	48
   574  000F6E  6E4F               	movwf	_odoTotal+5,c
   575                           
   576                           ;Odometro_Total_Parcial.c: 25: odoTotal[4]++;
   577  000F70  2A4E               	incf	_odoTotal+4,f,c
   578                           
   579                           ;Odometro_Total_Parcial.c: 26: if (odoTotal[4] > 0x39)
   580  000F72  0E39               	movlw	57
   581  000F74  644E               	cpfsgt	_odoTotal+4,c
   582  000F76  D015               	goto	l1903
   583                           
   584                           ;Odometro_Total_Parcial.c: 27: {
   585                           ;Odometro_Total_Parcial.c: 28: odoTotal[4] = 0x30;
   586  000F78  0E30               	movlw	48
   587  000F7A  6E4E               	movwf	_odoTotal+4,c
   588                           
   589                           ;Odometro_Total_Parcial.c: 29: odoTotal[3]++;
   590  000F7C  2A4D               	incf	_odoTotal+3,f,c
   591                           
   592                           ;Odometro_Total_Parcial.c: 30: if (odoTotal[3] > 0x39)
   593  000F7E  0E39               	movlw	57
   594  000F80  644D               	cpfsgt	_odoTotal+3,c
   595  000F82  D00F               	goto	l1903
   596                           
   597                           ;Odometro_Total_Parcial.c: 31: {
   598                           ;Odometro_Total_Parcial.c: 32: odoTotal[3] = 0x30;
   599  000F84  0E30               	movlw	48
   600  000F86  6E4D               	movwf	_odoTotal+3,c
   601                           
   602                           ;Odometro_Total_Parcial.c: 33: odoTotal[2]++;
   603  000F88  2A4C               	incf	_odoTotal+2,f,c
   604                           
   605                           ;Odometro_Total_Parcial.c: 34: if (odoTotal[2] > 0x39)
   606  000F8A  0E39               	movlw	57
   607  000F8C  644C               	cpfsgt	_odoTotal+2,c
   608  000F8E  D009               	goto	l1903
   609                           
   610                           ;Odometro_Total_Parcial.c: 35: {
   611                           ;Odometro_Total_Parcial.c: 36: odoTotal[2] = 0x30;
   612  000F90  0E30               	movlw	48
   613  000F92  6E4C               	movwf	_odoTotal+2,c
   614                           
   615                           ;Odometro_Total_Parcial.c: 37: odoTotal[1]++;
   616  000F94  2A4B               	incf	_odoTotal+1,f,c
   617                           
   618                           ;Odometro_Total_Parcial.c: 38: if (odoTotal[1] > 0x39)
   619  000F96  0E39               	movlw	57
   620  000F98  644B               	cpfsgt	_odoTotal+1,c
   621  000F9A  D003               	goto	l1903
   622                           
   623                           ;Odometro_Total_Parcial.c: 39: {
   624                           ;Odometro_Total_Parcial.c: 40: odoTotal[1] = 0x30;
   625  000F9C  0E30               	movlw	48
   626  000F9E  6E4B               	movwf	_odoTotal+1,c
   627                           
   628                           ;Odometro_Total_Parcial.c: 41: odoTotal[0]++;
   629  000FA0  2A4A               	incf	_odoTotal,f,c
   630  000FA2                     l1903:
   631                           
   632                           ;Odometro_Total_Parcial.c: 45: }
   633                           ;Odometro_Total_Parcial.c: 46: }
   634                           ;Odometro_Total_Parcial.c: 47: }
   635                           ;Odometro_Total_Parcial.c: 48: }
   636                           ;Odometro_Total_Parcial.c: 49: }
   637                           ;Odometro_Total_Parcial.c: 50: }
   638                           ;Odometro_Total_Parcial.c: 51: PosicaoCursorLCD(1, 7);
   639  000FA2  0E07               	movlw	7
   640  000FA4  6E12               	movwf	PosicaoCursorLCD@coluna,c
   641  000FA6  0E01               	movlw	1
   642  000FA8  EC41  F007         	call	_PosicaoCursorLCD
   643                           
   644                           ;Odometro_Total_Parcial.c: 52: EscreveFraseRamLCD(odoTotal);
   645  000FAC  0E4A               	movlw	low _odoTotal
   646  000FAE  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   647  000FB0  0E00               	movlw	high _odoTotal
   648  000FB2  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   649  000FB4  EC39  F008         	call	_EscreveFraseRamLCD	;wreg free
   650                           
   651                           ;Odometro_Total_Parcial.c: 53: atualizaOdoTotal = 0;
   652  000FB8  0E00               	movlw	0
   653  000FBA  6E27               	movwf	_atualizaOdoTotal+1,c
   654  000FBC  0E00               	movlw	0
   655  000FBE  6E26               	movwf	_atualizaOdoTotal,c
   656  000FC0  0012               	return	
   657  000FC2                     __end_of_odometroTotal:
   658                           	opt stack 0
   659                           tblptru	equ	0xFF8
   660                           tblptrh	equ	0xFF7
   661                           tblptrl	equ	0xFF6
   662                           tablat	equ	0xFF5
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           postdec1	equ	0xFE5
   666                           fsr1l	equ	0xFE1
   667                           status	equ	0xFD8
   668                           
   669 ;; *************** function _odometroParcial *****************
   670 ;; Defined at:
   671 ;;		line 57 in file "Odometro_Total_Parcial.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  trava           1   21[COMRAM] unsigned char 
   676 ;;  position        1   20[COMRAM] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   686 ;;      Params:         0       0       0       0       0       0       0       0       0
   687 ;;      Locals:         2       0       0       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0       0       0
   689 ;;      Totals:         2       0       0       0       0       0       0       0       0
   690 ;;Total ram usage:        2 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    4
   693 ;; This function calls:
   694 ;;		_EscreveFraseRamLCD
   695 ;;		_PosicaoCursorLCD
   696 ;; This function is called by:
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text2
   702  000A26                     __ptext2:
   703                           	opt stack 0
   704  000A26                     _odometroParcial:
   705                           	opt stack 26
   706                           
   707                           ;Odometro_Total_Parcial.c: 58: unsigned char trava = 0;
   708                           
   709                           ;incstack = 0
   710  000A26  0E00               	movlw	0
   711  000A28  6E16               	movwf	odometroParcial@trava,c
   712                           
   713                           ;Odometro_Total_Parcial.c: 59: static unsigned char i;
   714                           ;Odometro_Total_Parcial.c: 60: char position = 0;
   715  000A2A  0E00               	movlw	0
   716  000A2C  6E15               	movwf	odometroParcial@position,c
   717                           
   718                           ;Odometro_Total_Parcial.c: 62: if (atualizaOdoParcial){
   719  000A2E  5024               	movf	_atualizaOdoParcial,w,c
   720  000A30  1025               	iorwf	_atualizaOdoParcial+1,w,c
   721  000A32  B4D8               	btfsc	status,2,c
   722  000A34  0012               	return	
   723                           
   724                           ;Odometro_Total_Parcial.c: 63: odoParcial[5]++;
   725  000A36  2A48               	incf	_odoParcial+5,f,c
   726                           
   727                           ;Odometro_Total_Parcial.c: 65: if (odoParcial[5] > 0x39){
   728  000A38  0E39               	movlw	57
   729  000A3A  6448               	cpfsgt	_odoParcial+5,c
   730  000A3C  0012               	return	
   731                           
   732                           ;Odometro_Total_Parcial.c: 66: odoParcial[5] = 0x30;
   733  000A3E  0E30               	movlw	48
   734  000A40  6E48               	movwf	_odoParcial+5,c
   735                           
   736                           ;Odometro_Total_Parcial.c: 67: odoParcial[3]++;
   737  000A42  2A46               	incf	_odoParcial+3,f,c
   738                           
   739                           ;Odometro_Total_Parcial.c: 69: if (odoParcial[3] > 0x39){
   740  000A44  0E39               	movlw	57
   741  000A46  6446               	cpfsgt	_odoParcial+3,c
   742  000A48  D026               	goto	l1955
   743                           
   744                           ;Odometro_Total_Parcial.c: 70: odoParcial[3] = 0x30;
   745  000A4A  0E30               	movlw	48
   746  000A4C  6E46               	movwf	_odoParcial+3,c
   747                           
   748                           ;Odometro_Total_Parcial.c: 71: odoParcial[2]++;
   749  000A4E  2A45               	incf	_odoParcial+2,f,c
   750                           
   751                           ;Odometro_Total_Parcial.c: 73: if (odoParcial[2] > 0x39){
   752  000A50  0E39               	movlw	57
   753  000A52  6445               	cpfsgt	_odoParcial+2,c
   754  000A54  D020               	goto	l1955
   755                           
   756                           ;Odometro_Total_Parcial.c: 74: odoParcial[2] = 0x30;
   757  000A56  0E30               	movlw	48
   758  000A58  6E45               	movwf	_odoParcial+2,c
   759                           
   760                           ;Odometro_Total_Parcial.c: 75: odoParcial[1]++;
   761  000A5A  2A44               	incf	_odoParcial+1,f,c
   762                           
   763                           ;Odometro_Total_Parcial.c: 77: if (odoParcial[1] > 0x39){
   764  000A5C  0E39               	movlw	57
   765  000A5E  6444               	cpfsgt	_odoParcial+1,c
   766  000A60  D01A               	goto	l1955
   767                           
   768                           ;Odometro_Total_Parcial.c: 78: odoParcial[1] = 0x30;
   769  000A62  0E30               	movlw	48
   770  000A64  6E44               	movwf	_odoParcial+1,c
   771                           
   772                           ;Odometro_Total_Parcial.c: 79: odoParcial[0]++;
   773  000A66  2A43               	incf	_odoParcial,f,c
   774                           
   775                           ;Odometro_Total_Parcial.c: 81: if (odoParcial[0] > 0x39){
   776  000A68  0E39               	movlw	57
   777  000A6A  6443               	cpfsgt	_odoParcial,c
   778  000A6C  D014               	goto	l1955
   779                           
   780                           ;Odometro_Total_Parcial.c: 82: for (i = 0; i <= 3; i++){
   781  000A6E  0E00               	movlw	0
   782  000A70  6E37               	movwf	odometroParcial@i,c
   783  000A72                     l1943:
   784  000A72  0E03               	movlw	3
   785  000A74  6437               	cpfsgt	odometroParcial@i,c
   786  000A76  D001               	goto	l1947
   787  000A78  D00E               	goto	l1955
   788  000A7A                     l1947:
   789                           
   790                           ;Odometro_Total_Parcial.c: 83: odoParcial[i] = '0';
   791  000A7A  5037               	movf	odometroParcial@i,w,c
   792  000A7C  0D01               	mullw	1
   793  000A7E  0E43               	movlw	low _odoParcial
   794  000A80  24F3               	addwf	prodl,w,c
   795  000A82  6ED9               	movwf	fsr2l,c
   796  000A84  0E00               	movlw	high _odoParcial
   797  000A86  20F4               	addwfc	prodh,w,c
   798  000A88  6EDA               	movwf	fsr2h,c
   799  000A8A  0E30               	movlw	48
   800  000A8C  6EDF               	movwf	indf2,c
   801                           
   802                           ;Odometro_Total_Parcial.c: 84: odoParcial[5] = '0';
   803  000A8E  0E30               	movlw	48
   804  000A90  6E48               	movwf	_odoParcial+5,c
   805  000A92  2A37               	incf	odometroParcial@i,f,c
   806  000A94  D7EE               	goto	l1943
   807  000A96                     l1955:
   808                           
   809                           ;Odometro_Total_Parcial.c: 85: }
   810                           ;Odometro_Total_Parcial.c: 86: }
   811                           ;Odometro_Total_Parcial.c: 87: }
   812                           ;Odometro_Total_Parcial.c: 88: }
   813                           ;Odometro_Total_Parcial.c: 89: }
   814                           ;Odometro_Total_Parcial.c: 90: PosicaoCursorLCD(2, 7);
   815  000A96  0E07               	movlw	7
   816  000A98  6E12               	movwf	PosicaoCursorLCD@coluna,c
   817  000A9A  0E02               	movlw	2
   818  000A9C  EC41  F007         	call	_PosicaoCursorLCD
   819                           
   820                           ;Odometro_Total_Parcial.c: 91: EscreveFraseRamLCD(odoParcial);
   821  000AA0  0E43               	movlw	low _odoParcial
   822  000AA2  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   823  000AA4  0E00               	movlw	high _odoParcial
   824  000AA6  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   825  000AA8  EC39  F008         	call	_EscreveFraseRamLCD	;wreg free
   826                           
   827                           ;Odometro_Total_Parcial.c: 92: atualizaOdoParcial = 0;
   828  000AAC  0E00               	movlw	0
   829  000AAE  6E25               	movwf	_atualizaOdoParcial+1,c
   830  000AB0  0E00               	movlw	0
   831  000AB2  6E24               	movwf	_atualizaOdoParcial,c
   832                           
   833                           ;Odometro_Total_Parcial.c: 94: if((PORTEbits.RE0 == 0)&&(trava == 0)) {
   834  000AB4  B084               	btfsc	3972,0,c	;volatile
   835  000AB6  D011               	goto	l203
   836  000AB8  5016               	movf	odometroParcial@trava,w,c
   837  000ABA  A4D8               	btfss	status,2,c
   838  000ABC  D00E               	goto	l203
   839                           
   840                           ;Odometro_Total_Parcial.c: 95: for(position = 5; position >= 0; position--){
   841  000ABE  0E05               	movlw	5
   842  000AC0  6E15               	movwf	odometroParcial@position,c
   843  000AC2                     l1969:
   844                           
   845                           ;Odometro_Total_Parcial.c: 96: odoParcial[position] = 0x30;
   846  000AC2  5015               	movf	odometroParcial@position,w,c
   847  000AC4  0D01               	mullw	1
   848  000AC6  0E43               	movlw	low _odoParcial
   849  000AC8  24F3               	addwf	prodl,w,c
   850  000ACA  6ED9               	movwf	fsr2l,c
   851  000ACC  0E00               	movlw	high _odoParcial
   852  000ACE  20F4               	addwfc	prodh,w,c
   853  000AD0  6EDA               	movwf	fsr2h,c
   854  000AD2  0E30               	movlw	48
   855  000AD4  6EDF               	movwf	indf2,c
   856  000AD6  0615               	decf	odometroParcial@position,f,c
   857  000AD8  D7F4               	goto	l1969
   858  000ADA                     l203:
   859  000ADA  A084               	btfss	3972,0,c	;volatile
   860  000ADC  0012               	return	
   861  000ADE  0416               	decf	odometroParcial@trava,w,c
   862  000AE0  A4D8               	btfss	status,2,c
   863  000AE2  0012               	return	
   864                           
   865                           ;Odometro_Total_Parcial.c: 102: trava = 0;
   866  000AE4  0E00               	movlw	0
   867  000AE6  6E16               	movwf	odometroParcial@trava,c
   868  000AE8  0012               	return	
   869  000AEA                     __end_of_odometroParcial:
   870                           	opt stack 0
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           prodh	equ	0xFF4
   876                           prodl	equ	0xFF3
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           postdec1	equ	0xFE5
   880                           fsr1l	equ	0xFE1
   881                           indf2	equ	0xFDF
   882                           fsr2h	equ	0xFDA
   883                           fsr2l	equ	0xFD9
   884                           status	equ	0xFD8
   885                           
   886 ;; *************** function _initInterrupt *****************
   887 ;; Defined at:
   888 ;;		line 55 in file "main.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   902 ;;      Params:         0       0       0       0       0       0       0       0       0
   903 ;;      Locals:         0       0       0       0       0       0       0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0       0       0
   905 ;;      Totals:         0       0       0       0       0       0       0       0       0
   906 ;;Total ram usage:        0 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text3
   917  001220                     __ptext3:
   918                           	opt stack 0
   919  001220                     _initInterrupt:
   920                           	opt stack 29
   921                           
   922                           ;main.c: 56: INTCON = 0b11100000;
   923                           
   924                           ;incstack = 0
   925  001220  0EE0               	movlw	224
   926  001222  6EF2               	movwf	intcon,c	;volatile
   927                           
   928                           ;main.c: 57: INTCON2 = 0b10000000;
   929  001224  0E80               	movlw	128
   930  001226  6EF1               	movwf	intcon2,c	;volatile
   931                           
   932                           ;main.c: 58: INTCON3 = 0b00000000;
   933  001228  0E00               	movlw	0
   934  00122A  6EF0               	movwf	intcon3,c	;volatile
   935                           
   936                           ;main.c: 59: CCP1CON = 0b00000101;
   937  00122C  0E05               	movlw	5
   938  00122E  6EBD               	movwf	4029,c	;volatile
   939                           
   940                           ;main.c: 60: PIR1 = 0b00000000;
   941  001230  0E00               	movlw	0
   942  001232  6E9E               	movwf	3998,c	;volatile
   943                           
   944                           ;main.c: 61: PIR2 = 0b00000000;
   945  001234  0E00               	movlw	0
   946  001236  6EA1               	movwf	4001,c	;volatile
   947                           
   948                           ;main.c: 62: PIE1 = 0b00000100;
   949  001238  0E04               	movlw	4
   950  00123A  6E9D               	movwf	3997,c	;volatile
   951                           
   952                           ;main.c: 63: PIE2 = 0b00000000;
   953  00123C  0E00               	movlw	0
   954  00123E  6EA0               	movwf	4000,c	;volatile
   955                           
   956                           ;main.c: 64: IPR1 = 0b00000000;
   957  001240  0E00               	movlw	0
   958  001242  6E9F               	movwf	3999,c	;volatile
   959                           
   960                           ;main.c: 65: IPR2 = 0b00000000;
   961  001244  0E00               	movlw	0
   962  001246  6EA2               	movwf	4002,c	;volatile
   963                           
   964                           ;main.c: 66: RCON = 0b00000000;
   965  001248  0E00               	movlw	0
   966  00124A  6ED0               	movwf	4048,c	;volatile
   967  00124C  0012               	return		;funcret
   968  00124E                     __end_of_initInterrupt:
   969                           	opt stack 0
   970                           tblptru	equ	0xFF8
   971                           tblptrh	equ	0xFF7
   972                           tblptrl	equ	0xFF6
   973                           tablat	equ	0xFF5
   974                           prodh	equ	0xFF4
   975                           prodl	equ	0xFF3
   976                           intcon	equ	0xFF2
   977                           intcon2	equ	0xFF1
   978                           intcon3	equ	0xFF0
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postdec1	equ	0xFE5
   982                           fsr1l	equ	0xFE1
   983                           indf2	equ	0xFDF
   984                           fsr2h	equ	0xFDA
   985                           fsr2l	equ	0xFD9
   986                           status	equ	0xFD8
   987                           
   988 ;; *************** function _initHw *****************
   989 ;; Defined at:
   990 ;;		line 68 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1004 ;;      Params:         0       0       0       0       0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1007 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1008 ;;Total ram usage:        0 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text4
  1019  00115C                     __ptext4:
  1020                           	opt stack 0
  1021  00115C                     _initHw:
  1022                           	opt stack 29
  1023                           
  1024                           ;main.c: 70: TRISA = 0x00;
  1025                           
  1026                           ;incstack = 0
  1027  00115C  0E00               	movlw	0
  1028  00115E  6E92               	movwf	3986,c	;volatile
  1029                           
  1030                           ;main.c: 71: TRISB = 0x00;
  1031  001160  0E00               	movlw	0
  1032  001162  6E93               	movwf	3987,c	;volatile
  1033                           
  1034                           ;main.c: 72: TRISC = 0x00;
  1035  001164  0E00               	movlw	0
  1036  001166  6E94               	movwf	3988,c	;volatile
  1037                           
  1038                           ;main.c: 73: TRISCbits.RC2 = 1;
  1039  001168  8494               	bsf	3988,2,c	;volatile
  1040                           
  1041                           ;main.c: 74: TRISD = 0x00;
  1042  00116A  0E00               	movlw	0
  1043  00116C  6E95               	movwf	3989,c	;volatile
  1044                           
  1045                           ;main.c: 75: TRISE = 0x0F;
  1046  00116E  0E0F               	movlw	15
  1047  001170  6E96               	movwf	3990,c	;volatile
  1048                           
  1049                           ;main.c: 77: ADCON0 = 0b00000001;
  1050  001172  0E01               	movlw	1
  1051  001174  6EC2               	movwf	4034,c	;volatile
  1052                           
  1053                           ;main.c: 78: ADCON1 = 0b00001101;
  1054  001176  0E0D               	movlw	13
  1055  001178  6EC1               	movwf	4033,c	;volatile
  1056                           
  1057                           ;main.c: 79: ADCON2 = 0b10000100;
  1058  00117A  0E84               	movlw	132
  1059  00117C  6EC0               	movwf	4032,c	;volatile
  1060                           
  1061                           ;main.c: 81: PORTEbits.RE0 = 0;
  1062  00117E  9084               	bcf	3972,0,c	;volatile
  1063                           
  1064                           ;main.c: 84: LATA = 0x00;
  1065  001180  0E00               	movlw	0
  1066  001182  6E89               	movwf	3977,c	;volatile
  1067                           
  1068                           ;main.c: 85: LATB = 0x00;
  1069  001184  0E00               	movlw	0
  1070  001186  6E8A               	movwf	3978,c	;volatile
  1071                           
  1072                           ;main.c: 86: LATD = 0x00;
  1073  001188  0E00               	movlw	0
  1074  00118A  6E8C               	movwf	3980,c	;volatile
  1075                           
  1076                           ;main.c: 88: T0CON = 0b01000101;
  1077  00118C  0E45               	movlw	69
  1078  00118E  6ED5               	movwf	4053,c	;volatile
  1079                           
  1080                           ;main.c: 89: CCP1CON = 0b00000101;
  1081  001190  0E05               	movlw	5
  1082  001192  6EBD               	movwf	4029,c	;volatile
  1083                           
  1084                           ;main.c: 90: T1CON = 0b01000100;
  1085  001194  0E44               	movlw	68
  1086  001196  6ECD               	movwf	4045,c	;volatile
  1087                           
  1088                           ;main.c: 91: T3CONbits.T3CCP1 = 0;
  1089  001198  96B1               	bcf	4017,3,c	;volatile
  1090                           
  1091                           ;main.c: 92: INTCONbits.GIE = 1;
  1092  00119A  8EF2               	bsf	intcon,7,c	;volatile
  1093                           
  1094                           ;main.c: 93: INTCONbits.PEIE = 1;
  1095  00119C  8CF2               	bsf	intcon,6,c	;volatile
  1096  00119E  0012               	return		;funcret
  1097  0011A0                     __end_of_initHw:
  1098                           	opt stack 0
  1099                           tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           prodh	equ	0xFF4
  1104                           prodl	equ	0xFF3
  1105                           intcon	equ	0xFF2
  1106                           intcon2	equ	0xFF1
  1107                           intcon3	equ	0xFF0
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           postdec1	equ	0xFE5
  1111                           fsr1l	equ	0xFE1
  1112                           indf2	equ	0xFDF
  1113                           fsr2h	equ	0xFDA
  1114                           fsr2l	equ	0xFD9
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function _display *****************
  1118 ;; Defined at:
  1119 ;;		line 96 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1133 ;;      Params:         0       0       0       0       0       0       0       0       0
  1134 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1136 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    4
  1140 ;; This function calls:
  1141 ;;		_EscreveFraseRamLCD
  1142 ;;		_PosicaoCursorLCD
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text5
  1149  000FC2                     __ptext5:
  1150                           	opt stack 0
  1151  000FC2                     _display:
  1152                           	opt stack 26
  1153                           
  1154                           ;main.c: 97: PosicaoCursorLCD(1, 7);
  1155                           
  1156                           ;incstack = 0
  1157  000FC2  0E07               	movlw	7
  1158  000FC4  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1159  000FC6  0E01               	movlw	1
  1160  000FC8  EC41  F007         	call	_PosicaoCursorLCD
  1161                           
  1162                           ;main.c: 98: EscreveFraseRamLCD(odoTotal);
  1163  000FCC  0E4A               	movlw	low _odoTotal
  1164  000FCE  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1165  000FD0  0E00               	movlw	high _odoTotal
  1166  000FD2  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1167  000FD4  EC39  F008         	call	_EscreveFraseRamLCD	;wreg free
  1168                           
  1169                           ;main.c: 99: PosicaoCursorLCD(2, 7);
  1170  000FD8  0E07               	movlw	7
  1171  000FDA  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1172  000FDC  0E02               	movlw	2
  1173  000FDE  EC41  F007         	call	_PosicaoCursorLCD
  1174                           
  1175                           ;main.c: 100: EscreveFraseRamLCD(odoParcial);
  1176  000FE2  0E43               	movlw	low _odoParcial
  1177  000FE4  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1178  000FE6  0E00               	movlw	high _odoParcial
  1179  000FE8  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1180  000FEA  EC39  F008         	call	_EscreveFraseRamLCD	;wreg free
  1181                           
  1182                           ;main.c: 101: PosicaoCursorLCD(1, 14);
  1183  000FEE  0E0E               	movlw	14
  1184  000FF0  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1185  000FF2  0E01               	movlw	1
  1186  000FF4  EC41  F007         	call	_PosicaoCursorLCD
  1187                           
  1188                           ;main.c: 102: EscreveFraseRamLCD("Km");
  1189  000FF8  0E01               	movlw	low STR_1
  1190  000FFA  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1191  000FFC  0E08               	movlw	high STR_1
  1192  000FFE  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1193  001000  EC39  F008         	call	_EscreveFraseRamLCD	;wreg free
  1194                           
  1195                           ;main.c: 103: PosicaoCursorLCD(2, 14);
  1196  001004  0E0E               	movlw	14
  1197  001006  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1198  001008  0E02               	movlw	2
  1199  00100A  EC41  F007         	call	_PosicaoCursorLCD
  1200                           
  1201                           ;main.c: 104: EscreveFraseRamLCD("Km");
  1202  00100E  0E01               	movlw	low STR_1
  1203  001010  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1204  001012  0E08               	movlw	high STR_1
  1205  001014  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1206  001016  EC39  F008         	call	_EscreveFraseRamLCD	;wreg free
  1207  00101A  0012               	return		;funcret
  1208  00101C                     __end_of_display:
  1209                           	opt stack 0
  1210                           tblptru	equ	0xFF8
  1211                           tblptrh	equ	0xFF7
  1212                           tblptrl	equ	0xFF6
  1213                           tablat	equ	0xFF5
  1214                           prodh	equ	0xFF4
  1215                           prodl	equ	0xFF3
  1216                           intcon	equ	0xFF2
  1217                           intcon2	equ	0xFF1
  1218                           intcon3	equ	0xFF0
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           postdec1	equ	0xFE5
  1222                           fsr1l	equ	0xFE1
  1223                           indf2	equ	0xFDF
  1224                           fsr2h	equ	0xFDA
  1225                           fsr2l	equ	0xFD9
  1226                           status	equ	0xFD8
  1227                           
  1228 ;; *************** function _PosicaoCursorLCD *****************
  1229 ;; Defined at:
  1230 ;;		line 287 in file "displayLCD.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  linha           1    wreg     unsigned char 
  1233 ;;  coluna          1   17[COMRAM] unsigned char 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  linha           1   18[COMRAM] unsigned char 
  1236 ;;  EnderecoLCD     1   19[COMRAM] unsigned char 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1246 ;;      Params:         1       0       0       0       0       0       0       0       0
  1247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1249 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1250 ;;Total ram usage:        3 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    3
  1253 ;; This function calls:
  1254 ;;		_EnderecoCursor
  1255 ;; This function is called by:
  1256 ;;		_odometroTotal
  1257 ;;		_odometroParcial
  1258 ;;		_display
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text6
  1263  000E82                     __ptext6:
  1264                           	opt stack 0
  1265  000E82                     _PosicaoCursorLCD:
  1266                           	opt stack 26
  1267                           
  1268                           ;incstack = 0
  1269                           ;PosicaoCursorLCD@linha stored from wreg
  1270  000E82  6E13               	movwf	PosicaoCursorLCD@linha,c
  1271                           
  1272                           ;displayLCD.c: 295: unsigned char EnderecoLCD = 0x00;
  1273  000E84  0E00               	movlw	0
  1274  000E86  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1275                           
  1276                           ;displayLCD.c: 299: if(coluna <= 16)
  1277  000E88  0E11               	movlw	17
  1278  000E8A  6012               	cpfslt	PosicaoCursorLCD@coluna,c
  1279  000E8C  D02F               	goto	l1811
  1280  000E8E  D01E               	goto	l1807
  1281  000E90                     l70:
  1282                           
  1283                           ;displayLCD.c: 306: EnderecoLCD = 0x00 + coluna;
  1284  000E90  C012  F014         	movff	PosicaoCursorLCD@coluna,PosicaoCursorLCD@EnderecoLCD
  1285                           
  1286                           ;displayLCD.c: 307: EnderecoCursor(EnderecoLCD);
  1287  000E94  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1288  000E96  EC79  F007         	call	_EnderecoCursor
  1289                           
  1290                           ;displayLCD.c: 308: break;
  1291  000E9A  D026               	goto	l1809
  1292  000E9C                     l1791:
  1293                           
  1294                           ;displayLCD.c: 311: EnderecoLCD = 0x40 + coluna;
  1295  000E9C  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1296  000E9E  0F40               	addlw	64
  1297  000EA0  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1298                           
  1299                           ;displayLCD.c: 312: EnderecoCursor(EnderecoLCD);
  1300  000EA2  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1301  000EA4  EC79  F007         	call	_EnderecoCursor
  1302                           
  1303                           ;displayLCD.c: 313: break;
  1304  000EA8  D01F               	goto	l1809
  1305  000EAA                     l1795:
  1306                           
  1307                           ;displayLCD.c: 316: EnderecoLCD = 0x14 + coluna;
  1308  000EAA  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1309  000EAC  0F14               	addlw	20
  1310  000EAE  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1311                           
  1312                           ;displayLCD.c: 317: EnderecoCursor(EnderecoLCD);
  1313  000EB0  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1314  000EB2  EC79  F007         	call	_EnderecoCursor
  1315                           
  1316                           ;displayLCD.c: 318: break;
  1317  000EB6  D018               	goto	l1809
  1318  000EB8                     l1799:
  1319                           
  1320                           ;displayLCD.c: 321: EnderecoLCD = 0x54 + coluna;
  1321  000EB8  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1322  000EBA  0F54               	addlw	84
  1323  000EBC  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1324                           
  1325                           ;displayLCD.c: 322: EnderecoCursor(EnderecoLCD);
  1326  000EBE  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1327  000EC0  EC79  F007         	call	_EnderecoCursor
  1328                           
  1329                           ;displayLCD.c: 323: break;
  1330  000EC4  D011               	goto	l1809
  1331  000EC6                     l1803:
  1332                           
  1333                           ;displayLCD.c: 326: EnderecoLCD = 0x00;
  1334  000EC6  0E00               	movlw	0
  1335  000EC8  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1336                           
  1337                           ;displayLCD.c: 328: }
  1338                           
  1339                           ;displayLCD.c: 327: break;
  1340  000ECA  D00E               	goto	l1809
  1341  000ECC                     l1807:
  1342  000ECC  5013               	movf	PosicaoCursorLCD@linha,w,c
  1343                           
  1344                           ; Switch size 1, requested type "space"
  1345                           ; Number of cases is 4, Range of values is 1 to 4
  1346                           ; switch strategies available:
  1347                           ; Name         Instructions Cycles
  1348                           ; simple_byte           13     7 (average)
  1349                           ;	Chosen strategy is simple_byte
  1350  000ECE  0A01               	xorlw	1	; case 1
  1351  000ED0  B4D8               	btfsc	status,2,c
  1352  000ED2  D7DE               	goto	l70
  1353  000ED4  0A03               	xorlw	3	; case 2
  1354  000ED6  B4D8               	btfsc	status,2,c
  1355  000ED8  D7E1               	goto	l1791
  1356  000EDA  0A01               	xorlw	1	; case 3
  1357  000EDC  B4D8               	btfsc	status,2,c
  1358  000EDE  D7E5               	goto	l1795
  1359  000EE0  0A07               	xorlw	7	; case 4
  1360  000EE2  B4D8               	btfsc	status,2,c
  1361  000EE4  D7E9               	goto	l1799
  1362  000EE6  D7EF               	goto	l1803
  1363  000EE8                     l1809:
  1364                           
  1365                           ;displayLCD.c: 330: coluna++;
  1366  000EE8  2A12               	incf	PosicaoCursorLCD@coluna,f,c
  1367                           
  1368                           ;displayLCD.c: 331: }
  1369  000EEA  0012               	return	
  1370  000EEC                     l1811:
  1371                           
  1372                           ;displayLCD.c: 332: else
  1373                           ;displayLCD.c: 333: {
  1374                           ;displayLCD.c: 334: EnderecoLCD = 0x00;
  1375  000EEC  0E00               	movlw	0
  1376  000EEE  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1377  000EF0  0012               	return	
  1378  000EF2                     __end_of_PosicaoCursorLCD:
  1379                           	opt stack 0
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           prodh	equ	0xFF4
  1385                           prodl	equ	0xFF3
  1386                           intcon	equ	0xFF2
  1387                           intcon2	equ	0xFF1
  1388                           intcon3	equ	0xFF0
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1l	equ	0xFE1
  1393                           indf2	equ	0xFDF
  1394                           fsr2h	equ	0xFDA
  1395                           fsr2l	equ	0xFD9
  1396                           status	equ	0xFD8
  1397                           
  1398 ;; *************** function _EnderecoCursor *****************
  1399 ;; Defined at:
  1400 ;;		line 236 in file "displayLCD.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  endereco        1    wreg     unsigned char 
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  endereco        1   16[COMRAM] unsigned char 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, status,2, status,0, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1414 ;;      Params:         0       0       0       0       0       0       0       0       0
  1415 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1417 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1418 ;;Total ram usage:        1 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:    2
  1421 ;; This function calls:
  1422 ;;		_Delay
  1423 ;; This function is called by:
  1424 ;;		_PosicaoCursorLCD
  1425 ;;		_CriaCaractereLCD
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text7
  1430  000EF2                     __ptext7:
  1431                           	opt stack 0
  1432  000EF2                     _EnderecoCursor:
  1433                           	opt stack 26
  1434                           
  1435                           ;incstack = 0
  1436                           ;EnderecoCursor@endereco stored from wreg
  1437  000EF2  6E11               	movwf	EnderecoCursor@endereco,c
  1438                           
  1439                           ;displayLCD.c: 239: PORTDbits.RD2 = 0;
  1440  000EF4  9483               	bcf	3971,2,c	;volatile
  1441                           
  1442                           ;displayLCD.c: 240: PORTDbits.RD1 = 0;
  1443  000EF6  9283               	bcf	3971,1,c	;volatile
  1444                           
  1445                           ;displayLCD.c: 241: PORTDbits.RD0 = 0;
  1446  000EF8  9083               	bcf	3971,0,c	;volatile
  1447                           
  1448                           ;displayLCD.c: 244: PORTDbits.RD7 = 1;
  1449  000EFA  8E83               	bsf	3971,7,c	;volatile
  1450                           
  1451                           ;displayLCD.c: 245: if(endereco&0b00010000){PORTDbits.RD4=1;}
  1452  000EFC  A811               	btfss	EnderecoCursor@endereco,4,c
  1453  000EFE  D002               	goto	l51
  1454  000F00  8883               	bsf	3971,4,c	;volatile
  1455  000F02  D001               	goto	l1091
  1456  000F04                     l51:
  1457                           
  1458                           ;displayLCD.c: 246: else {PORTDbits.RD4=0;}
  1459  000F04  9883               	bcf	3971,4,c	;volatile
  1460  000F06                     l1091:
  1461                           
  1462                           ;displayLCD.c: 247: if(endereco&0b00100000){PORTDbits.RD5=1;}
  1463  000F06  AA11               	btfss	EnderecoCursor@endereco,5,c
  1464  000F08  D002               	goto	l53
  1465  000F0A  8A83               	bsf	3971,5,c	;volatile
  1466  000F0C  D001               	goto	l1095
  1467  000F0E                     l53:
  1468                           
  1469                           ;displayLCD.c: 248: else {PORTDbits.RD5=0;}
  1470  000F0E  9A83               	bcf	3971,5,c	;volatile
  1471  000F10                     l1095:
  1472                           
  1473                           ;displayLCD.c: 249: if(endereco&0b01000000){PORTDbits.RD6=1;}
  1474  000F10  AC11               	btfss	EnderecoCursor@endereco,6,c
  1475  000F12  D002               	goto	l55
  1476  000F14  8C83               	bsf	3971,6,c	;volatile
  1477  000F16  D001               	goto	l56
  1478  000F18                     l55:
  1479                           
  1480                           ;displayLCD.c: 250: else {PORTDbits.RD6=0;}
  1481  000F18  9C83               	bcf	3971,6,c	;volatile
  1482  000F1A                     l56:
  1483                           
  1484                           ;displayLCD.c: 253: PORTDbits.RD0 = 1;
  1485  000F1A  8083               	bsf	3971,0,c	;volatile
  1486                           
  1487                           ;displayLCD.c: 254: Delay();
  1488  000F1C  EC27  F009         	call	_Delay	;wreg free
  1489                           
  1490                           ;displayLCD.c: 255: PORTDbits.RD0 = 0;
  1491  000F20  9083               	bcf	3971,0,c	;volatile
  1492                           
  1493                           ;displayLCD.c: 256: Delay();
  1494  000F22  EC27  F009         	call	_Delay	;wreg free
  1495                           
  1496                           ;displayLCD.c: 259: if(endereco&0b00000001){PORTDbits.RD4=1;}
  1497  000F26  A011               	btfss	EnderecoCursor@endereco,0,c
  1498  000F28  D002               	goto	l57
  1499  000F2A  8883               	bsf	3971,4,c	;volatile
  1500  000F2C  D001               	goto	l58
  1501  000F2E                     l57:
  1502                           
  1503                           ;displayLCD.c: 260: else {PORTDbits.RD4=0;}
  1504  000F2E  9883               	bcf	3971,4,c	;volatile
  1505  000F30                     l58:
  1506                           
  1507                           ;displayLCD.c: 261: if(endereco&0b00000010){PORTDbits.RD5=1;}
  1508  000F30  A211               	btfss	EnderecoCursor@endereco,1,c
  1509  000F32  D002               	goto	l59
  1510  000F34  8A83               	bsf	3971,5,c	;volatile
  1511  000F36  D001               	goto	l60
  1512  000F38                     l59:
  1513                           
  1514                           ;displayLCD.c: 262: else {PORTDbits.RD5=0;}
  1515  000F38  9A83               	bcf	3971,5,c	;volatile
  1516  000F3A                     l60:
  1517                           
  1518                           ;displayLCD.c: 263: if(endereco&0b00000100){PORTDbits.RD6=1;}
  1519  000F3A  A411               	btfss	EnderecoCursor@endereco,2,c
  1520  000F3C  D002               	goto	l61
  1521  000F3E  8C83               	bsf	3971,6,c	;volatile
  1522  000F40  D001               	goto	l62
  1523  000F42                     l61:
  1524                           
  1525                           ;displayLCD.c: 264: else {PORTDbits.RD6=0;}
  1526  000F42  9C83               	bcf	3971,6,c	;volatile
  1527  000F44                     l62:
  1528                           
  1529                           ;displayLCD.c: 265: if(endereco&0b00001000){PORTDbits.RD7=1;}
  1530  000F44  A611               	btfss	EnderecoCursor@endereco,3,c
  1531  000F46  D002               	goto	l63
  1532  000F48  8E83               	bsf	3971,7,c	;volatile
  1533  000F4A  D001               	goto	l64
  1534  000F4C                     l63:
  1535                           
  1536                           ;displayLCD.c: 266: else {PORTDbits.RD7=0;}
  1537  000F4C  9E83               	bcf	3971,7,c	;volatile
  1538  000F4E                     l64:
  1539                           
  1540                           ;displayLCD.c: 269: PORTDbits.RD0 = 1;
  1541  000F4E  8083               	bsf	3971,0,c	;volatile
  1542                           
  1543                           ;displayLCD.c: 270: Delay();
  1544  000F50  EC27  F009         	call	_Delay	;wreg free
  1545                           
  1546                           ;displayLCD.c: 271: PORTDbits.RD0 = 0;
  1547  000F54  9083               	bcf	3971,0,c	;volatile
  1548                           
  1549                           ;displayLCD.c: 272: Delay();
  1550  000F56  EC27  F009         	call	_Delay	;wreg free
  1551  000F5A  0012               	return		;funcret
  1552  000F5C                     __end_of_EnderecoCursor:
  1553                           	opt stack 0
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           prodh	equ	0xFF4
  1559                           prodl	equ	0xFF3
  1560                           intcon	equ	0xFF2
  1561                           intcon2	equ	0xFF1
  1562                           intcon3	equ	0xFF0
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           postdec1	equ	0xFE5
  1566                           fsr1l	equ	0xFE1
  1567                           indf2	equ	0xFDF
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _EscreveFraseRamLCD *****************
  1573 ;; Defined at:
  1574 ;;		line 470 in file "displayLCD.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  buffer          2   17[COMRAM] PTR unsigned char 
  1577 ;;		 -> STR_2(3), STR_1(3), odoParcial(7), odoTotal(7), 
  1578 ;;		 -> EscreveInteiroLCD@texto(7), 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1590 ;;      Params:         2       0       0       0       0       0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1593 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1594 ;;Total ram usage:        2 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    3
  1597 ;; This function calls:
  1598 ;;		_EscreveCaractereLCD
  1599 ;; This function is called by:
  1600 ;;		_odometroTotal
  1601 ;;		_odometroParcial
  1602 ;;		_display
  1603 ;;		_EscreveInteiroLCD
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text8
  1608  001072                     __ptext8:
  1609                           	opt stack 0
  1610  001072                     _EscreveFraseRamLCD:
  1611                           	opt stack 26
  1612                           
  1613                           ;displayLCD.c: 472: while(*buffer)
  1614                           
  1615                           ;incstack = 0
  1616  001072  D014               	goto	l1819
  1617  001074                     l1815:
  1618                           
  1619                           ;displayLCD.c: 473: {
  1620                           ;displayLCD.c: 474: EscreveCaractereLCD(*buffer);
  1621  001074  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1622  001078  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1623  00107C  6AF8               	clrf	tblptru,c
  1624  00107E  0E07               	movlw	(high __ramtop+-1)
  1625  001080  64F7               	cpfsgt	tblptrh,c
  1626  001082  D003               	bra	u1077
  1627  001084  0008               	tblrd		*
  1628  001086  50F5               	movf	tablat,w,c
  1629  001088  D005               	bra	u1070
  1630  00108A                     u1077:
  1631  00108A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1632  00108E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1633  001092  50EF               	movf	indf0,w,c
  1634  001094                     u1070:
  1635  001094  EC08  F007         	call	_EscreveCaractereLCD
  1636                           
  1637                           ;displayLCD.c: 475: buffer++;
  1638  001098  4A12               	infsnz	EscreveFraseRamLCD@buffer,f,c
  1639  00109A  2A13               	incf	EscreveFraseRamLCD@buffer+1,f,c
  1640  00109C                     l1819:
  1641  00109C  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1642  0010A0  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1643  0010A4  6AF8               	clrf	tblptru,c
  1644  0010A6  0E07               	movlw	(high __ramtop+-1)
  1645  0010A8  64F7               	cpfsgt	tblptrh,c
  1646  0010AA  D003               	bra	u1087
  1647  0010AC  0008               	tblrd		*
  1648  0010AE  50F5               	movf	tablat,w,c
  1649  0010B0  D005               	bra	u1080
  1650  0010B2                     u1087:
  1651  0010B2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1652  0010B6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1653  0010BA  50EF               	movf	indf0,w,c
  1654  0010BC                     u1080:
  1655  0010BC  0900               	iorlw	0
  1656  0010BE  B4D8               	btfsc	status,2,c
  1657  0010C0  0012               	return	
  1658  0010C2  D7D8               	goto	l1815
  1659  0010C4                     __end_of_EscreveFraseRamLCD:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           prodh	equ	0xFF4
  1666                           prodl	equ	0xFF3
  1667                           intcon	equ	0xFF2
  1668                           intcon2	equ	0xFF1
  1669                           intcon3	equ	0xFF0
  1670                           indf0	equ	0xFEF
  1671                           postinc0	equ	0xFEE
  1672                           fsr0h	equ	0xFEA
  1673                           fsr0l	equ	0xFE9
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           indf2	equ	0xFDF
  1678                           fsr2h	equ	0xFDA
  1679                           fsr2l	equ	0xFD9
  1680                           status	equ	0xFD8
  1681                           
  1682 ;; *************** function _EscreveCaractereLCD *****************
  1683 ;; Defined at:
  1684 ;;		line 348 in file "displayLCD.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  data            1    wreg     unsigned char 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  data            1   16[COMRAM] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1698 ;;      Params:         0       0       0       0       0       0       0       0       0
  1699 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1701 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1702 ;;Total ram usage:        1 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    2
  1705 ;; This function calls:
  1706 ;;		_Delay
  1707 ;; This function is called by:
  1708 ;;		_EscreveFraseRamLCD
  1709 ;;		_EscreveFloatLCD
  1710 ;;		_EscreveFraseLCD
  1711 ;;		_CriaCaractereLCD
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text9
  1716  000E10                     __ptext9:
  1717                           	opt stack 0
  1718  000E10                     _EscreveCaractereLCD:
  1719                           	opt stack 26
  1720                           
  1721                           ;incstack = 0
  1722                           ;EscreveCaractereLCD@data stored from wreg
  1723  000E10  6E11               	movwf	EscreveCaractereLCD@data,c
  1724                           
  1725                           ;displayLCD.c: 351: PORTDbits.RD2 = 0;
  1726  000E12  9483               	bcf	3971,2,c	;volatile
  1727                           
  1728                           ;displayLCD.c: 352: PORTDbits.RD1 = 1;
  1729  000E14  8283               	bsf	3971,1,c	;volatile
  1730                           
  1731                           ;displayLCD.c: 353: PORTDbits.RD0 = 0;
  1732  000E16  9083               	bcf	3971,0,c	;volatile
  1733                           
  1734                           ;displayLCD.c: 356: if(data&0b00010000){PORTDbits.RD4=1;}
  1735  000E18  A811               	btfss	EscreveCaractereLCD@data,4,c
  1736  000E1A  D002               	goto	l80
  1737  000E1C  8883               	bsf	3971,4,c	;volatile
  1738  000E1E  D001               	goto	l1123
  1739  000E20                     l80:
  1740                           
  1741                           ;displayLCD.c: 357: else {PORTDbits.RD4=0;}
  1742  000E20  9883               	bcf	3971,4,c	;volatile
  1743  000E22                     l1123:
  1744                           
  1745                           ;displayLCD.c: 358: if(data&0b00100000){PORTDbits.RD5=1;}
  1746  000E22  AA11               	btfss	EscreveCaractereLCD@data,5,c
  1747  000E24  D002               	goto	l82
  1748  000E26  8A83               	bsf	3971,5,c	;volatile
  1749  000E28  D001               	goto	l1127
  1750  000E2A                     l82:
  1751                           
  1752                           ;displayLCD.c: 359: else {PORTDbits.RD5=0;}
  1753  000E2A  9A83               	bcf	3971,5,c	;volatile
  1754  000E2C                     l1127:
  1755                           
  1756                           ;displayLCD.c: 360: if(data&0b01000000){PORTDbits.RD6=1;}
  1757  000E2C  AC11               	btfss	EscreveCaractereLCD@data,6,c
  1758  000E2E  D002               	goto	l84
  1759  000E30  8C83               	bsf	3971,6,c	;volatile
  1760  000E32  D001               	goto	l1131
  1761  000E34                     l84:
  1762                           
  1763                           ;displayLCD.c: 361: else {PORTDbits.RD6=0;}
  1764  000E34  9C83               	bcf	3971,6,c	;volatile
  1765  000E36                     l1131:
  1766                           
  1767                           ;displayLCD.c: 362: if(data&0b10000000){PORTDbits.RD7=1;}
  1768  000E36  AE11               	btfss	EscreveCaractereLCD@data,7,c
  1769  000E38  D002               	goto	l86
  1770  000E3A  8E83               	bsf	3971,7,c	;volatile
  1771  000E3C  D001               	goto	l87
  1772  000E3E                     l86:
  1773                           
  1774                           ;displayLCD.c: 363: else {PORTDbits.RD7=0;}
  1775  000E3E  9E83               	bcf	3971,7,c	;volatile
  1776  000E40                     l87:
  1777                           
  1778                           ;displayLCD.c: 366: PORTDbits.RD0 = 1;
  1779  000E40  8083               	bsf	3971,0,c	;volatile
  1780                           
  1781                           ;displayLCD.c: 367: Delay();
  1782  000E42  EC27  F009         	call	_Delay	;wreg free
  1783                           
  1784                           ;displayLCD.c: 368: PORTDbits.RD0 = 0;
  1785  000E46  9083               	bcf	3971,0,c	;volatile
  1786                           
  1787                           ;displayLCD.c: 369: Delay();
  1788  000E48  EC27  F009         	call	_Delay	;wreg free
  1789                           
  1790                           ;displayLCD.c: 373: if(data&0b00000001){PORTDbits.RD4=1;}
  1791  000E4C  A011               	btfss	EscreveCaractereLCD@data,0,c
  1792  000E4E  D002               	goto	l88
  1793  000E50  8883               	bsf	3971,4,c	;volatile
  1794  000E52  D001               	goto	l89
  1795  000E54                     l88:
  1796                           
  1797                           ;displayLCD.c: 374: else {PORTDbits.RD4=0;}
  1798  000E54  9883               	bcf	3971,4,c	;volatile
  1799  000E56                     l89:
  1800                           
  1801                           ;displayLCD.c: 375: if(data&0b00000010){PORTDbits.RD5=1;}
  1802  000E56  A211               	btfss	EscreveCaractereLCD@data,1,c
  1803  000E58  D002               	goto	l90
  1804  000E5A  8A83               	bsf	3971,5,c	;volatile
  1805  000E5C  D001               	goto	l91
  1806  000E5E                     l90:
  1807                           
  1808                           ;displayLCD.c: 376: else {PORTDbits.RD5=0;}
  1809  000E5E  9A83               	bcf	3971,5,c	;volatile
  1810  000E60                     l91:
  1811                           
  1812                           ;displayLCD.c: 377: if(data&0b00000100){PORTDbits.RD6=1;}
  1813  000E60  A411               	btfss	EscreveCaractereLCD@data,2,c
  1814  000E62  D002               	goto	l92
  1815  000E64  8C83               	bsf	3971,6,c	;volatile
  1816  000E66  D001               	goto	l93
  1817  000E68                     l92:
  1818                           
  1819                           ;displayLCD.c: 378: else {PORTDbits.RD6=0;}
  1820  000E68  9C83               	bcf	3971,6,c	;volatile
  1821  000E6A                     l93:
  1822                           
  1823                           ;displayLCD.c: 379: if(data&0b00001000){PORTDbits.RD7=1;}
  1824  000E6A  A611               	btfss	EscreveCaractereLCD@data,3,c
  1825  000E6C  D002               	goto	l94
  1826  000E6E  8E83               	bsf	3971,7,c	;volatile
  1827  000E70  D001               	goto	l95
  1828  000E72                     l94:
  1829                           
  1830                           ;displayLCD.c: 380: else {PORTDbits.RD7=0;}
  1831  000E72  9E83               	bcf	3971,7,c	;volatile
  1832  000E74                     l95:
  1833                           
  1834                           ;displayLCD.c: 383: PORTDbits.RD0 = 1;
  1835  000E74  8083               	bsf	3971,0,c	;volatile
  1836                           
  1837                           ;displayLCD.c: 384: Delay();
  1838  000E76  EC27  F009         	call	_Delay	;wreg free
  1839                           
  1840                           ;displayLCD.c: 385: PORTDbits.RD0 = 0;
  1841  000E7A  9083               	bcf	3971,0,c	;volatile
  1842                           
  1843                           ;displayLCD.c: 386: Delay();
  1844  000E7C  EC27  F009         	call	_Delay	;wreg free
  1845  000E80  0012               	return		;funcret
  1846  000E82                     __end_of_EscreveCaractereLCD:
  1847                           	opt stack 0
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           prodh	equ	0xFF4
  1853                           prodl	equ	0xFF3
  1854                           intcon	equ	0xFF2
  1855                           intcon2	equ	0xFF1
  1856                           intcon3	equ	0xFF0
  1857                           indf0	equ	0xFEF
  1858                           postinc0	equ	0xFEE
  1859                           fsr0h	equ	0xFEA
  1860                           fsr0l	equ	0xFE9
  1861                           wreg	equ	0xFE8
  1862                           postdec1	equ	0xFE5
  1863                           fsr1l	equ	0xFE1
  1864                           indf2	equ	0xFDF
  1865                           fsr2h	equ	0xFDA
  1866                           fsr2l	equ	0xFD9
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _Init_EEPROM *****************
  1870 ;; Defined at:
  1871 ;;		line 5 in file "EEPROM.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1885 ;;      Params:         0       0       0       0       0       0       0       0       0
  1886 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1888 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1889 ;;Total ram usage:        0 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    1
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text10
  1900  0012AA                     __ptext10:
  1901                           	opt stack 0
  1902  0012AA                     _Init_EEPROM:
  1903                           	opt stack 29
  1904                           
  1905                           ;EEPROM.c: 7: EECON1 = 0b00000100;
  1906                           
  1907                           ;incstack = 0
  1908  0012AA  0E04               	movlw	4
  1909  0012AC  6EA6               	movwf	4006,c	;volatile
  1910  0012AE  0012               	return		;funcret
  1911  0012B0                     __end_of_Init_EEPROM:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           intcon2	equ	0xFF1
  1921                           intcon3	equ	0xFF0
  1922                           indf0	equ	0xFEF
  1923                           postinc0	equ	0xFEE
  1924                           fsr0h	equ	0xFEA
  1925                           fsr0l	equ	0xFE9
  1926                           wreg	equ	0xFE8
  1927                           postdec1	equ	0xFE5
  1928                           fsr1l	equ	0xFE1
  1929                           indf2	equ	0xFDF
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _ConfiguraLCD *****************
  1935 ;; Defined at:
  1936 ;;		line 87 in file "displayLCD.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, status,2, status,0, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1950 ;;      Params:         0       0       0       0       0       0       0       0       0
  1951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1952 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1953 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1954 ;;Total ram usage:        1 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    3
  1957 ;; This function calls:
  1958 ;;		_Delay
  1959 ;;		_EscreveComandoLCD
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text11
  1966  000C5A                     __ptext11:
  1967                           	opt stack 0
  1968  000C5A                     _ConfiguraLCD:
  1969                           	opt stack 27
  1970                           
  1971                           ;displayLCD.c: 90: TRISDbits.RD2 = 0;
  1972                           
  1973                           ;incstack = 0
  1974  000C5A  9495               	bcf	3989,2,c	;volatile
  1975                           
  1976                           ;displayLCD.c: 91: TRISDbits.RD1 = 0;
  1977  000C5C  9295               	bcf	3989,1,c	;volatile
  1978                           
  1979                           ;displayLCD.c: 92: TRISDbits.RD0 = 0;
  1980  000C5E  9095               	bcf	3989,0,c	;volatile
  1981                           
  1982                           ;displayLCD.c: 95: TRISDbits.RD4=0;
  1983  000C60  9895               	bcf	3989,4,c	;volatile
  1984                           
  1985                           ;displayLCD.c: 96: TRISDbits.RD5=0;
  1986  000C62  9A95               	bcf	3989,5,c	;volatile
  1987                           
  1988                           ;displayLCD.c: 97: TRISDbits.RD6=0;
  1989  000C64  9C95               	bcf	3989,6,c	;volatile
  1990                           
  1991                           ;displayLCD.c: 98: TRISDbits.RD7=0;
  1992  000C66  9E95               	bcf	3989,7,c	;volatile
  1993                           
  1994                           ;displayLCD.c: 105: PORTDbits.RD2 = 0;
  1995  000C68  9483               	bcf	3971,2,c	;volatile
  1996                           
  1997                           ;displayLCD.c: 106: PORTDbits.RD1 = 0;
  1998  000C6A  9283               	bcf	3971,1,c	;volatile
  1999                           
  2000                           ;displayLCD.c: 107: PORTDbits.RD0 = 0;
  2001  000C6C  9083               	bcf	3971,0,c	;volatile
  2002                           
  2003                           ;displayLCD.c: 111: PORTDbits.RD7=0;
  2004  000C6E  9E83               	bcf	3971,7,c	;volatile
  2005                           
  2006                           ;displayLCD.c: 112: PORTDbits.RD6=0;
  2007  000C70  9C83               	bcf	3971,6,c	;volatile
  2008                           
  2009                           ;displayLCD.c: 113: PORTDbits.RD5=1;
  2010  000C72  8A83               	bsf	3971,5,c	;volatile
  2011                           
  2012                           ;displayLCD.c: 114: PORTDbits.RD4=1;
  2013  000C74  8883               	bsf	3971,4,c	;volatile
  2014                           
  2015                           ;displayLCD.c: 119: _delay((unsigned long)((15)*(48000000/4000.0)));
  2016  000C76  0EEA               	movlw	234
  2017  000C78  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2018  000C7A  0EC3               	movlw	195
  2019  000C7C                     u1897:
  2020  000C7C  2EE8               	decfsz	wreg,f,c
  2021  000C7E  D7FE               	bra	u1897
  2022  000C80  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2023  000C82  D7FC               	bra	u1897
  2024  000C84  F000               	nop	
  2025                           
  2026                           ;displayLCD.c: 123: PORTDbits.RD0 = 1;
  2027  000C86  8083               	bsf	3971,0,c	;volatile
  2028                           
  2029                           ;displayLCD.c: 124: Delay();
  2030  000C88  EC27  F009         	call	_Delay	;wreg free
  2031                           
  2032                           ;displayLCD.c: 125: PORTDbits.RD0 = 0;
  2033  000C8C  9083               	bcf	3971,0,c	;volatile
  2034                           
  2035                           ;displayLCD.c: 126: Delay();
  2036  000C8E  EC27  F009         	call	_Delay	;wreg free
  2037                           
  2038                           ;displayLCD.c: 131: _delay((unsigned long)((5)*(48000000/4000.0)));
  2039  000C92  0E4E               	movlw	78
  2040  000C94  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2041  000C96  0EEB               	movlw	235
  2042  000C98                     u1907:
  2043  000C98  2EE8               	decfsz	wreg,f,c
  2044  000C9A  D7FE               	bra	u1907
  2045  000C9C  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2046  000C9E  D7FC               	bra	u1907
  2047  000CA0  F000               	nop	
  2048                           
  2049                           ;displayLCD.c: 134: PORTDbits.RD0 = 1;
  2050  000CA2  8083               	bsf	3971,0,c	;volatile
  2051                           
  2052                           ;displayLCD.c: 135: Delay();
  2053  000CA4  EC27  F009         	call	_Delay	;wreg free
  2054                           
  2055                           ;displayLCD.c: 136: PORTDbits.RD0 = 0;
  2056  000CA8  9083               	bcf	3971,0,c	;volatile
  2057                           
  2058                           ;displayLCD.c: 137: Delay();
  2059  000CAA  EC27  F009         	call	_Delay	;wreg free
  2060                           
  2061                           ;displayLCD.c: 142: _delay((unsigned long)((5)*(48000000/4000.0)));
  2062  000CAE  0E4E               	movlw	78
  2063  000CB0  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2064  000CB2  0EEB               	movlw	235
  2065  000CB4                     u1917:
  2066  000CB4  2EE8               	decfsz	wreg,f,c
  2067  000CB6  D7FE               	bra	u1917
  2068  000CB8  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2069  000CBA  D7FC               	bra	u1917
  2070  000CBC  F000               	nop	
  2071                           
  2072                           ;displayLCD.c: 145: PORTDbits.RD0 = 1;
  2073  000CBE  8083               	bsf	3971,0,c	;volatile
  2074                           
  2075                           ;displayLCD.c: 146: Delay();
  2076  000CC0  EC27  F009         	call	_Delay	;wreg free
  2077                           
  2078                           ;displayLCD.c: 147: PORTDbits.RD0 = 0;
  2079  000CC4  9083               	bcf	3971,0,c	;volatile
  2080                           
  2081                           ;displayLCD.c: 148: Delay();
  2082  000CC6  EC27  F009         	call	_Delay	;wreg free
  2083                           
  2084                           ;displayLCD.c: 151: PORTDbits.RD7=0;
  2085  000CCA  9E83               	bcf	3971,7,c	;volatile
  2086                           
  2087                           ;displayLCD.c: 152: PORTDbits.RD6=0;
  2088  000CCC  9C83               	bcf	3971,6,c	;volatile
  2089                           
  2090                           ;displayLCD.c: 153: PORTDbits.RD5=1;
  2091  000CCE  8A83               	bsf	3971,5,c	;volatile
  2092                           
  2093                           ;displayLCD.c: 154: PORTDbits.RD4=0;
  2094  000CD0  9883               	bcf	3971,4,c	;volatile
  2095                           
  2096                           ;displayLCD.c: 158: PORTDbits.RD0 = 1;
  2097  000CD2  8083               	bsf	3971,0,c	;volatile
  2098                           
  2099                           ;displayLCD.c: 159: Delay();
  2100  000CD4  EC27  F009         	call	_Delay	;wreg free
  2101                           
  2102                           ;displayLCD.c: 160: PORTDbits.RD0 = 0;
  2103  000CD8  9083               	bcf	3971,0,c	;volatile
  2104                           
  2105                           ;displayLCD.c: 161: Delay();
  2106  000CDA  EC27  F009         	call	_Delay	;wreg free
  2107                           
  2108                           ;displayLCD.c: 165: EscreveComandoLCD(0b00101000);
  2109  000CDE  0E28               	movlw	40
  2110  000CE0  EC7C  F006         	call	_EscreveComandoLCD
  2111                           
  2112                           ;displayLCD.c: 166: EscreveComandoLCD(0b00000110);
  2113  000CE4  0E06               	movlw	6
  2114  000CE6  EC7C  F006         	call	_EscreveComandoLCD
  2115                           
  2116                           ;displayLCD.c: 167: EscreveComandoLCD(0b00001110);
  2117  000CEA  0E0E               	movlw	14
  2118  000CEC  EC7C  F006         	call	_EscreveComandoLCD
  2119                           
  2120                           ;displayLCD.c: 168: EscreveComandoLCD(0b00000001);
  2121  000CF0  0E01               	movlw	1
  2122  000CF2  EC7C  F006         	call	_EscreveComandoLCD
  2123  000CF6  0012               	return		;funcret
  2124  000CF8                     __end_of_ConfiguraLCD:
  2125                           	opt stack 0
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           prodh	equ	0xFF4
  2131                           prodl	equ	0xFF3
  2132                           intcon	equ	0xFF2
  2133                           intcon2	equ	0xFF1
  2134                           intcon3	equ	0xFF0
  2135                           indf0	equ	0xFEF
  2136                           postinc0	equ	0xFEE
  2137                           fsr0h	equ	0xFEA
  2138                           fsr0l	equ	0xFE9
  2139                           wreg	equ	0xFE8
  2140                           postdec1	equ	0xFE5
  2141                           fsr1l	equ	0xFE1
  2142                           indf2	equ	0xFDF
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _EscreveComandoLCD *****************
  2148 ;; Defined at:
  2149 ;;		line 179 in file "displayLCD.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  cmd             1    wreg     unsigned char 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  cmd             1   16[COMRAM] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1    wreg      void 
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2163 ;;      Params:         0       0       0       0       0       0       0       0       0
  2164 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2166 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2167 ;;Total ram usage:        1 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    2
  2170 ;; This function calls:
  2171 ;;		_Delay
  2172 ;; This function is called by:
  2173 ;;		_ConfiguraLCD
  2174 ;;		_CriaCaractereLCD
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text12
  2179  000CF8                     __ptext12:
  2180                           	opt stack 0
  2181  000CF8                     _EscreveComandoLCD:
  2182                           	opt stack 27
  2183                           
  2184                           ;incstack = 0
  2185                           ;EscreveComandoLCD@cmd stored from wreg
  2186  000CF8  6E11               	movwf	EscreveComandoLCD@cmd,c
  2187                           
  2188                           ;displayLCD.c: 182: PORTDbits.RD2 = 0;
  2189  000CFA  9483               	bcf	3971,2,c	;volatile
  2190                           
  2191                           ;displayLCD.c: 183: PORTDbits.RD1 = 0;
  2192  000CFC  9283               	bcf	3971,1,c	;volatile
  2193                           
  2194                           ;displayLCD.c: 184: PORTDbits.RD0 = 0;
  2195  000CFE  9083               	bcf	3971,0,c	;volatile
  2196                           
  2197                           ;displayLCD.c: 187: if(cmd&0b00010000){PORTDbits.RD4=1;}
  2198  000D00  A811               	btfss	EscreveComandoLCD@cmd,4,c
  2199  000D02  D002               	goto	l29
  2200  000D04  8883               	bsf	3971,4,c	;volatile
  2201  000D06  D001               	goto	l1199
  2202  000D08                     l29:
  2203                           
  2204                           ;displayLCD.c: 188: else {PORTDbits.RD4=0;}
  2205  000D08  9883               	bcf	3971,4,c	;volatile
  2206  000D0A                     l1199:
  2207                           
  2208                           ;displayLCD.c: 189: if(cmd&0b00100000){PORTDbits.RD5=1;}
  2209  000D0A  AA11               	btfss	EscreveComandoLCD@cmd,5,c
  2210  000D0C  D002               	goto	l31
  2211  000D0E  8A83               	bsf	3971,5,c	;volatile
  2212  000D10  D001               	goto	l1203
  2213  000D12                     l31:
  2214                           
  2215                           ;displayLCD.c: 190: else {PORTDbits.RD5=0;}
  2216  000D12  9A83               	bcf	3971,5,c	;volatile
  2217  000D14                     l1203:
  2218                           
  2219                           ;displayLCD.c: 191: if(cmd&0b01000000){PORTDbits.RD6=1;}
  2220  000D14  AC11               	btfss	EscreveComandoLCD@cmd,6,c
  2221  000D16  D002               	goto	l33
  2222  000D18  8C83               	bsf	3971,6,c	;volatile
  2223  000D1A  D001               	goto	l1207
  2224  000D1C                     l33:
  2225                           
  2226                           ;displayLCD.c: 192: else {PORTDbits.RD6=0;}
  2227  000D1C  9C83               	bcf	3971,6,c	;volatile
  2228  000D1E                     l1207:
  2229                           
  2230                           ;displayLCD.c: 193: if(cmd&0b10000000){PORTDbits.RD7=1;}
  2231  000D1E  AE11               	btfss	EscreveComandoLCD@cmd,7,c
  2232  000D20  D002               	goto	l35
  2233  000D22  8E83               	bsf	3971,7,c	;volatile
  2234  000D24  D001               	goto	l36
  2235  000D26                     l35:
  2236                           
  2237                           ;displayLCD.c: 194: else {PORTDbits.RD7=0;}
  2238  000D26  9E83               	bcf	3971,7,c	;volatile
  2239  000D28                     l36:
  2240                           
  2241                           ;displayLCD.c: 197: PORTDbits.RD0 = 1;
  2242  000D28  8083               	bsf	3971,0,c	;volatile
  2243                           
  2244                           ;displayLCD.c: 198: Delay();
  2245  000D2A  EC27  F009         	call	_Delay	;wreg free
  2246                           
  2247                           ;displayLCD.c: 199: PORTDbits.RD0 = 0;
  2248  000D2E  9083               	bcf	3971,0,c	;volatile
  2249                           
  2250                           ;displayLCD.c: 200: Delay();
  2251  000D30  EC27  F009         	call	_Delay	;wreg free
  2252                           
  2253                           ;displayLCD.c: 203: if(cmd&0b00000001){PORTDbits.RD4=1;}
  2254  000D34  A011               	btfss	EscreveComandoLCD@cmd,0,c
  2255  000D36  D002               	goto	l37
  2256  000D38  8883               	bsf	3971,4,c	;volatile
  2257  000D3A  D001               	goto	l38
  2258  000D3C                     l37:
  2259                           
  2260                           ;displayLCD.c: 204: else {PORTDbits.RD4=0;}
  2261  000D3C  9883               	bcf	3971,4,c	;volatile
  2262  000D3E                     l38:
  2263                           
  2264                           ;displayLCD.c: 205: if(cmd&0b00000010){PORTDbits.RD5=1;}
  2265  000D3E  A211               	btfss	EscreveComandoLCD@cmd,1,c
  2266  000D40  D002               	goto	l39
  2267  000D42  8A83               	bsf	3971,5,c	;volatile
  2268  000D44  D001               	goto	l40
  2269  000D46                     l39:
  2270                           
  2271                           ;displayLCD.c: 206: else {PORTDbits.RD5=0;}
  2272  000D46  9A83               	bcf	3971,5,c	;volatile
  2273  000D48                     l40:
  2274                           
  2275                           ;displayLCD.c: 207: if(cmd&0b00000100){PORTDbits.RD6=1;}
  2276  000D48  A411               	btfss	EscreveComandoLCD@cmd,2,c
  2277  000D4A  D002               	goto	l41
  2278  000D4C  8C83               	bsf	3971,6,c	;volatile
  2279  000D4E  D001               	goto	l42
  2280  000D50                     l41:
  2281                           
  2282                           ;displayLCD.c: 208: else {PORTDbits.RD6=0;}
  2283  000D50  9C83               	bcf	3971,6,c	;volatile
  2284  000D52                     l42:
  2285                           
  2286                           ;displayLCD.c: 209: if(cmd&0b00001000){PORTDbits.RD7=1;}
  2287  000D52  A611               	btfss	EscreveComandoLCD@cmd,3,c
  2288  000D54  D002               	goto	l43
  2289  000D56  8E83               	bsf	3971,7,c	;volatile
  2290  000D58  D001               	goto	l44
  2291  000D5A                     l43:
  2292                           
  2293                           ;displayLCD.c: 210: else {PORTDbits.RD7=0;}
  2294  000D5A  9E83               	bcf	3971,7,c	;volatile
  2295  000D5C                     l44:
  2296                           
  2297                           ;displayLCD.c: 213: PORTDbits.RD0 = 1;
  2298  000D5C  8083               	bsf	3971,0,c	;volatile
  2299                           
  2300                           ;displayLCD.c: 214: Delay();
  2301  000D5E  EC27  F009         	call	_Delay	;wreg free
  2302                           
  2303                           ;displayLCD.c: 215: PORTDbits.RD0 = 0;
  2304  000D62  9083               	bcf	3971,0,c	;volatile
  2305                           
  2306                           ;displayLCD.c: 216: Delay();
  2307  000D64  EC27  F009         	call	_Delay	;wreg free
  2308                           
  2309                           ;displayLCD.c: 221: if (cmd==0x01 || cmd==0x02 || cmd==0x03)
  2310  000D68  0411               	decf	EscreveComandoLCD@cmd,w,c
  2311  000D6A  B4D8               	btfsc	status,2,c
  2312  000D6C  D008               	goto	l1235
  2313  000D6E  0E02               	movlw	2
  2314  000D70  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2315  000D72  B4D8               	btfsc	status,2,c
  2316  000D74  D004               	goto	l1235
  2317  000D76  0E03               	movlw	3
  2318  000D78  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2319  000D7A  A4D8               	btfss	status,2,c
  2320  000D7C  0012               	return	
  2321  000D7E                     l1235:
  2322                           
  2323                           ;displayLCD.c: 222: { Delay(); }
  2324  000D7E  EC27  F009         	call	_Delay	;wreg free
  2325  000D82  0012               	return	
  2326  000D84                     __end_of_EscreveComandoLCD:
  2327                           	opt stack 0
  2328                           tblptru	equ	0xFF8
  2329                           tblptrh	equ	0xFF7
  2330                           tblptrl	equ	0xFF6
  2331                           tablat	equ	0xFF5
  2332                           prodh	equ	0xFF4
  2333                           prodl	equ	0xFF3
  2334                           intcon	equ	0xFF2
  2335                           intcon2	equ	0xFF1
  2336                           intcon3	equ	0xFF0
  2337                           indf0	equ	0xFEF
  2338                           postinc0	equ	0xFEE
  2339                           fsr0h	equ	0xFEA
  2340                           fsr0l	equ	0xFE9
  2341                           wreg	equ	0xFE8
  2342                           postdec1	equ	0xFE5
  2343                           fsr1l	equ	0xFE1
  2344                           indf2	equ	0xFDF
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function _Delay *****************
  2350 ;; Defined at:
  2351 ;;		line 61 in file "displayLCD.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;		None
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  Cnt2            1   15[COMRAM] unsigned char 
  2356 ;;  Cnt1            1   14[COMRAM] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2366 ;;      Params:         0       0       0       0       0       0       0       0       0
  2367 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2369 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2370 ;;Total ram usage:        2 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    1
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_ConfiguraLCD
  2377 ;;		_EscreveComandoLCD
  2378 ;;		_EnderecoCursor
  2379 ;;		_EscreveCaractereLCD
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text13
  2384  00124E                     __ptext13:
  2385                           	opt stack 0
  2386  00124E                     _Delay:
  2387                           	opt stack 26
  2388                           
  2389                           ;displayLCD.c: 63: unsigned char Cnt1, Cnt2;
  2390                           ;displayLCD.c: 65: for(Cnt1 = 0; Cnt1<100; Cnt1++)
  2391                           
  2392                           ;incstack = 0
  2393  00124E  0E00               	movlw	0
  2394  001250  6E0F               	movwf	Delay@Cnt1,c
  2395  001252                     l1067:
  2396  001252  0E63               	movlw	99
  2397  001254  640F               	cpfsgt	Delay@Cnt1,c
  2398  001256  D001               	goto	l19
  2399  001258  0012               	return	
  2400  00125A                     l19:
  2401                           
  2402                           ;displayLCD.c: 66: {
  2403                           ;displayLCD.c: 67: __nop();
  2404  00125A  F000               	nop	
  2405                           
  2406                           ;displayLCD.c: 68: for(Cnt2 = 0; Cnt2<50; Cnt2++)
  2407  00125C  0E00               	movlw	0
  2408  00125E  6E10               	movwf	Delay@Cnt2,c
  2409  001260                     l1073:
  2410  001260  0E31               	movlw	49
  2411  001262  6410               	cpfsgt	Delay@Cnt2,c
  2412  001264  D001               	goto	l21
  2413  001266  D003               	goto	l1081
  2414  001268                     l21:
  2415                           
  2416                           ;displayLCD.c: 69: {
  2417                           ;displayLCD.c: 70: __nop();
  2418  001268  F000               	nop	
  2419  00126A  2A10               	incf	Delay@Cnt2,f,c
  2420  00126C  D7F9               	goto	l1073
  2421  00126E                     l1081:
  2422  00126E  2A0F               	incf	Delay@Cnt1,f,c
  2423  001270  D7F0               	goto	l1067
  2424  001272                     __end_of_Delay:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           intcon2	equ	0xFF1
  2434                           intcon3	equ	0xFF0
  2435                           indf0	equ	0xFEF
  2436                           postinc0	equ	0xFEE
  2437                           fsr0h	equ	0xFEA
  2438                           fsr0l	equ	0xFE9
  2439                           wreg	equ	0xFE8
  2440                           postdec1	equ	0xFE5
  2441                           fsr1l	equ	0xFE1
  2442                           indf2	equ	0xFDF
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function _Combustivel *****************
  2448 ;; Defined at:
  2449 ;;		line 15 in file "Fuel_Gauge.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;		None
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;		None
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  1    wreg      void 
  2456 ;; Registers used:
  2457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2463 ;;      Params:         0       0       0       0       0       0       0       0       0
  2464 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2465 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2466 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2467 ;;Total ram usage:        2 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    3
  2470 ;; This function calls:
  2471 ;;		_TensaoBateria
  2472 ;;		_ValorCombustivel
  2473 ;;		___lwdiv
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text14
  2480  000806                     __ptext14:
  2481                           	opt stack 0
  2482  000806                     _Combustivel:
  2483                           	opt stack 27
  2484                           
  2485                           ;Fuel_Gauge.c: 16: while(primeiroFiltro == 1) {
  2486                           
  2487                           ;incstack = 0
  2488  000806  D00E               	goto	l2179
  2489  000808                     l2163:
  2490                           
  2491                           ;Fuel_Gauge.c: 17: for(primeiroFiltro = 0; primeiroFiltro <= 9; primeiroFiltro ++) {
  2492  000808  0E00               	movlw	0
  2493  00080A  6E35               	movwf	_primeiroFiltro,c
  2494  00080C                     l2165:
  2495  00080C  0E09               	movlw	9
  2496  00080E  6435               	cpfsgt	_primeiroFiltro,c
  2497  000810  D001               	goto	l2169
  2498  000812  D006               	goto	l2177
  2499  000814                     l2169:
  2500                           
  2501                           ;Fuel_Gauge.c: 18: TensaoBateria();
  2502  000814  ECD0  F008         	call	_TensaoBateria	;wreg free
  2503                           
  2504                           ;Fuel_Gauge.c: 19: ValorCombustivel();
  2505  000818  ECC2  F006         	call	_ValorCombustivel	;wreg free
  2506  00081C  2A35               	incf	_primeiroFiltro,f,c
  2507  00081E  D7F6               	goto	l2165
  2508  000820                     l2177:
  2509                           
  2510                           ;Fuel_Gauge.c: 20: }
  2511                           ;Fuel_Gauge.c: 22: primeiroFiltro = 0;
  2512  000820  0E00               	movlw	0
  2513  000822  6E35               	movwf	_primeiroFiltro,c
  2514  000824                     l2179:
  2515  000824  0435               	decf	_primeiroFiltro,w,c
  2516  000826  B4D8               	btfsc	status,2,c
  2517  000828  D7EF               	goto	l2163
  2518                           
  2519                           ;Fuel_Gauge.c: 23: }
  2520                           ;Fuel_Gauge.c: 25: if(tempoCombustivel >= 500) {
  2521  00082A  0EF4               	movlw	244
  2522  00082C  5C2E               	subwf	_tempoCombustivel,w,c
  2523  00082E  0E01               	movlw	1
  2524  000830  582F               	subwfb	_tempoCombustivel+1,w,c
  2525  000832  A0D8               	btfss	status,0,c
  2526  000834  D0DC               	goto	l2247
  2527                           
  2528                           ;Fuel_Gauge.c: 26: TensaoBateria();
  2529  000836  ECD0  F008         	call	_TensaoBateria	;wreg free
  2530                           
  2531                           ;Fuel_Gauge.c: 27: ValorCombustivel();
  2532  00083A  ECC2  F006         	call	_ValorCombustivel	;wreg free
  2533                           
  2534                           ;Fuel_Gauge.c: 28: valorADCMedia = (combArray[0] + combArray[1] + combArray[2] + combArr
      +                          ay[3] + combArray[4] + combArray[5] + combArray[6] + combArray[7] + combArray[8] + combA
      +                          rray[9]) / 10;
  2535  00083E  0100               	movlb	0	; () banked
  2536  000840  5164               	movf	(_combArray+4)& (0+255),w,b
  2537  000842  0100               	movlb	0	; () banked
  2538  000844  2562               	addwf	(_combArray+2)& (0+255),w,b
  2539  000846  0100               	movlb	0	; () banked
  2540  000848  6F7C               	movwf	??_Combustivel& (0+255),b
  2541  00084A  0100               	movlb	0	; () banked
  2542  00084C  5165               	movf	(_combArray+5)& (0+255),w,b
  2543  00084E  0100               	movlb	0	; () banked
  2544  000850  2163               	addwfc	(_combArray+3)& (0+255),w,b
  2545  000852  0100               	movlb	0	; () banked
  2546  000854  6F7D               	movwf	(??_Combustivel+1)& (0+255),b
  2547  000856  0100               	movlb	0	; () banked
  2548  000858  5166               	movf	(_combArray+6)& (0+255),w,b
  2549  00085A  0100               	movlb	0	; () banked
  2550  00085C  277C               	addwf	??_Combustivel& (0+255),f,b
  2551  00085E  0100               	movlb	0	; () banked
  2552  000860  5167               	movf	(_combArray+7)& (0+255),w,b
  2553  000862  0100               	movlb	0	; () banked
  2554  000864  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2555  000866  0100               	movlb	0	; () banked
  2556  000868  5168               	movf	(_combArray+8)& (0+255),w,b
  2557  00086A  0100               	movlb	0	; () banked
  2558  00086C  277C               	addwf	??_Combustivel& (0+255),f,b
  2559  00086E  0100               	movlb	0	; () banked
  2560  000870  5169               	movf	(_combArray+9)& (0+255),w,b
  2561  000872  0100               	movlb	0	; () banked
  2562  000874  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2563  000876  0100               	movlb	0	; () banked
  2564  000878  516A               	movf	(_combArray+10)& (0+255),w,b
  2565  00087A  0100               	movlb	0	; () banked
  2566  00087C  277C               	addwf	??_Combustivel& (0+255),f,b
  2567  00087E  0100               	movlb	0	; () banked
  2568  000880  516B               	movf	(_combArray+11)& (0+255),w,b
  2569  000882  0100               	movlb	0	; () banked
  2570  000884  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2571  000886  0100               	movlb	0	; () banked
  2572  000888  516C               	movf	(_combArray+12)& (0+255),w,b
  2573  00088A  0100               	movlb	0	; () banked
  2574  00088C  277C               	addwf	??_Combustivel& (0+255),f,b
  2575  00088E  0100               	movlb	0	; () banked
  2576  000890  516D               	movf	(_combArray+13)& (0+255),w,b
  2577  000892  0100               	movlb	0	; () banked
  2578  000894  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2579  000896  0100               	movlb	0	; () banked
  2580  000898  516E               	movf	(_combArray+14)& (0+255),w,b
  2581  00089A  0100               	movlb	0	; () banked
  2582  00089C  277C               	addwf	??_Combustivel& (0+255),f,b
  2583  00089E  0100               	movlb	0	; () banked
  2584  0008A0  516F               	movf	(_combArray+15)& (0+255),w,b
  2585  0008A2  0100               	movlb	0	; () banked
  2586  0008A4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2587  0008A6  0100               	movlb	0	; () banked
  2588  0008A8  5170               	movf	(_combArray+16)& (0+255),w,b
  2589  0008AA  0100               	movlb	0	; () banked
  2590  0008AC  277C               	addwf	??_Combustivel& (0+255),f,b
  2591  0008AE  0100               	movlb	0	; () banked
  2592  0008B0  5171               	movf	(_combArray+17)& (0+255),w,b
  2593  0008B2  0100               	movlb	0	; () banked
  2594  0008B4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2595  0008B6  0100               	movlb	0	; () banked
  2596  0008B8  5172               	movf	(_combArray+18)& (0+255),w,b
  2597  0008BA  0100               	movlb	0	; () banked
  2598  0008BC  277C               	addwf	??_Combustivel& (0+255),f,b
  2599  0008BE  0100               	movlb	0	; () banked
  2600  0008C0  5173               	movf	(_combArray+19)& (0+255),w,b
  2601  0008C2  0100               	movlb	0	; () banked
  2602  0008C4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2603  0008C6  0100               	movlb	0	; () banked
  2604  0008C8  5160               	movf	_combArray& (0+255),w,b
  2605  0008CA  0100               	movlb	0	; () banked
  2606  0008CC  257C               	addwf	??_Combustivel& (0+255),w,b
  2607  0008CE  6E0F               	movwf	___lwdiv@dividend,c
  2608  0008D0  0100               	movlb	0	; () banked
  2609  0008D2  5161               	movf	(_combArray+1)& (0+255),w,b
  2610  0008D4  0100               	movlb	0	; () banked
  2611  0008D6  217D               	addwfc	(??_Combustivel+1)& (0+255),w,b
  2612  0008D8  6E10               	movwf	___lwdiv@dividend+1,c
  2613  0008DA  0E00               	movlw	0
  2614  0008DC  6E12               	movwf	___lwdiv@divisor+1,c
  2615  0008DE  0E0A               	movlw	10
  2616  0008E0  6E11               	movwf	___lwdiv@divisor,c
  2617  0008E2  EC62  F008         	call	___lwdiv	;wreg free
  2618  0008E6  C00F  F030         	movff	?___lwdiv,_valorADCMedia
  2619  0008EA  C010  F031         	movff	?___lwdiv+1,_valorADCMedia+1
  2620                           
  2621                           ;Fuel_Gauge.c: 30: if(valorADCMedia <= 50) {
  2622  0008EE  5031               	movf	_valorADCMedia+1,w,c
  2623  0008F0  E106               	bnz	l2193
  2624  0008F2  0E33               	movlw	51
  2625  0008F4  5C30               	subwf	_valorADCMedia,w,c
  2626  0008F6  B0D8               	btfsc	status,0,c
  2627  0008F8  D002               	goto	l2193
  2628                           
  2629                           ;Fuel_Gauge.c: 31: PORTB = 0b00000000;
  2630  0008FA  0E00               	movlw	0
  2631  0008FC  6E81               	movwf	3969,c	;volatile
  2632  0008FE                     l2193:
  2633                           
  2634                           ;Fuel_Gauge.c: 32: }
  2635                           ;Fuel_Gauge.c: 33: if(valorADCMedia > 50 && valorADCMedia <= 85) {
  2636  0008FE  5031               	movf	_valorADCMedia+1,w,c
  2637  000900  E104               	bnz	u1700
  2638  000902  0E33               	movlw	51
  2639  000904  5C30               	subwf	_valorADCMedia,w,c
  2640  000906  A0D8               	btfss	status,0,c
  2641  000908  D008               	goto	l2199
  2642  00090A                     u1700:
  2643  00090A  5031               	movf	_valorADCMedia+1,w,c
  2644  00090C  E106               	bnz	l2199
  2645  00090E  0E56               	movlw	86
  2646  000910  5C30               	subwf	_valorADCMedia,w,c
  2647  000912  B0D8               	btfsc	status,0,c
  2648  000914  D002               	goto	l2199
  2649                           
  2650                           ;Fuel_Gauge.c: 34: PORTB = 0b010000000;
  2651  000916  0E80               	movlw	128
  2652  000918  6E81               	movwf	3969,c	;volatile
  2653  00091A                     l2199:
  2654                           
  2655                           ;Fuel_Gauge.c: 35: }
  2656                           ;Fuel_Gauge.c: 36: if(valorADCMedia > 85 && valorADCMedia <= 120) {
  2657  00091A  5031               	movf	_valorADCMedia+1,w,c
  2658  00091C  E104               	bnz	u1720
  2659  00091E  0E56               	movlw	86
  2660  000920  5C30               	subwf	_valorADCMedia,w,c
  2661  000922  A0D8               	btfss	status,0,c
  2662  000924  D008               	goto	l2205
  2663  000926                     u1720:
  2664  000926  5031               	movf	_valorADCMedia+1,w,c
  2665  000928  E106               	bnz	l2205
  2666  00092A  0E79               	movlw	121
  2667  00092C  5C30               	subwf	_valorADCMedia,w,c
  2668  00092E  B0D8               	btfsc	status,0,c
  2669  000930  D002               	goto	l2205
  2670                           
  2671                           ;Fuel_Gauge.c: 37: PORTB = 0b11000000;
  2672  000932  0EC0               	movlw	192
  2673  000934  6E81               	movwf	3969,c	;volatile
  2674  000936                     l2205:
  2675                           
  2676                           ;Fuel_Gauge.c: 38: }
  2677                           ;Fuel_Gauge.c: 39: if(valorADCMedia > 120 && valorADCMedia<= 155) {
  2678  000936  5031               	movf	_valorADCMedia+1,w,c
  2679  000938  E104               	bnz	u1740
  2680  00093A  0E79               	movlw	121
  2681  00093C  5C30               	subwf	_valorADCMedia,w,c
  2682  00093E  A0D8               	btfss	status,0,c
  2683  000940  D008               	goto	l2211
  2684  000942                     u1740:
  2685  000942  5031               	movf	_valorADCMedia+1,w,c
  2686  000944  E106               	bnz	l2211
  2687  000946  0E9C               	movlw	156
  2688  000948  5C30               	subwf	_valorADCMedia,w,c
  2689  00094A  B0D8               	btfsc	status,0,c
  2690  00094C  D002               	goto	l2211
  2691                           
  2692                           ;Fuel_Gauge.c: 40: PORTB = 0b11100000;
  2693  00094E  0EE0               	movlw	224
  2694  000950  6E81               	movwf	3969,c	;volatile
  2695  000952                     l2211:
  2696                           
  2697                           ;Fuel_Gauge.c: 41: }
  2698                           ;Fuel_Gauge.c: 42: if(valorADCMedia > 155 && valorADCMedia <= 190) {
  2699  000952  5031               	movf	_valorADCMedia+1,w,c
  2700  000954  E104               	bnz	u1760
  2701  000956  0E9C               	movlw	156
  2702  000958  5C30               	subwf	_valorADCMedia,w,c
  2703  00095A  A0D8               	btfss	status,0,c
  2704  00095C  D008               	goto	l2217
  2705  00095E                     u1760:
  2706  00095E  5031               	movf	_valorADCMedia+1,w,c
  2707  000960  E106               	bnz	l2217
  2708  000962  0EBF               	movlw	191
  2709  000964  5C30               	subwf	_valorADCMedia,w,c
  2710  000966  B0D8               	btfsc	status,0,c
  2711  000968  D002               	goto	l2217
  2712                           
  2713                           ;Fuel_Gauge.c: 43: PORTB = 0b11110000;
  2714  00096A  0EF0               	movlw	240
  2715  00096C  6E81               	movwf	3969,c	;volatile
  2716  00096E                     l2217:
  2717                           
  2718                           ;Fuel_Gauge.c: 44: }
  2719                           ;Fuel_Gauge.c: 45: if(valorADCMedia > 190 && valorADCMedia <= 225) {
  2720  00096E  5031               	movf	_valorADCMedia+1,w,c
  2721  000970  E104               	bnz	u1780
  2722  000972  0EBF               	movlw	191
  2723  000974  5C30               	subwf	_valorADCMedia,w,c
  2724  000976  A0D8               	btfss	status,0,c
  2725  000978  D008               	goto	l2223
  2726  00097A                     u1780:
  2727  00097A  5031               	movf	_valorADCMedia+1,w,c
  2728  00097C  E106               	bnz	l2223
  2729  00097E  0EE2               	movlw	226
  2730  000980  5C30               	subwf	_valorADCMedia,w,c
  2731  000982  B0D8               	btfsc	status,0,c
  2732  000984  D002               	goto	l2223
  2733                           
  2734                           ;Fuel_Gauge.c: 46: PORTB = 0b11111000;
  2735  000986  0EF8               	movlw	248
  2736  000988  6E81               	movwf	3969,c	;volatile
  2737  00098A                     l2223:
  2738                           
  2739                           ;Fuel_Gauge.c: 47: }
  2740                           ;Fuel_Gauge.c: 48: if(valorADCMedia > 225 && valorADCMedia <= 268) {
  2741  00098A  5031               	movf	_valorADCMedia+1,w,c
  2742  00098C  E104               	bnz	u1800
  2743  00098E  0EE2               	movlw	226
  2744  000990  5C30               	subwf	_valorADCMedia,w,c
  2745  000992  A0D8               	btfss	status,0,c
  2746  000994  D008               	goto	l2229
  2747  000996                     u1800:
  2748  000996  0E0D               	movlw	13
  2749  000998  5C30               	subwf	_valorADCMedia,w,c
  2750  00099A  0E01               	movlw	1
  2751  00099C  5831               	subwfb	_valorADCMedia+1,w,c
  2752  00099E  B0D8               	btfsc	status,0,c
  2753  0009A0  D002               	goto	l2229
  2754                           
  2755                           ;Fuel_Gauge.c: 49: PORTB = 0b11111100;
  2756  0009A2  0EFC               	movlw	252
  2757  0009A4  6E81               	movwf	3969,c	;volatile
  2758  0009A6                     l2229:
  2759                           
  2760                           ;Fuel_Gauge.c: 50: }
  2761                           ;Fuel_Gauge.c: 51: if(valorADCMedia > 268 && valorADCMedia <= 370) {
  2762  0009A6  0E0D               	movlw	13
  2763  0009A8  5C30               	subwf	_valorADCMedia,w,c
  2764  0009AA  0E01               	movlw	1
  2765  0009AC  5831               	subwfb	_valorADCMedia+1,w,c
  2766  0009AE  A0D8               	btfss	status,0,c
  2767  0009B0  D008               	goto	l2235
  2768  0009B2  0E73               	movlw	115
  2769  0009B4  5C30               	subwf	_valorADCMedia,w,c
  2770  0009B6  0E01               	movlw	1
  2771  0009B8  5831               	subwfb	_valorADCMedia+1,w,c
  2772  0009BA  B0D8               	btfsc	status,0,c
  2773  0009BC  D002               	goto	l2235
  2774                           
  2775                           ;Fuel_Gauge.c: 52: PORTB = 0b11111110;
  2776  0009BE  0EFE               	movlw	254
  2777  0009C0  6E81               	movwf	3969,c	;volatile
  2778  0009C2                     l2235:
  2779                           
  2780                           ;Fuel_Gauge.c: 53: }
  2781                           ;Fuel_Gauge.c: 54: if(valorADCMedia > 370) {
  2782  0009C2  0E73               	movlw	115
  2783  0009C4  5C30               	subwf	_valorADCMedia,w,c
  2784  0009C6  0E01               	movlw	1
  2785  0009C8  5831               	subwfb	_valorADCMedia+1,w,c
  2786  0009CA  B0D8               	btfsc	status,0,c
  2787                           
  2788                           ;Fuel_Gauge.c: 55: PORTB = 0b11111111;
  2789  0009CC  6881               	setf	3969,c	;volatile
  2790                           
  2791                           ;Fuel_Gauge.c: 56: }
  2792                           ;Fuel_Gauge.c: 57: if(valorADCMedia> 345) {
  2793  0009CE  0E5A               	movlw	90
  2794  0009D0  5C30               	subwf	_valorADCMedia,w,c
  2795  0009D2  0E01               	movlw	1
  2796  0009D4  5831               	subwfb	_valorADCMedia+1,w,c
  2797  0009D6  A0D8               	btfss	status,0,c
  2798  0009D8  D003               	goto	l2243
  2799                           
  2800                           ;Fuel_Gauge.c: 58: reserva = 1;
  2801  0009DA  0E01               	movlw	1
  2802  0009DC  6E36               	movwf	_reserva,c
  2803                           
  2804                           ;Fuel_Gauge.c: 59: }
  2805  0009DE  D003               	goto	l392
  2806  0009E0                     l2243:
  2807                           
  2808                           ;Fuel_Gauge.c: 60: else {
  2809                           ;Fuel_Gauge.c: 61: reserva = 0;
  2810  0009E0  0E00               	movlw	0
  2811  0009E2  6E36               	movwf	_reserva,c
  2812                           
  2813                           ;Fuel_Gauge.c: 62: PORTCbits.RC0 = 1;
  2814  0009E4  8082               	bsf	3970,0,c	;volatile
  2815  0009E6                     l392:
  2816                           
  2817                           ;Fuel_Gauge.c: 63: }
  2818                           ;Fuel_Gauge.c: 65: tempoCombustivel = 0;
  2819  0009E6  0E00               	movlw	0
  2820  0009E8  6E2F               	movwf	_tempoCombustivel+1,c
  2821  0009EA  0E00               	movlw	0
  2822  0009EC  6E2E               	movwf	_tempoCombustivel,c
  2823  0009EE                     l2247:
  2824                           
  2825                           ;Fuel_Gauge.c: 67: }
  2826                           ;Fuel_Gauge.c: 69: if(countLed >= 1000 && reserva ==1) {
  2827  0009EE  0EE8               	movlw	232
  2828  0009F0  5C2C               	subwf	_countLed,w,c
  2829  0009F2  0E03               	movlw	3
  2830  0009F4  582D               	subwfb	_countLed+1,w,c
  2831  0009F6  A0D8               	btfss	status,0,c
  2832  0009F8  0012               	return	
  2833  0009FA  0436               	decf	_reserva,w,c
  2834  0009FC  A4D8               	btfss	status,2,c
  2835  0009FE  0012               	return	
  2836                           
  2837                           ;Fuel_Gauge.c: 70: PORTCbits.RC0 = ~PORTCbits.RC0;
  2838  000A00  A082               	btfss	3970,0,c	;volatile
  2839  000A02  D002               	goto	u1880
  2840  000A04  0E01               	movlw	1
  2841  000A06  D001               	goto	u1886
  2842  000A08                     u1880:
  2843  000A08  0E00               	movlw	0
  2844  000A0A                     u1886:
  2845  000A0A  0AFF               	xorlw	255
  2846  000A0C  0100               	movlb	0	; () banked
  2847  000A0E  6F7C               	movwf	??_Combustivel& (0+255),b
  2848  000A10  5082               	movf	3970,w,c	;volatile
  2849  000A12  0100               	movlb	0	; () banked
  2850  000A14  197C               	xorwf	??_Combustivel& (0+255),w,b
  2851  000A16  0BFE               	andlw	-2
  2852  000A18  197C               	xorwf	??_Combustivel& (0+255),w,b
  2853  000A1A  6E82               	movwf	3970,c	;volatile
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;Fuel_Gauge.c: 71: countLed = 0;
  2857  000A1C  0E00               	movlw	0
  2858  000A1E  6E2D               	movwf	_countLed+1,c
  2859  000A20  0E00               	movlw	0
  2860  000A22  6E2C               	movwf	_countLed,c
  2861  000A24  0012               	return	
  2862  000A26                     __end_of_Combustivel:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           intcon2	equ	0xFF1
  2872                           intcon3	equ	0xFF0
  2873                           indf0	equ	0xFEF
  2874                           postinc0	equ	0xFEE
  2875                           fsr0h	equ	0xFEA
  2876                           fsr0l	equ	0xFE9
  2877                           wreg	equ	0xFE8
  2878                           postdec1	equ	0xFE5
  2879                           fsr1l	equ	0xFE1
  2880                           indf2	equ	0xFDF
  2881                           fsr2h	equ	0xFDA
  2882                           fsr2l	equ	0xFD9
  2883                           status	equ	0xFD8
  2884                           
  2885 ;; *************** function ___lwdiv *****************
  2886 ;; Defined at:
  2887 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  dividend        2   14[COMRAM] unsigned int 
  2890 ;;  divisor         2   16[COMRAM] unsigned int 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  quotient        2   18[COMRAM] unsigned int 
  2893 ;;  counter         1   20[COMRAM] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  2   14[COMRAM] unsigned int 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2903 ;;      Params:         4       0       0       0       0       0       0       0       0
  2904 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2906 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2907 ;;Total ram usage:        7 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    1
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_Combustivel
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text15
  2918  0010C4                     __ptext15:
  2919                           	opt stack 0
  2920  0010C4                     ___lwdiv:
  2921                           	opt stack 28
  2922                           
  2923                           ;incstack = 0
  2924  0010C4  0E00               	movlw	0
  2925  0010C6  6E14               	movwf	___lwdiv@quotient+1,c
  2926  0010C8  0E00               	movlw	0
  2927  0010CA  6E13               	movwf	___lwdiv@quotient,c
  2928  0010CC  5011               	movf	___lwdiv@divisor,w,c
  2929  0010CE  1012               	iorwf	___lwdiv@divisor+1,w,c
  2930  0010D0  B4D8               	btfsc	status,2,c
  2931  0010D2  D01C               	goto	l854
  2932  0010D4  0E01               	movlw	1
  2933  0010D6  6E15               	movwf	___lwdiv@counter,c
  2934  0010D8  D004               	goto	l1847
  2935  0010DA                     l1845:
  2936  0010DA  90D8               	bcf	status,0,c
  2937  0010DC  3611               	rlcf	___lwdiv@divisor,f,c
  2938  0010DE  3612               	rlcf	___lwdiv@divisor+1,f,c
  2939  0010E0  2A15               	incf	___lwdiv@counter,f,c
  2940  0010E2                     l1847:
  2941  0010E2  AE12               	btfss	___lwdiv@divisor+1,7,c
  2942  0010E4  D7FA               	goto	l1845
  2943  0010E6                     l1849:
  2944  0010E6  90D8               	bcf	status,0,c
  2945  0010E8  3613               	rlcf	___lwdiv@quotient,f,c
  2946  0010EA  3614               	rlcf	___lwdiv@quotient+1,f,c
  2947  0010EC  5011               	movf	___lwdiv@divisor,w,c
  2948  0010EE  5C0F               	subwf	___lwdiv@dividend,w,c
  2949  0010F0  5012               	movf	___lwdiv@divisor+1,w,c
  2950  0010F2  5810               	subwfb	___lwdiv@dividend+1,w,c
  2951  0010F4  A0D8               	btfss	status,0,c
  2952  0010F6  D005               	goto	l1857
  2953  0010F8  5011               	movf	___lwdiv@divisor,w,c
  2954  0010FA  5E0F               	subwf	___lwdiv@dividend,f,c
  2955  0010FC  5012               	movf	___lwdiv@divisor+1,w,c
  2956  0010FE  5A10               	subwfb	___lwdiv@dividend+1,f,c
  2957  001100  8013               	bsf	___lwdiv@quotient,0,c
  2958  001102                     l1857:
  2959  001102  90D8               	bcf	status,0,c
  2960  001104  3212               	rrcf	___lwdiv@divisor+1,f,c
  2961  001106  3211               	rrcf	___lwdiv@divisor,f,c
  2962  001108  2E15               	decfsz	___lwdiv@counter,f,c
  2963  00110A  D7ED               	goto	l1849
  2964  00110C                     l854:
  2965  00110C  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  2966  001110  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2967  001114  0012               	return		;funcret
  2968  001116                     __end_of___lwdiv:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon	equ	0xFF2
  2977                           intcon2	equ	0xFF1
  2978                           intcon3	equ	0xFF0
  2979                           indf0	equ	0xFEF
  2980                           postinc0	equ	0xFEE
  2981                           fsr0h	equ	0xFEA
  2982                           fsr0l	equ	0xFE9
  2983                           wreg	equ	0xFE8
  2984                           postdec1	equ	0xFE5
  2985                           fsr1l	equ	0xFE1
  2986                           indf2	equ	0xFDF
  2987                           fsr2h	equ	0xFDA
  2988                           fsr2l	equ	0xFD9
  2989                           status	equ	0xFD8
  2990                           
  2991 ;; *************** function _ValorCombustivel *****************
  2992 ;; Defined at:
  2993 ;;		line 85 in file "Fuel_Gauge.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3007 ;;      Params:         0       0       0       0       0       0       0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    2
  3014 ;; This function calls:
  3015 ;;		_ADCRead
  3016 ;;		___lldiv
  3017 ;;		___lmul
  3018 ;; This function is called by:
  3019 ;;		_Combustivel
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text16
  3024  000D84                     __ptext16:
  3025                           	opt stack 0
  3026  000D84                     _ValorCombustivel:
  3027                           	opt stack 27
  3028                           
  3029                           ;Fuel_Gauge.c: 86: ADCON0bits.CHS = 0;
  3030                           
  3031                           ;incstack = 0
  3032  000D84  94C2               	bcf	4034,2,c	;volatile
  3033  000D86  96C2               	bcf	4034,3,c	;volatile
  3034  000D88  98C2               	bcf	4034,4,c	;volatile
  3035  000D8A  9AC2               	bcf	4034,5,c	;volatile
  3036                           
  3037                           ;Fuel_Gauge.c: 87: ADCRead();
  3038  000D8C  ECF1  F008         	call	_ADCRead	;wreg free
  3039                           
  3040                           ;Fuel_Gauge.c: 89: valorADC = ((valorADC * 100000) / porcentagemTensao);
  3041  000D90  C038  F00F         	movff	_valorADC,___lmul@multiplier
  3042  000D94  C039  F010         	movff	_valorADC+1,___lmul@multiplier+1
  3043  000D98  C03A  F011         	movff	_valorADC+2,___lmul@multiplier+2
  3044  000D9C  C03B  F012         	movff	_valorADC+3,___lmul@multiplier+3
  3045  000DA0  0EA0               	movlw	160
  3046  000DA2  6E13               	movwf	___lmul@multiplicand,c
  3047  000DA4  0E86               	movlw	134
  3048  000DA6  6E14               	movwf	___lmul@multiplicand+1,c
  3049  000DA8  0E01               	movlw	1
  3050  000DAA  6E15               	movwf	___lmul@multiplicand+2,c
  3051  000DAC  0E00               	movlw	0
  3052  000DAE  6E16               	movwf	___lmul@multiplicand+3,c
  3053  000DB0  EC0E  F008         	call	___lmul	;wreg free
  3054  000DB4  C00F  F074         	movff	?___lmul,___lldiv@dividend
  3055  000DB8  C010  F075         	movff	?___lmul+1,___lldiv@dividend+1
  3056  000DBC  C011  F076         	movff	?___lmul+2,___lldiv@dividend+2
  3057  000DC0  C012  F077         	movff	?___lmul+3,___lldiv@dividend+3
  3058  000DC4  C020  F078         	movff	_porcentagemTensao,___lldiv@divisor
  3059  000DC8  C021  F079         	movff	_porcentagemTensao+1,___lldiv@divisor+1
  3060  000DCC  C022  F07A         	movff	_porcentagemTensao+2,___lldiv@divisor+2
  3061  000DD0  C023  F07B         	movff	_porcentagemTensao+3,___lldiv@divisor+3
  3062  000DD4  ECD5  F005         	call	___lldiv	;wreg free
  3063  000DD8  C074  F038         	movff	?___lldiv,_valorADC
  3064  000DDC  C075  F039         	movff	?___lldiv+1,_valorADC+1
  3065  000DE0  C076  F03A         	movff	?___lldiv+2,_valorADC+2
  3066  000DE4  C077  F03B         	movff	?___lldiv+3,_valorADC+3
  3067                           
  3068                           ;Fuel_Gauge.c: 91: combArray[numeroC] = valorADC;
  3069  000DE8  5034               	movf	_numeroC,w,c
  3070  000DEA  0D02               	mullw	2
  3071  000DEC  0E60               	movlw	low _combArray
  3072  000DEE  24F3               	addwf	prodl,w,c
  3073  000DF0  6ED9               	movwf	fsr2l,c
  3074  000DF2  0E00               	movlw	high _combArray
  3075  000DF4  20F4               	addwfc	prodh,w,c
  3076  000DF6  6EDA               	movwf	fsr2h,c
  3077  000DF8  C038  FFDE         	movff	_valorADC,postinc2
  3078  000DFC  C039  FFDD         	movff	_valorADC+1,postdec2
  3079                           
  3080                           ;Fuel_Gauge.c: 92: numeroC ++;
  3081  000E00  2A34               	incf	_numeroC,f,c
  3082                           
  3083                           ;Fuel_Gauge.c: 94: if(numeroC == 10){
  3084  000E02  0E0A               	movlw	10
  3085  000E04  1834               	xorwf	_numeroC,w,c
  3086  000E06  A4D8               	btfss	status,2,c
  3087  000E08  0012               	return	
  3088                           
  3089                           ;Fuel_Gauge.c: 95: numeroC = 0;
  3090  000E0A  0E00               	movlw	0
  3091  000E0C  6E34               	movwf	_numeroC,c
  3092  000E0E  0012               	return	
  3093  000E10                     __end_of_ValorCombustivel:
  3094                           	opt stack 0
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           prodh	equ	0xFF4
  3100                           prodl	equ	0xFF3
  3101                           intcon	equ	0xFF2
  3102                           intcon2	equ	0xFF1
  3103                           intcon3	equ	0xFF0
  3104                           indf0	equ	0xFEF
  3105                           postinc0	equ	0xFEE
  3106                           fsr0h	equ	0xFEA
  3107                           fsr0l	equ	0xFE9
  3108                           wreg	equ	0xFE8
  3109                           postdec1	equ	0xFE5
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function ___lldiv *****************
  3119 ;; Defined at:
  3120 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  dividend        4    0[BANK0 ] unsigned long 
  3123 ;;  divisor         4    4[BANK0 ] unsigned long 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  quotient        4   26[COMRAM] unsigned long 
  3126 ;;  counter         1   30[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  4    0[BANK0 ] unsigned long 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3136 ;;      Params:         0       8       0       0       0       0       0       0       0
  3137 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3139 ;;      Totals:         5       8       0       0       0       0       0       0       0
  3140 ;;Total ram usage:       13 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    1
  3143 ;; This function calls:
  3144 ;;		Nothing
  3145 ;; This function is called by:
  3146 ;;		_ValorCombustivel
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text17
  3151  000BAA                     __ptext17:
  3152                           	opt stack 0
  3153  000BAA                     ___lldiv:
  3154                           	opt stack 27
  3155                           
  3156                           ;incstack = 0
  3157  000BAA  0E00               	movlw	0
  3158  000BAC  6E1B               	movwf	___lldiv@quotient,c
  3159  000BAE  0E00               	movlw	0
  3160  000BB0  6E1C               	movwf	___lldiv@quotient+1,c
  3161  000BB2  0E00               	movlw	0
  3162  000BB4  6E1D               	movwf	___lldiv@quotient+2,c
  3163  000BB6  0E00               	movlw	0
  3164  000BB8  6E1E               	movwf	___lldiv@quotient+3,c
  3165  000BBA  0100               	movlb	0	; () banked
  3166  000BBC  5178               	movf	___lldiv@divisor& (0+255),w,b
  3167  000BBE  0100               	movlb	0	; () banked
  3168  000BC0  1179               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3169  000BC2  0100               	movlb	0	; () banked
  3170  000BC4  117A               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3171  000BC6  0100               	movlb	0	; () banked
  3172  000BC8  117B               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3173  000BCA  B4D8               	btfsc	status,2,c
  3174  000BCC  D03D               	goto	l801
  3175                           
  3176                           ; BSR set to: 0
  3177  000BCE  0E01               	movlw	1
  3178  000BD0  6E1F               	movwf	___lldiv@counter,c
  3179  000BD2  D007               	goto	l2135
  3180  000BD4                     l2133:
  3181                           
  3182                           ; BSR set to: 0
  3183  000BD4  0100               	movlb	0	; () banked
  3184  000BD6  90D8               	bcf	status,0,c
  3185  000BD8  3778               	rlcf	___lldiv@divisor& (0+255),f,b
  3186  000BDA  3779               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3187  000BDC  377A               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3188  000BDE  377B               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3189  000BE0  2A1F               	incf	___lldiv@counter,f,c
  3190  000BE2                     l2135:
  3191                           
  3192                           ; BSR set to: 0
  3193  000BE2  0100               	movlb	0	; () banked
  3194  000BE4  AF7B               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3195  000BE6  D7F6               	goto	l2133
  3196  000BE8                     l2137:
  3197                           
  3198                           ; BSR set to: 0
  3199  000BE8  90D8               	bcf	status,0,c
  3200  000BEA  361B               	rlcf	___lldiv@quotient,f,c
  3201  000BEC  361C               	rlcf	___lldiv@quotient+1,f,c
  3202  000BEE  361D               	rlcf	___lldiv@quotient+2,f,c
  3203  000BF0  361E               	rlcf	___lldiv@quotient+3,f,c
  3204                           
  3205                           ; BSR set to: 0
  3206  000BF2  0100               	movlb	0	; () banked
  3207  000BF4  5178               	movf	___lldiv@divisor& (0+255),w,b
  3208  000BF6  0100               	movlb	0	; () banked
  3209  000BF8  5D74               	subwf	___lldiv@dividend& (0+255),w,b
  3210  000BFA  0100               	movlb	0	; () banked
  3211  000BFC  5179               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3212  000BFE  0100               	movlb	0	; () banked
  3213  000C00  5975               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3214  000C02  0100               	movlb	0	; () banked
  3215  000C04  517A               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3216  000C06  0100               	movlb	0	; () banked
  3217  000C08  5976               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3218  000C0A  0100               	movlb	0	; () banked
  3219  000C0C  517B               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3220  000C0E  0100               	movlb	0	; () banked
  3221  000C10  5977               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3222  000C12  A0D8               	btfss	status,0,c
  3223  000C14  D011               	goto	l2145
  3224                           
  3225                           ; BSR set to: 0
  3226  000C16  0100               	movlb	0	; () banked
  3227  000C18  5178               	movf	___lldiv@divisor& (0+255),w,b
  3228  000C1A  0100               	movlb	0	; () banked
  3229  000C1C  5F74               	subwf	___lldiv@dividend& (0+255),f,b
  3230  000C1E  0100               	movlb	0	; () banked
  3231  000C20  5179               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3232  000C22  0100               	movlb	0	; () banked
  3233  000C24  5B75               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3234  000C26  0100               	movlb	0	; () banked
  3235  000C28  517A               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3236  000C2A  0100               	movlb	0	; () banked
  3237  000C2C  5B76               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3238  000C2E  0100               	movlb	0	; () banked
  3239  000C30  517B               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3240  000C32  0100               	movlb	0	; () banked
  3241  000C34  5B77               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3242                           
  3243                           ; BSR set to: 0
  3244  000C36  801B               	bsf	___lldiv@quotient,0,c
  3245  000C38                     l2145:
  3246                           
  3247                           ; BSR set to: 0
  3248  000C38  0100               	movlb	0	; () banked
  3249  000C3A  90D8               	bcf	status,0,c
  3250  000C3C  337B               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3251  000C3E  337A               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3252  000C40  3379               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3253  000C42  3378               	rrcf	___lldiv@divisor& (0+255),f,b
  3254                           
  3255                           ; BSR set to: 0
  3256  000C44  2E1F               	decfsz	___lldiv@counter,f,c
  3257  000C46  D7D0               	goto	l2137
  3258  000C48                     l801:
  3259                           
  3260                           ; BSR set to: 0
  3261  000C48  C01B  F074         	movff	___lldiv@quotient,?___lldiv
  3262  000C4C  C01C  F075         	movff	___lldiv@quotient+1,?___lldiv+1
  3263  000C50  C01D  F076         	movff	___lldiv@quotient+2,?___lldiv+2
  3264  000C54  C01E  F077         	movff	___lldiv@quotient+3,?___lldiv+3
  3265                           
  3266                           ; BSR set to: 0
  3267  000C58  0012               	return		;funcret
  3268  000C5A                     __end_of___lldiv:
  3269                           	opt stack 0
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           intcon	equ	0xFF2
  3277                           intcon2	equ	0xFF1
  3278                           intcon3	equ	0xFF0
  3279                           indf0	equ	0xFEF
  3280                           postinc0	equ	0xFEE
  3281                           fsr0h	equ	0xFEA
  3282                           fsr0l	equ	0xFE9
  3283                           wreg	equ	0xFE8
  3284                           postdec1	equ	0xFE5
  3285                           fsr1l	equ	0xFE1
  3286                           indf2	equ	0xFDF
  3287                           postinc2	equ	0xFDE
  3288                           postdec2	equ	0xFDD
  3289                           fsr2h	equ	0xFDA
  3290                           fsr2l	equ	0xFD9
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function _TensaoBateria *****************
  3294 ;; Defined at:
  3295 ;;		line 77 in file "Fuel_Gauge.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;		None
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;		None
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3309 ;;      Params:         0       0       0       0       0       0       0       0       0
  3310 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3312 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3313 ;;Total ram usage:        0 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    2
  3316 ;; This function calls:
  3317 ;;		_ADCRead
  3318 ;;		___lmul
  3319 ;; This function is called by:
  3320 ;;		_Combustivel
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text18
  3325  0011A0                     __ptext18:
  3326                           	opt stack 0
  3327  0011A0                     _TensaoBateria:
  3328                           	opt stack 27
  3329                           
  3330                           ;Fuel_Gauge.c: 78: ADCON0bits.CHS = 1 ;
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;incstack = 0
  3334  0011A0  50C2               	movf	4034,w,c	;volatile
  3335  0011A2  0BC3               	andlw	-61
  3336  0011A4  0904               	iorlw	4
  3337  0011A6  6EC2               	movwf	4034,c	;volatile
  3338                           
  3339                           ;Fuel_Gauge.c: 79: ADCRead();
  3340  0011A8  ECF1  F008         	call	_ADCRead	;wreg free
  3341                           
  3342                           ;Fuel_Gauge.c: 82: porcentagemTensao = 333 * valorADC;
  3343  0011AC  C038  F00F         	movff	_valorADC,___lmul@multiplier
  3344  0011B0  C039  F010         	movff	_valorADC+1,___lmul@multiplier+1
  3345  0011B4  C03A  F011         	movff	_valorADC+2,___lmul@multiplier+2
  3346  0011B8  C03B  F012         	movff	_valorADC+3,___lmul@multiplier+3
  3347  0011BC  0E4D               	movlw	77
  3348  0011BE  6E13               	movwf	___lmul@multiplicand,c
  3349  0011C0  0E01               	movlw	1
  3350  0011C2  6E14               	movwf	___lmul@multiplicand+1,c
  3351  0011C4  0E00               	movlw	0
  3352  0011C6  6E15               	movwf	___lmul@multiplicand+2,c
  3353  0011C8  0E00               	movlw	0
  3354  0011CA  6E16               	movwf	___lmul@multiplicand+3,c
  3355  0011CC  EC0E  F008         	call	___lmul	;wreg free
  3356  0011D0  C00F  F020         	movff	?___lmul,_porcentagemTensao
  3357  0011D4  C010  F021         	movff	?___lmul+1,_porcentagemTensao+1
  3358  0011D8  C011  F022         	movff	?___lmul+2,_porcentagemTensao+2
  3359  0011DC  C012  F023         	movff	?___lmul+3,_porcentagemTensao+3
  3360  0011E0  0012               	return		;funcret
  3361  0011E2                     __end_of_TensaoBateria:
  3362                           	opt stack 0
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           intcon	equ	0xFF2
  3370                           intcon2	equ	0xFF1
  3371                           intcon3	equ	0xFF0
  3372                           indf0	equ	0xFEF
  3373                           postinc0	equ	0xFEE
  3374                           fsr0h	equ	0xFEA
  3375                           fsr0l	equ	0xFE9
  3376                           wreg	equ	0xFE8
  3377                           postdec1	equ	0xFE5
  3378                           fsr1l	equ	0xFE1
  3379                           indf2	equ	0xFDF
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function ___lmul *****************
  3387 ;; Defined at:
  3388 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  multiplier      4   14[COMRAM] unsigned long 
  3391 ;;  multiplicand    4   18[COMRAM] unsigned long 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  product         4   22[COMRAM] unsigned long 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  4   14[COMRAM] unsigned long 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3403 ;;      Params:         8       0       0       0       0       0       0       0       0
  3404 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3406 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3407 ;;Total ram usage:       12 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    1
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_TensaoBateria
  3414 ;;		_ValorCombustivel
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text19
  3419  00101C                     __ptext19:
  3420                           	opt stack 0
  3421  00101C                     ___lmul:
  3422                           	opt stack 27
  3423                           
  3424                           ;incstack = 0
  3425  00101C  0E00               	movlw	0
  3426  00101E  6E17               	movwf	___lmul@product,c
  3427  001020  0E00               	movlw	0
  3428  001022  6E18               	movwf	___lmul@product+1,c
  3429  001024  0E00               	movlw	0
  3430  001026  6E19               	movwf	___lmul@product+2,c
  3431  001028  0E00               	movlw	0
  3432  00102A  6E1A               	movwf	___lmul@product+3,c
  3433  00102C                     l1753:
  3434  00102C  A00F               	btfss	___lmul@multiplier,0,c
  3435  00102E  D008               	goto	l1757
  3436  001030  5013               	movf	___lmul@multiplicand,w,c
  3437  001032  2617               	addwf	___lmul@product,f,c
  3438  001034  5014               	movf	___lmul@multiplicand+1,w,c
  3439  001036  2218               	addwfc	___lmul@product+1,f,c
  3440  001038  5015               	movf	___lmul@multiplicand+2,w,c
  3441  00103A  2219               	addwfc	___lmul@product+2,f,c
  3442  00103C  5016               	movf	___lmul@multiplicand+3,w,c
  3443  00103E  221A               	addwfc	___lmul@product+3,f,c
  3444  001040                     l1757:
  3445  001040  90D8               	bcf	status,0,c
  3446  001042  3613               	rlcf	___lmul@multiplicand,f,c
  3447  001044  3614               	rlcf	___lmul@multiplicand+1,f,c
  3448  001046  3615               	rlcf	___lmul@multiplicand+2,f,c
  3449  001048  3616               	rlcf	___lmul@multiplicand+3,f,c
  3450  00104A  90D8               	bcf	status,0,c
  3451  00104C  3212               	rrcf	___lmul@multiplier+3,f,c
  3452  00104E  3211               	rrcf	___lmul@multiplier+2,f,c
  3453  001050  3210               	rrcf	___lmul@multiplier+1,f,c
  3454  001052  320F               	rrcf	___lmul@multiplier,f,c
  3455  001054  500F               	movf	___lmul@multiplier,w,c
  3456  001056  1010               	iorwf	___lmul@multiplier+1,w,c
  3457  001058  1011               	iorwf	___lmul@multiplier+2,w,c
  3458  00105A  1012               	iorwf	___lmul@multiplier+3,w,c
  3459  00105C  A4D8               	btfss	status,2,c
  3460  00105E  D7E6               	goto	l1753
  3461  001060  C017  F00F         	movff	___lmul@product,?___lmul
  3462  001064  C018  F010         	movff	___lmul@product+1,?___lmul+1
  3463  001068  C019  F011         	movff	___lmul@product+2,?___lmul+2
  3464  00106C  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  3465  001070  0012               	return		;funcret
  3466  001072                     __end_of___lmul:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           intcon2	equ	0xFF1
  3476                           intcon3	equ	0xFF0
  3477                           indf0	equ	0xFEF
  3478                           postinc0	equ	0xFEE
  3479                           fsr0h	equ	0xFEA
  3480                           fsr0l	equ	0xFE9
  3481                           wreg	equ	0xFE8
  3482                           postdec1	equ	0xFE5
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _ADCRead *****************
  3492 ;; Defined at:
  3493 ;;		line 15 in file "ADC.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3507 ;;      Params:         0       0       0       0       0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3509 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3510 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3511 ;;Total ram usage:        2 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    1
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_TensaoBateria
  3518 ;;		_ValorCombustivel
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text20
  3523  0011E2                     __ptext20:
  3524                           	opt stack 0
  3525  0011E2                     _ADCRead:
  3526                           	opt stack 27
  3527                           
  3528                           ;ADC.c: 17: ADCON0bits.GO = 1;
  3529                           
  3530                           ;incstack = 0
  3531  0011E2  82C2               	bsf	4034,1,c	;volatile
  3532                           
  3533                           ;ADC.c: 18: _delay((unsigned long)((10)*(48000000/4000.0)));
  3534  0011E4  0E9C               	movlw	156
  3535  0011E6  6E0F               	movwf	??_ADCRead& (0+255),c
  3536  0011E8  0ED7               	movlw	215
  3537  0011EA                     u1927:
  3538  0011EA  2EE8               	decfsz	wreg,f,c
  3539  0011EC  D7FE               	bra	u1927
  3540  0011EE  2E0F               	decfsz	??_ADCRead& (0+255),f,c
  3541  0011F0  D7FC               	bra	u1927
  3542  0011F2  F000               	nop	
  3543                           
  3544                           ;ADC.c: 19: if(ADCON0bits.GO_DONE == 0)
  3545  0011F4  B2C2               	btfsc	4034,1,c	;volatile
  3546  0011F6  0012               	return	
  3547                           
  3548                           ;ADC.c: 20: {
  3549                           ;ADC.c: 21: valorADC = (ADRESH<<8)+ADRESL;
  3550  0011F8  50C3               	movf	4035,w,c	;volatile
  3551  0011FA  CFC4 F00F          	movff	4036,??_ADCRead	;volatile
  3552  0011FE  6A10               	clrf	(??_ADCRead+1)& (0+255),c
  3553  001200  C00F  F010         	movff	??_ADCRead,??_ADCRead+1
  3554  001204  6A0F               	clrf	??_ADCRead,c
  3555  001206  260F               	addwf	??_ADCRead,f,c
  3556  001208  0E00               	movlw	0
  3557  00120A  2210               	addwfc	??_ADCRead+1,f,c
  3558  00120C  C00F  F038         	movff	??_ADCRead,_valorADC
  3559  001210  C010  F039         	movff	??_ADCRead+1,_valorADC+1
  3560  001214  0E00               	movlw	0
  3561  001216  BE39               	btfsc	_valorADC+1,7,c
  3562  001218  0EFF               	movlw	-1
  3563  00121A  6E3A               	movwf	_valorADC+2,c
  3564  00121C  6E3B               	movwf	_valorADC+3,c
  3565  00121E  0012               	return	
  3566  001220                     __end_of_ADCRead:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           intcon2	equ	0xFF1
  3576                           intcon3	equ	0xFF0
  3577                           indf0	equ	0xFEF
  3578                           postinc0	equ	0xFEE
  3579                           fsr0h	equ	0xFEA
  3580                           fsr0l	equ	0xFE9
  3581                           wreg	equ	0xFE8
  3582                           postdec1	equ	0xFE5
  3583                           fsr1l	equ	0xFE1
  3584                           indf2	equ	0xFDF
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _isr *****************
  3592 ;; Defined at:
  3593 ;;		line 21 in file "main.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3607 ;;      Params:         0       0       0       0       0       0       0       0       0
  3608 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3609 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3610 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3611 ;;Total ram usage:       14 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		Interrupt level 2
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	intcode
  3621  000008                     __pintcode:
  3622                           	opt stack 0
  3623  000008                     _isr:
  3624                           	opt stack 26
  3625                           
  3626                           ;incstack = 0
  3627  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3628  00000A  ED75  F005         	call	int_func,f	;refresh shadow registers
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           intcon	equ	0xFF2
  3636                           intcon2	equ	0xFF1
  3637                           intcon3	equ	0xFF0
  3638                           indf0	equ	0xFEF
  3639                           postinc0	equ	0xFEE
  3640                           fsr0h	equ	0xFEA
  3641                           fsr0l	equ	0xFE9
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           fsr1l	equ	0xFE1
  3645                           indf2	equ	0xFDF
  3646                           postinc2	equ	0xFDE
  3647                           postdec2	equ	0xFDD
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652                           	psect	intcode_body
  3653  000AEA                     __pintcode_body:
  3654                           	opt stack 26
  3655  000AEA                     int_func:
  3656                           	opt stack 26
  3657  000AEA  0006               	pop		; remove dummy address from shadow register refresh
  3658  000AEC  CFFA F001          	movff	pclath,??_isr
  3659  000AF0  CFFB F002          	movff	pclatu,??_isr+1
  3660  000AF4  CFE9 F003          	movff	fsr0l,??_isr+2
  3661  000AF8  CFEA F004          	movff	fsr0h,??_isr+3
  3662  000AFC  CFE1 F005          	movff	fsr1l,??_isr+4
  3663  000B00  CFE2 F006          	movff	fsr1h,??_isr+5
  3664  000B04  CFD9 F007          	movff	fsr2l,??_isr+6
  3665  000B08  CFDA F008          	movff	fsr2h,??_isr+7
  3666  000B0C  CFF3 F009          	movff	prodl,??_isr+8
  3667  000B10  CFF4 F00A          	movff	prodh,??_isr+9
  3668  000B14  CFF6 F00B          	movff	tblptrl,??_isr+10
  3669  000B18  CFF7 F00C          	movff	tblptrh,??_isr+11
  3670  000B1C  CFF8 F00D          	movff	tblptru,??_isr+12
  3671  000B20  CFF5 F00E          	movff	tablat,??_isr+13
  3672                           
  3673                           ;main.c: 22: if ((PIR1bits.CCP1IF) && (PIE1bits.CCP1IE)){
  3674  000B24  B49E               	btfsc	3998,2,c	;volatile
  3675  000B26  A49D               	btfss	3997,2,c	;volatile
  3676  000B28  D022               	goto	i2l326
  3677                           
  3678                           ;main.c: 23: bordaParcial++;
  3679  000B2A  4A28               	infsnz	_bordaParcial,f,c
  3680  000B2C  2A29               	incf	_bordaParcial+1,f,c
  3681                           
  3682                           ;main.c: 24: bordaTotal++;
  3683  000B2E  4A2A               	infsnz	_bordaTotal,f,c
  3684  000B30  2A2B               	incf	_bordaTotal+1,f,c
  3685                           
  3686                           ;main.c: 25: if (bordaParcial == 500){
  3687  000B32  0EF4               	movlw	244
  3688  000B34  1828               	xorwf	_bordaParcial,w,c
  3689  000B36  E10B               	bnz	i2l1721
  3690  000B38  0429               	decf	_bordaParcial+1,w,c
  3691  000B3A  A4D8               	btfss	status,2,c
  3692  000B3C  D008               	goto	i2l1721
  3693                           
  3694                           ;main.c: 26: atualizaOdoParcial = 1;
  3695  000B3E  0E00               	movlw	0
  3696  000B40  6E25               	movwf	_atualizaOdoParcial+1,c
  3697  000B42  0E01               	movlw	1
  3698  000B44  6E24               	movwf	_atualizaOdoParcial,c
  3699                           
  3700                           ;main.c: 27: bordaParcial = 0;
  3701  000B46  0E00               	movlw	0
  3702  000B48  6E29               	movwf	_bordaParcial+1,c
  3703  000B4A  0E00               	movlw	0
  3704  000B4C  6E28               	movwf	_bordaParcial,c
  3705  000B4E                     i2l1721:
  3706                           
  3707                           ;main.c: 28: }
  3708                           ;main.c: 29: if (bordaTotal == 5000){
  3709  000B4E  0E88               	movlw	136
  3710  000B50  182A               	xorwf	_bordaTotal,w,c
  3711  000B52  E10C               	bnz	i2l1725
  3712  000B54  0E13               	movlw	19
  3713  000B56  182B               	xorwf	_bordaTotal+1,w,c
  3714  000B58  A4D8               	btfss	status,2,c
  3715  000B5A  D008               	goto	i2l1725
  3716                           
  3717                           ;main.c: 30: atualizaOdoTotal = 1;
  3718  000B5C  0E00               	movlw	0
  3719  000B5E  6E27               	movwf	_atualizaOdoTotal+1,c
  3720  000B60  0E01               	movlw	1
  3721  000B62  6E26               	movwf	_atualizaOdoTotal,c
  3722                           
  3723                           ;main.c: 31: bordaTotal = 0;
  3724  000B64  0E00               	movlw	0
  3725  000B66  6E2B               	movwf	_bordaTotal+1,c
  3726  000B68  0E00               	movlw	0
  3727  000B6A  6E2A               	movwf	_bordaTotal,c
  3728  000B6C                     i2l1725:
  3729                           
  3730                           ;main.c: 32: }
  3731                           ;main.c: 33: PIR1bits.CCP1IF = 0;
  3732  000B6C  949E               	bcf	3998,2,c	;volatile
  3733  000B6E                     i2l326:
  3734  000B6E  C00E  FFF5         	movff	??_isr+13,tablat
  3735  000B72  C00D  FFF8         	movff	??_isr+12,tblptru
  3736  000B76  C00C  FFF7         	movff	??_isr+11,tblptrh
  3737  000B7A  C00B  FFF6         	movff	??_isr+10,tblptrl
  3738  000B7E  C00A  FFF4         	movff	??_isr+9,prodh
  3739  000B82  C009  FFF3         	movff	??_isr+8,prodl
  3740  000B86  C008  FFDA         	movff	??_isr+7,fsr2h
  3741  000B8A  C007  FFD9         	movff	??_isr+6,fsr2l
  3742  000B8E  C006  FFE2         	movff	??_isr+5,fsr1h
  3743  000B92  C005  FFE1         	movff	??_isr+4,fsr1l
  3744  000B96  C004  FFEA         	movff	??_isr+3,fsr0h
  3745  000B9A  C003  FFE9         	movff	??_isr+2,fsr0l
  3746  000B9E  C002  FFFB         	movff	??_isr+1,pclatu
  3747  000BA2  C001  FFFA         	movff	??_isr,pclath
  3748  000BA6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3749  000BA8  0011               	retfie		f
  3750  000BAA                     __end_of_isr:
  3751                           	opt stack 0
  3752                           pclatu	equ	0xFFB
  3753                           pclath	equ	0xFFA
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           intcon2	equ	0xFF1
  3762                           intcon3	equ	0xFF0
  3763                           indf0	equ	0xFEF
  3764                           postinc0	equ	0xFEE
  3765                           fsr0h	equ	0xFEA
  3766                           fsr0l	equ	0xFE9
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           fsr1h	equ	0xFE2
  3770                           fsr1l	equ	0xFE1
  3771                           indf2	equ	0xFDF
  3772                           postinc2	equ	0xFDE
  3773                           postdec2	equ	0xFDD
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           pclatu	equ	0xFFB
  3778                           pclath	equ	0xFFA
  3779                           tblptru	equ	0xFF8
  3780                           tblptrh	equ	0xFF7
  3781                           tblptrl	equ	0xFF6
  3782                           tablat	equ	0xFF5
  3783                           prodh	equ	0xFF4
  3784                           prodl	equ	0xFF3
  3785                           intcon	equ	0xFF2
  3786                           intcon2	equ	0xFF1
  3787                           intcon3	equ	0xFF0
  3788                           indf0	equ	0xFEF
  3789                           postinc0	equ	0xFEE
  3790                           fsr0h	equ	0xFEA
  3791                           fsr0l	equ	0xFE9
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1h	equ	0xFE2
  3795                           fsr1l	equ	0xFE1
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803                           	psect	rparam
  3804  0000                     pclatu	equ	0xFFB
  3805                           pclath	equ	0xFFA
  3806                           tblptru	equ	0xFF8
  3807                           tblptrh	equ	0xFF7
  3808                           tblptrl	equ	0xFF6
  3809                           tablat	equ	0xFF5
  3810                           prodh	equ	0xFF4
  3811                           prodl	equ	0xFF3
  3812                           intcon	equ	0xFF2
  3813                           intcon2	equ	0xFF1
  3814                           intcon3	equ	0xFF0
  3815                           indf0	equ	0xFEF
  3816                           postinc0	equ	0xFEE
  3817                           fsr0h	equ	0xFEA
  3818                           fsr0l	equ	0xFE9
  3819                           wreg	equ	0xFE8
  3820                           postdec1	equ	0xFE5
  3821                           fsr1h	equ	0xFE2
  3822                           fsr1l	equ	0xFE1
  3823                           indf2	equ	0xFDF
  3824                           postinc2	equ	0xFDE
  3825                           postdec2	equ	0xFDD
  3826                           fsr2h	equ	0xFDA
  3827                           fsr2l	equ	0xFD9
  3828                           status	equ	0xFD8
  3829                           
  3830                           	psect	temp
  3831  000051                     btemp:
  3832                           	opt stack 0
  3833  000051                     	ds	1
  3834  0000                     int$flags	set	btemp
  3835                           pclatu	equ	0xFFB
  3836                           pclath	equ	0xFFA
  3837                           tblptru	equ	0xFF8
  3838                           tblptrh	equ	0xFF7
  3839                           tblptrl	equ	0xFF6
  3840                           tablat	equ	0xFF5
  3841                           prodh	equ	0xFF4
  3842                           prodl	equ	0xFF3
  3843                           intcon	equ	0xFF2
  3844                           intcon2	equ	0xFF1
  3845                           intcon3	equ	0xFF0
  3846                           indf0	equ	0xFEF
  3847                           postinc0	equ	0xFEE
  3848                           fsr0h	equ	0xFEA
  3849                           fsr0l	equ	0xFE9
  3850                           wreg	equ	0xFE8
  3851                           postdec1	equ	0xFE5
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        21
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      80
    BANK0           160     10      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    EscreveFraseRamLCD@buffer	PTR unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[3]), STR_1(CODE[3]), odoParcial(COMRAM[7]), odoTotal(COMRAM[7]), 
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _odometroTotal->_PosicaoCursorLCD
    _odometroParcial->_PosicaoCursorLCD
    _display->_PosicaoCursorLCD
    _PosicaoCursorLCD->_EnderecoCursor
    _EnderecoCursor->_Delay
    _EscreveFraseRamLCD->_EscreveCaractereLCD
    _EscreveCaractereLCD->_Delay
    _ConfiguraLCD->_EscreveComandoLCD
    _EscreveComandoLCD->_Delay
    _ValorCombustivel->___lldiv
    ___lldiv->___lmul
    _TensaoBateria->___lmul

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Combustivel
    _ValorCombustivel->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6496
                        _Combustivel
                       _ConfiguraLCD
                        _Init_EEPROM
                            _display
                             _initHw
                      _initInterrupt
                    _odometroParcial
                      _odometroTotal
 ---------------------------------------------------------------------------------
 (1) _odometroTotal                                        0     0      0    1450
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (1) _odometroParcial                                      2     2      0    1522
                                             20 COMRAM     2     2      0
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initHw                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              0     0      0    1450
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _PosicaoCursorLCD                                     3     2      1     777
                                             17 COMRAM     3     2      1
                     _EnderecoCursor
 ---------------------------------------------------------------------------------
 (3) _EnderecoCursor                                       1     1      0     165
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _EscreveFraseRamLCD                                   2     0      2     673
                                             17 COMRAM     2     0      2
                _EscreveCaractereLCD
 ---------------------------------------------------------------------------------
 (3) _EscreveCaractereLCD                                  1     1      0     180
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _Init_EEPROM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0     285
                                             17 COMRAM     1     1      0
                              _Delay
                  _EscreveComandoLCD
 ---------------------------------------------------------------------------------
 (2) _EscreveComandoLCD                                    1     1      0     225
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     2      0      60
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Combustivel                                          2     2      0    1789
                                              8 BANK0      2     2      0
                      _TensaoBateria
                   _ValorCombustivel
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     494
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ValorCombustivel                                     0     0      0     845
                            _ADCRead
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     395
                                             26 COMRAM     5     5      0
                                              0 BANK0      8     0      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _TensaoBateria                                        0     0      0     450
                            _ADCRead
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     450
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                              2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Combustivel
     _TensaoBateria
       _ADCRead
       ___lmul
     _ValorCombustivel
       _ADCRead
       ___lldiv
         ___lmul (ARG)
       ___lmul
     ___lwdiv
   _ConfiguraLCD
     _Delay
     _EscreveComandoLCD
       _Delay
   _Init_EEPROM
   _display
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _initHw
   _initInterrupt
   _odometroParcial
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _odometroTotal
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      1E       5       18.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6E      20        0.0%
DATA                 0      0      6E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Nov 25 22:15:43 2019

                          l21 1268                            l31 0D12                            l40 0D48  
                          l41 0D50                            l33 0D1C                            l42 0D52  
                          l19 125A                            l43 0D5A                            l35 0D26  
                          l51 0F04                            l44 0D5C                            l36 0D28  
                          l60 0F3A                            l37 0D3C                            l29 0D08  
                          l61 0F42                            l53 0F0E                            l38 0D3E  
                          l62 0F44                            l70 0E90                            l39 0D46  
                          l63 0F4C                            l55 0F18                            l80 0E20  
                          l64 0F4E                            l56 0F1A                            l57 0F2E  
                          l90 0E5E                            l82 0E2A                            l58 0F30  
                          l91 0E60                            l59 0F38                            l92 0E68  
                          l84 0E34                            l93 0E6A                            l94 0E72  
                          l86 0E3E                            l95 0E74                            l87 0E40  
                          l88 0E54                            l89 0E56                           l203 0ADA  
                         l392 09E6                           l801 0C48                           l854 110C  
                         _isr 0008               __end_of_ADCRead 1220                           prod 000FF3  
                         wreg 000FE8                          l1203 0D14                          l1131 0E36  
                        l1123 0E22                          l1207 0D1E                          l1127 0E2C  
                        l1081 126E                          l1073 1260                          l2211 0952  
                        l1067 1252                          l1235 0D7E                          l1091 0F06  
                        l2133 0BD4                          l2205 0936                          l2135 0BE2  
                        l2223 098A                          l1095 0F10                          l2145 0C38  
                        l2137 0BE8                          l2217 096E                          l2243 09E0  
                        l2235 09C2                          l2163 0808                          l2229 09A6  
                        l2165 080C                          l2247 09EE                          l1199 0D0A  
                        l2193 08FE                          l2177 0820                          l2169 0814  
                        l2265 1286                          l2179 0824                          l1803 0EC6  
                        l1811 0EEC                          l2199 091A                          l1815 1074  
                        l1807 0ECC                          l1903 0FA2                          l1753 102C  
                        l1809 0EE8                          l1819 109C                          l1757 1040  
                        l1845 10DA                          l1847 10E2                          l1791 0E9C  
                        l1943 0A72                          l1857 1102                          l1849 10E6  
                        l1795 0EAA                          l1947 0A7A                          l1955 0A96  
                        l1799 0EB8                          l1969 0AC2                          ?_isr 0001  
                        STR_1 0801                          STR_2 0801                          u1070 1094  
                        u1080 10BC                          u1077 108A                          _LATA 000F89  
                        _LATB 000F8A                          u1087 10B2                          _LATD 000F8C  
                        u1700 090A                          u1800 0996                          u1720 0926  
                        u1740 0942                          _IPR1 000F9F                          _IPR2 000FA2  
                        _PIE1 000F9D                          u1760 095E                          _PIE2 000FA0  
                        u1907 0C98                          u1780 097A                          u1917 0CB4  
                        u1927 11EA                          u1880 0A08                          u1886 0A0A  
                        u1897 0C7C                          _PIR1 000F9E                          _PIR2 000FA1  
                        _RCON 000FD0                 ??_Init_EEPROM 000F                          _main 1272  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0051  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
                ___param_bank 000000    __end_of_EscreveFraseRamLCD 10C4                         ??_isr 0001  
         __end_of_Combustivel 0A26                         ?_main 0001                         _EEADR 000FA9  
             __end_of___lldiv 0C5A                         _T0CON 000FD5                         _T1CON 000FCD  
             __end_of___lwdiv 1116                         i2l326 0B6E                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                         _Delay 124E  
         ___lmul@multiplicand 0013               __end_of_display 101C          EscreveComandoLCD@cmd 0011  
                       pclath 000FFA                         tablat 000FF5                         status 000FD8  
            ?_odometroParcial 0001           __end_of_Init_EEPROM 12B0               __initialization 1116  
      __size_of_initInterrupt 002E                  __end_of_main 1294                     ??_ADCRead 000F  
                      ??_main 0020          __end_of_ConfiguraLCD 0CF8                 __activetblptr 000002  
           _EscreveComandoLCD 0CF8         __end_of_TensaoBateria 11E2                        ?_Delay 0001  
          ?_EscreveComandoLCD 0001                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        _ADRESH 000FC4                        _ADRESL 000FC3  
                      _EEDATA 000FA8                        _EECON1 000FA6                        _EECON2 000FA7  
                      i2l1721 0B4E                        i2l1725 0B6C                        _INTCON 000FF2  
         ??_EscreveComandoLCD 0011            _atualizaOdoParcial 0024              _tempoCombustivel 002E  
                 _Combustivel 0806                        ___lmul 101C             ?_PosicaoCursorLCD 0012  
                   ??___lldiv 001B                     ??___lwdiv 0013  __size_of_EscreveCaractereLCD 0072  
          ??_PosicaoCursorLCD 0013                        _initHw 115C                        clear_0 113C  
                      clear_1 1148     __end_of_EscreveComandoLCD 0D84                     ??_display 0015  
                __pdataCOMRAM 003C                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8       __size_of_EnderecoCursor 006A  
               _initInterrupt 1220                   _Init_EEPROM 12AA                    __accesstop 0060  
     __end_of__initialization 114E                 ___rparam_used 000001                 __end_of_Delay 1272  
           ?_ValorCombustivel 0001                __pcstackCOMRAM 0001            ??_ValorCombustivel 0020  
                     ??_Delay 000F                ?_initInterrupt 0001                    __pbssBANK0 0060  
                     ?___lmul 000F         __size_of_ConfiguraLCD 009E                       _CCP1CON 000FBD  
                     ?_initHw 0001                ___lmul@product 0017                       _ADCRead 11E2  
  __size_of_EscreveComandoLCD 008C                    _bordaTotal 002A                       _INTCON2 000FF1  
                     _INTCON3 000FF0            _EscreveFraseRamLCD 1072        __size_of_odometroTotal 0066  
         ?_EscreveFraseRamLCD 0012                  _ConfiguraLCD 0C5A       odometroParcial@position 0015  
                     __Hparam 0000                       __Lparam 0000                    _odoParcial 0043  
             __size_of___lmul 0056                       ___lldiv 0BAA                       ___lwdiv 10C4  
        ??_EscreveFraseRamLCD 0014                  __psmallconst 0800               __size_of_initHw 0044  
                     __pcinit 1116                  _bordaParcial 0028                       __ramtop 0800  
                     __ptext0 1272                       __ptext1 0F5C                       __ptext2 0A26  
                     __ptext3 1220                       __ptext4 115C                       __ptext5 0FC2  
                     __ptext6 0E82                       __ptext7 0EF2                       __ptext8 1072  
                     __ptext9 0E10                       _display 0FC2          odometroParcial@trava 0016  
             ??_initInterrupt 000F                  __size_of_isr 0BA2                     _T3CONbits 000FB1  
              _EnderecoCursor 0EF2                       _reserva 0036                       _numeroC 0034  
                   Delay@Cnt1 000F                     Delay@Cnt2 0010                __pintcode_body 0AEA  
         _EscreveCaractereLCD 0E10          end_of_initialization 114E                 __Lmediumconst 0000  
                     int_func 0AEA               ___lldiv@divisor 0078               ___lldiv@counter 001F  
                ?_Combustivel 0001                 _odometroTotal 0F5C                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
        ?_EscreveCaractereLCD 0001      __size_of_odometroParcial 00C4   PosicaoCursorLCD@EnderecoLCD 0014  
                   _PORTCbits 000F82                     _PORTDbits 000F83                     _PORTEbits 000F84  
      __end_of_EnderecoCursor 0F5C                     _TRISCbits 000F94                     _TRISDbits 000F95  
   __size_of_PosicaoCursorLCD 0070                  ?_Init_EEPROM 0001        __size_of_TensaoBateria 0042  
              ?_odometroTotal 0001         ??_EscreveCaractereLCD 0011                __end_of___lmul 1072  
               __pidataCOMRAM 1294              _atualizaOdoTotal 0026                __end_of_initHw 11A0  
             ?_EnderecoCursor 0001           start_initialization 1116     __size_of_ValorCombustivel 008C  
                 __end_of_isr 0BAA      EscreveFraseRamLCD@buffer 0012                      ??___lmul 0017  
                    ??_initHw 000F                      ?_ADCRead 0001             ??_odometroParcial 0015  
                 __pbssCOMRAM 0020                 __pcstackBANK0 0074                 _TensaoBateria 11A0  
            odometroParcial@i 0037               ??_odometroTotal 0015              ___lwdiv@dividend 000F  
                   __pintcode 0008                     _combArray 0060                      ?___lldiv 0074  
                    ?___lwdiv 000F          __size_of_Combustivel 0220                 _valorADCMedia 0030  
      EscreveInteiroLCD@F3948 003C                      ?_display 0001                   __smallconst 0800  
              ?_TensaoBateria 0001                __size_of_Delay 0024              _PosicaoCursorLCD 0E82  
            ___lwdiv@quotient 0013        EnderecoCursor@endereco 0011          __size_of_Init_EEPROM 0006  
                    _PIE1bits 000F9D                      _PIR1bits 000F9E       EscreveCaractereLCD@data 0011  
 __size_of_EscreveFraseRamLCD 0052              __size_of_ADCRead 003E                    _ADCON0bits 000FC2  
            _ValorCombustivel 0D84         __end_of_initInterrupt 124E                _primeiroFiltro 0035  
           ___lmul@multiplier 000F                     copy_data0 112A                    _EECON1bits 000FA6  
                    __Hrparam 0000             _porcentagemTensao 0020                      __Lrparam 0000  
            ??_EnderecoCursor 0011              __size_of___lldiv 00B0              __size_of___lwdiv 0052  
             ??_TensaoBateria 001B              __size_of_display 005A               ___lwdiv@divisor 0011  
             ___lwdiv@counter 0015                      __ptext10 12AA                      __ptext11 0C5A  
                    __ptext20 11E2                      __ptext12 0CF8                      __ptext13 124E  
                    __ptext14 0806                      __ptext15 10C4                      __ptext16 0D84  
                    __ptext17 0BAA                      __ptext18 11A0                      __ptext19 101C  
                    _countLed 002C                      _odoTotal 004A                 __size_of_main 0022  
 __end_of_EscreveCaractereLCD 0E82                      _valorADC 0038               _odometroParcial 0A26  
                    int$flags 0051                    _INTCONbits 000FF2                      intlevel2 0000  
            ___lldiv@dividend 0074                 ?_ConfiguraLCD 0001      __end_of_PosicaoCursorLCD 0EF2  
      PosicaoCursorLCD@coluna 0012                   _valorTensao 0032              ___lldiv@quotient 001B  
       PosicaoCursorLCD@linha 0013                ??_ConfiguraLCD 0012       __end_of_odometroParcial 0AEA  
    __end_of_ValorCombustivel 0E10                 ??_Combustivel 007C         __end_of_odometroTotal 0FC2  
