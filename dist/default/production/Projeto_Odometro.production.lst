

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Nov 26 22:06:15 2019

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.40
    45                           ; Generated 01/12/2016 GMT
    46                           ; 
    47                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  00137A                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for EscreveInteiroLCD@F3948
    84  00137A  30                 	db	48
    85  00137B  30                 	db	48
    86  00137C  30                 	db	48
    87  00137D  30                 	db	48
    88  00137E  30                 	db	48
    89  00137F  30                 	db	48
    90  001380  00                 	db	0
    91                           
    92                           ;initializer for _odoParcial
    93  001381  30                 	db	48
    94  001382  30                 	db	48
    95  001383  30                 	db	48
    96  001384  30                 	db	48
    97  001385  2C                 	db	44
    98  001386  30                 	db	48
    99  001387  00                 	db	0
   100                           
   101                           ;initializer for odometroTotal@odoTotal
   102  001388  30                 	db	48
   103  001389  30                 	db	48
   104  00138A  30                 	db	48
   105  00138B  30                 	db	48
   106  00138C  30                 	db	48
   107  00138D  30                 	db	48
   108  00138E  00                 	db	0
   109                           
   110                           	psect	idataBANK0
   111  00139E                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _odoTotal
   115  00139E  30                 	db	48
   116  00139F  30                 	db	48
   117  0013A0  30                 	db	48
   118  0013A1  30                 	db	48
   119  0013A2  30                 	db	48
   120  0013A3  30                 	db	48
   121  0013A4  00                 	db	0
   122  0000                     _TMR0	set	4054
   123  0000                     _ADCON0	set	4034
   124  0000                     _ADCON0bits	set	4034
   125  0000                     _ADCON1	set	4033
   126  0000                     _ADCON2	set	4032
   127  0000                     _ADRESH	set	4036
   128  0000                     _ADRESL	set	4035
   129  0000                     _CCP1CON	set	4029
   130  0000                     _EEADR	set	4009
   131  0000                     _EECON1	set	4006
   132  0000                     _EECON1bits	set	4006
   133  0000                     _EECON2	set	4007
   134  0000                     _EEDATA	set	4008
   135  0000                     _INTCON	set	4082
   136  0000                     _INTCON2	set	4081
   137  0000                     _INTCON3	set	4080
   138  0000                     _INTCONbits	set	4082
   139  0000                     _IPR1	set	3999
   140  0000                     _IPR2	set	4002
   141  0000                     _LATA	set	3977
   142  0000                     _LATB	set	3978
   143  0000                     _LATD	set	3980
   144  0000                     _PIE1	set	3997
   145  0000                     _PIE1bits	set	3997
   146  0000                     _PIE2	set	4000
   147  0000                     _PIR1	set	3998
   148  0000                     _PIR1bits	set	3998
   149  0000                     _PIR2	set	4001
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTCbits	set	3970
   152  0000                     _PORTDbits	set	3971
   153  0000                     _PORTEbits	set	3972
   154  0000                     _RCON	set	4048
   155  0000                     _T0CON	set	4053
   156  0000                     _T1CON	set	4045
   157  0000                     _T3CONbits	set	4017
   158  0000                     _TRISA	set	3986
   159  0000                     _TRISB	set	3987
   160  0000                     _TRISC	set	3988
   161  0000                     _TRISCbits	set	3988
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISDbits	set	3989
   164  0000                     _TRISE	set	3990
   165  0000                     _T0IF	set	32658
   166                           
   167                           	psect	smallconst
   168  000800                     __psmallconst:
   169                           	opt stack 0
   170  000800  00                 	db	0
   171  000801                     STR_1:
   172  000801  4B                 	db	75	;'K'
   173  000802  6D                 	db	109	;'m'
   174  000803  00                 	db	0
   175  000804  00                 	db	0	; dummy byte at the end
   176  0000                     
   177                           ; #config settings
   178                           
   179                           	psect	cinit
   180  001062                     __pcinit:
   181                           	opt stack 0
   182  001062                     start_initialization:
   183                           	opt stack 0
   184  001062                     __initialization:
   185                           	opt stack 0
   186                           
   187                           ; Initialize objects allocated to BANK0 (7 bytes)
   188                           ; load TBLPTR registers with __pidataBANK0
   189  001062  0E9E               	movlw	low __pidataBANK0
   190  001064  6EF6               	movwf	tblptrl,c
   191  001066  0E13               	movlw	high __pidataBANK0
   192  001068  6EF7               	movwf	tblptrh,c
   193  00106A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   194  00106C  6EF8               	movwf	tblptru,c
   195  00106E  EE00  F07E         	lfsr	0,__pdataBANK0
   196  001072  EE10 F007          	lfsr	1,7
   197  001076                     copy_data0:
   198  001076  0009               	tblrd		*+
   199  001078  CFF5 FFEE          	movff	tablat,postinc0
   200  00107C  50E5               	movf	postdec1,w,c
   201  00107E  50E1               	movf	fsr1l,w,c
   202  001080  E1FA               	bnz	copy_data0
   203                           
   204                           ; Initialize objects allocated to COMRAM (21 bytes)
   205                           ; load TBLPTR registers with __pidataCOMRAM
   206  001082  0E7A               	movlw	low __pidataCOMRAM
   207  001084  6EF6               	movwf	tblptrl,c
   208  001086  0E13               	movlw	high __pidataCOMRAM
   209  001088  6EF7               	movwf	tblptrh,c
   210  00108A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   211  00108C  6EF8               	movwf	tblptru,c
   212  00108E  EE00  F03C         	lfsr	0,__pdataCOMRAM
   213  001092  EE10 F015          	lfsr	1,21
   214  001096                     copy_data1:
   215  001096  0009               	tblrd		*+
   216  001098  CFF5 FFEE          	movff	tablat,postinc0
   217  00109C  50E5               	movf	postdec1,w,c
   218  00109E  50E1               	movf	fsr1l,w,c
   219  0010A0  E1FA               	bnz	copy_data1
   220                           
   221                           ; Clear objects allocated to BANK0 (20 bytes)
   222  0010A2  EE00  F060         	lfsr	0,__pbssBANK0
   223  0010A6  0E14               	movlw	20
   224  0010A8                     clear_0:
   225  0010A8  6AEE               	clrf	postinc0,c
   226  0010AA  06E8               	decf	wreg,f,c
   227  0010AC  E1FD               	bnz	clear_0
   228                           
   229                           ; Clear objects allocated to COMRAM (28 bytes)
   230  0010AE  EE00  F020         	lfsr	0,__pbssCOMRAM
   231  0010B2  0E1C               	movlw	28
   232  0010B4                     clear_1:
   233  0010B4  6AEE               	clrf	postinc0,c
   234  0010B6  06E8               	decf	wreg,f,c
   235  0010B8  E1FD               	bnz	clear_1
   236  0010BA                     end_of_initialization:
   237                           	opt stack 0
   238  0010BA                     __end_of__initialization:
   239                           	opt stack 0
   240  0010BA  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   241  0010BC  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   242  0010BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   243  0010C0  6EF8               	movwf	tblptru,c
   244  0010C2  0100               	movlb	0
   245  0010C4  EFAC  F009         	goto	_main	;jump to C main() function
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           postdec1	equ	0xFE5
   253                           fsr1l	equ	0xFE1
   254                           
   255                           	psect	bssCOMRAM
   256  000020                     __pbssCOMRAM:
   257                           	opt stack 0
   258  000020                     _porcentagemTensao:
   259                           	opt stack 0
   260  000020                     	ds	4
   261  000024                     _atualizaOdoParcial:
   262                           	opt stack 0
   263  000024                     	ds	2
   264  000026                     _atualizaOdoTotal:
   265                           	opt stack 0
   266  000026                     	ds	2
   267  000028                     _bordaParcial:
   268                           	opt stack 0
   269  000028                     	ds	2
   270  00002A                     _bordaTotal:
   271                           	opt stack 0
   272  00002A                     	ds	2
   273  00002C                     _countLed:
   274                           	opt stack 0
   275  00002C                     	ds	2
   276  00002E                     _tempoCombustivel:
   277                           	opt stack 0
   278  00002E                     	ds	2
   279  000030                     _valorADCMedia:
   280                           	opt stack 0
   281  000030                     	ds	2
   282  000032                     _valorTensao:
   283                           	opt stack 0
   284  000032                     	ds	2
   285  000034                     _numeroC:
   286                           	opt stack 0
   287  000034                     	ds	1
   288  000035                     _primeiroFiltro:
   289                           	opt stack 0
   290  000035                     	ds	1
   291  000036                     _reserva:
   292                           	opt stack 0
   293  000036                     	ds	1
   294  000037                     odometroParcial@i:
   295                           	opt stack 0
   296  000037                     	ds	1
   297  000038                     _valorADC:
   298                           	opt stack 0
   299  000038                     	ds	4
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           postdec1	equ	0xFE5
   307                           fsr1l	equ	0xFE1
   308                           
   309                           	psect	dataCOMRAM
   310  00003C                     __pdataCOMRAM:
   311                           	opt stack 0
   312  00003C                     EscreveInteiroLCD@F3948:
   313                           	opt stack 0
   314  00003C                     	ds	7
   315  000043                     _odoParcial:
   316                           	opt stack 0
   317  000043                     	ds	7
   318  00004A                     odometroTotal@odoTotal:
   319                           	opt stack 0
   320  00004A                     	ds	7
   321                           tblptru	equ	0xFF8
   322                           tblptrh	equ	0xFF7
   323                           tblptrl	equ	0xFF6
   324                           tablat	equ	0xFF5
   325                           postinc0	equ	0xFEE
   326                           wreg	equ	0xFE8
   327                           postdec1	equ	0xFE5
   328                           fsr1l	equ	0xFE1
   329                           
   330                           	psect	bssBANK0
   331  000060                     __pbssBANK0:
   332                           	opt stack 0
   333  000060                     _combArray:
   334                           	opt stack 0
   335  000060                     	ds	20
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           postdec1	equ	0xFE5
   343                           fsr1l	equ	0xFE1
   344                           
   345                           	psect	dataBANK0
   346  00007E                     __pdataBANK0:
   347                           	opt stack 0
   348  00007E                     _odoTotal:
   349                           	opt stack 0
   350  00007E                     	ds	7
   351                           tblptru	equ	0xFF8
   352                           tblptrh	equ	0xFF7
   353                           tblptrl	equ	0xFF6
   354                           tablat	equ	0xFF5
   355                           postinc0	equ	0xFEE
   356                           wreg	equ	0xFE8
   357                           postdec1	equ	0xFE5
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	cstackBANK0
   361  000074                     __pcstackBANK0:
   362                           	opt stack 0
   363  000074                     ?___lldiv:
   364                           	opt stack 0
   365  000074                     ___lldiv@dividend:
   366                           	opt stack 0
   367                           
   368                           ; 4 bytes @ 0x0
   369  000074                     	ds	4
   370  000078                     ___lldiv@divisor:
   371                           	opt stack 0
   372                           
   373                           ; 4 bytes @ 0x4
   374  000078                     	ds	4
   375  00007C                     ??_Combustivel:
   376                           
   377                           ; 1 bytes @ 0x8
   378  00007C                     	ds	2
   379                           tblptru	equ	0xFF8
   380                           tblptrh	equ	0xFF7
   381                           tblptrl	equ	0xFF6
   382                           tablat	equ	0xFF5
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           postdec1	equ	0xFE5
   386                           fsr1l	equ	0xFE1
   387                           
   388                           	psect	cstackCOMRAM
   389  000001                     __pcstackCOMRAM:
   390                           	opt stack 0
   391  000001                     ??_isr:
   392  000001                     
   393                           ; 1 bytes @ 0x0
   394  000001                     	ds	14
   395  00000F                     ??_ADCRead:
   396  00000F                     ?___lwdiv:
   397                           	opt stack 0
   398  00000F                     ?___lmul:
   399                           	opt stack 0
   400  00000F                     Delay@Cnt1:
   401                           	opt stack 0
   402  00000F                     EEPROM_ReadByte@MemoryAddress:
   403                           	opt stack 0
   404  00000F                     EEPROM_WriteByte@WriteData:
   405                           	opt stack 0
   406  00000F                     ___lwdiv@dividend:
   407                           	opt stack 0
   408  00000F                     ___lmul@multiplier:
   409                           	opt stack 0
   410                           
   411                           ; 4 bytes @ 0xE
   412  00000F                     	ds	1
   413  000010                     Delay@Cnt2:
   414                           	opt stack 0
   415  000010                     EEPROM_WriteByte@WriteMemoryAddress:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0xF
   419  000010                     	ds	1
   420  000011                     EscreveComandoLCD@cmd:
   421                           	opt stack 0
   422  000011                     EnderecoCursor@endereco:
   423                           	opt stack 0
   424  000011                     EscreveCaractereLCD@data:
   425                           	opt stack 0
   426  000011                     ___lwdiv@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x10
   430  000011                     	ds	1
   431  000012                     ??_ConfiguraLCD:
   432  000012                     PosicaoCursorLCD@coluna:
   433                           	opt stack 0
   434  000012                     EscreveFraseRamLCD@buffer:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x11
   438  000012                     	ds	1
   439  000013                     PosicaoCursorLCD@linha:
   440                           	opt stack 0
   441  000013                     ___lwdiv@quotient:
   442                           	opt stack 0
   443  000013                     ___lmul@multiplicand:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x12
   447  000013                     	ds	1
   448  000014                     PosicaoCursorLCD@EnderecoLCD:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x13
   452  000014                     	ds	1
   453  000015                     odometroParcial@position:
   454                           	opt stack 0
   455  000015                     ___lwdiv@counter:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x14
   459  000015                     	ds	1
   460  000016                     odometroParcial@trava:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x15
   464  000016                     	ds	1
   465  000017                     ___lmul@product:
   466                           	opt stack 0
   467                           
   468                           ; 4 bytes @ 0x16
   469  000017                     	ds	4
   470  00001B                     ___lldiv@quotient:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0x1A
   474  00001B                     	ds	4
   475  00001F                     ___lldiv@counter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x1E
   479  00001F                     	ds	1
   480  000020                     tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           postdec1	equ	0xFE5
   487                           fsr1l	equ	0xFE1
   488                           
   489                           ; 1 bytes @ 0x1F
   490 ;;
   491 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   492 ;;
   493 ;; *************** function _main *****************
   494 ;; Defined at:
   495 ;;		line 51 in file "main.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;		None
   498 ;; Auto vars:     Size  Location     Type
   499 ;;		None
   500 ;; Return value:  Size  Location     Type
   501 ;;                  1    wreg      void 
   502 ;; Registers used:
   503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   509 ;;      Params:         0       0       0       0       0       0       0       0       0
   510 ;;      Locals:         0       0       0       0       0       0       0       0       0
   511 ;;      Temps:          0       0       0       0       0       0       0       0       0
   512 ;;      Totals:         0       0       0       0       0       0       0       0       0
   513 ;;Total ram usage:        0 bytes
   514 ;; Hardware stack levels required when called:    5
   515 ;; This function calls:
   516 ;;		_Combustivel
   517 ;;		_ConfiguraLCD
   518 ;;		_Init_EEPROM
   519 ;;		_display
   520 ;;		_initHw
   521 ;;		_initInterrupt
   522 ;;		_odometroParcial
   523 ;;		_odometroTotal
   524 ;; This function is called by:
   525 ;;		Startup code after reset
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           	psect	text0
   530  001358                     __ptext0:
   531                           	opt stack 0
   532  001358                     _main:
   533                           	opt stack 26
   534                           
   535                           ;main.c: 52: ConfiguraLCD();
   536                           
   537                           ;incstack = 0
   538  001358  ECB0  F006         	call	_ConfiguraLCD	;wreg free
   539                           
   540                           ;main.c: 53: initInterrupt();
   541  00135C  EC70  F009         	call	_initInterrupt	;wreg free
   542                           
   543                           ;main.c: 54: initHw();
   544  001360  EC0E  F009         	call	_initHw	;wreg free
   545                           
   546                           ;main.c: 55: Init_EEPROM();
   547  001364  ECD3  F009         	call	_Init_EEPROM	;wreg free
   548                           
   549                           ;main.c: 56: display();
   550  001368  EC64  F008         	call	_display	;wreg free
   551  00136C                     l2560:
   552                           
   553                           ;main.c: 59: {
   554                           ;main.c: 60: odometroTotal();
   555  00136C  EC13  F005         	call	_odometroTotal	;wreg free
   556                           
   557                           ;main.c: 61: odometroParcial();
   558  001370  ECEE  F005         	call	_odometroParcial	;wreg free
   559                           
   560                           ;main.c: 62: Combustivel();
   561  001374  EC03  F004         	call	_Combustivel	;wreg free
   562  001378  D7F9               	goto	l2560
   563  00137A                     __end_of_main:
   564                           	opt stack 0
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           tblptrl	equ	0xFF6
   568                           tablat	equ	0xFF5
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           postdec1	equ	0xFE5
   572                           fsr1l	equ	0xFE1
   573                           
   574 ;; *************** function _odometroTotal *****************
   575 ;; Defined at:
   576 ;;		line 17 in file "Odometro_Total_Parcial.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   590 ;;      Params:         0       0       0       0       0       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0       0       0       0       0
   592 ;;      Temps:          0       0       0       0       0       0       0       0       0
   593 ;;      Totals:         0       0       0       0       0       0       0       0       0
   594 ;;Total ram usage:        0 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    4
   597 ;; This function calls:
   598 ;;		_EEPROM_ReadByte
   599 ;;		_EEPROM_WriteByte
   600 ;;		_EscreveFraseRamLCD
   601 ;;		_PosicaoCursorLCD
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           	psect	text1
   608  000A26                     __ptext1:
   609                           	opt stack 0
   610  000A26                     _odometroTotal:
   611                           	opt stack 26
   612                           
   613                           ;Odometro_Total_Parcial.c: 19: static unsigned char odoTotal[] = "000000";
   614                           ;Odometro_Total_Parcial.c: 21: odoTotal [5] = EEPROM_ReadByte (0x00);
   615                           
   616                           ;incstack = 0
   617  000A26  0E00               	movlw	0
   618  000A28  ECC8  F009         	call	_EEPROM_ReadByte
   619  000A2C  6E4F               	movwf	odometroTotal@odoTotal+5,c
   620                           
   621                           ;Odometro_Total_Parcial.c: 22: odoTotal [4] = EEPROM_ReadByte (0x01);
   622  000A2E  0E01               	movlw	1
   623  000A30  ECC8  F009         	call	_EEPROM_ReadByte
   624  000A34  6E4E               	movwf	odometroTotal@odoTotal+4,c
   625                           
   626                           ;Odometro_Total_Parcial.c: 23: odoTotal [3] = EEPROM_ReadByte (0x02);
   627  000A36  0E02               	movlw	2
   628  000A38  ECC8  F009         	call	_EEPROM_ReadByte
   629  000A3C  6E4D               	movwf	odometroTotal@odoTotal+3,c
   630                           
   631                           ;Odometro_Total_Parcial.c: 24: odoTotal [2] = EEPROM_ReadByte (0x03);
   632  000A3E  0E03               	movlw	3
   633  000A40  ECC8  F009         	call	_EEPROM_ReadByte
   634  000A44  6E4C               	movwf	odometroTotal@odoTotal+2,c
   635                           
   636                           ;Odometro_Total_Parcial.c: 25: odoTotal [1] = EEPROM_ReadByte (0x04);
   637  000A46  0E04               	movlw	4
   638  000A48  ECC8  F009         	call	_EEPROM_ReadByte
   639  000A4C  6E4B               	movwf	odometroTotal@odoTotal+1,c
   640                           
   641                           ;Odometro_Total_Parcial.c: 26: odoTotal [0] = EEPROM_ReadByte (0x05);
   642  000A4E  0E05               	movlw	5
   643  000A50  ECC8  F009         	call	_EEPROM_ReadByte
   644  000A54  6E4A               	movwf	odometroTotal@odoTotal,c
   645                           
   646                           ;Odometro_Total_Parcial.c: 28: if (atualizaOdoTotal)
   647  000A56  5026               	movf	_atualizaOdoTotal,w,c
   648  000A58  1027               	iorwf	_atualizaOdoTotal+1,w,c
   649  000A5A  B4D8               	btfsc	status,2,c
   650  000A5C  D024               	goto	l189
   651                           
   652                           ;Odometro_Total_Parcial.c: 29: {
   653                           ;Odometro_Total_Parcial.c: 31: odoTotal[5]++;
   654  000A5E  2A4F               	incf	odometroTotal@odoTotal+5,f,c
   655                           
   656                           ;Odometro_Total_Parcial.c: 32: if (odoTotal[5] > 0x39)
   657  000A60  0E39               	movlw	57
   658  000A62  644F               	cpfsgt	odometroTotal@odoTotal+5,c
   659  000A64  D020               	goto	l189
   660                           
   661                           ;Odometro_Total_Parcial.c: 33: {
   662                           ;Odometro_Total_Parcial.c: 34: odoTotal[5] = 0x30;
   663  000A66  0E30               	movlw	48
   664  000A68  6E4F               	movwf	odometroTotal@odoTotal+5,c
   665                           
   666                           ;Odometro_Total_Parcial.c: 35: odoTotal[4]++;
   667  000A6A  2A4E               	incf	odometroTotal@odoTotal+4,f,c
   668                           
   669                           ;Odometro_Total_Parcial.c: 36: if (odoTotal[4] > 0x39)
   670  000A6C  0E39               	movlw	57
   671  000A6E  644E               	cpfsgt	odometroTotal@odoTotal+4,c
   672  000A70  D01A               	goto	l189
   673                           
   674                           ;Odometro_Total_Parcial.c: 37: {
   675                           ;Odometro_Total_Parcial.c: 38: odoTotal[4] = 0x30;
   676  000A72  0E30               	movlw	48
   677  000A74  6E4E               	movwf	odometroTotal@odoTotal+4,c
   678                           
   679                           ;Odometro_Total_Parcial.c: 39: odoTotal[3]++;
   680  000A76  2A4D               	incf	odometroTotal@odoTotal+3,f,c
   681                           
   682                           ;Odometro_Total_Parcial.c: 40: if (odoTotal[3] > 0x39)
   683  000A78  0E39               	movlw	57
   684  000A7A  644D               	cpfsgt	odometroTotal@odoTotal+3,c
   685  000A7C  D014               	goto	l189
   686                           
   687                           ;Odometro_Total_Parcial.c: 41: {
   688                           ;Odometro_Total_Parcial.c: 42: odoTotal[3] = 0x30;
   689  000A7E  0E30               	movlw	48
   690  000A80  6E4D               	movwf	odometroTotal@odoTotal+3,c
   691                           
   692                           ;Odometro_Total_Parcial.c: 43: odoTotal[2]++;
   693  000A82  2A4C               	incf	odometroTotal@odoTotal+2,f,c
   694                           
   695                           ;Odometro_Total_Parcial.c: 44: if (odoTotal[2] > 0x39)
   696  000A84  0E39               	movlw	57
   697  000A86  644C               	cpfsgt	odometroTotal@odoTotal+2,c
   698  000A88  D00E               	goto	l189
   699                           
   700                           ;Odometro_Total_Parcial.c: 45: {
   701                           ;Odometro_Total_Parcial.c: 46: odoTotal[2] = 0x30;
   702  000A8A  0E30               	movlw	48
   703  000A8C  6E4C               	movwf	odometroTotal@odoTotal+2,c
   704                           
   705                           ;Odometro_Total_Parcial.c: 47: odoTotal[1]++;
   706  000A8E  2A4B               	incf	odometroTotal@odoTotal+1,f,c
   707                           
   708                           ;Odometro_Total_Parcial.c: 48: if (odoTotal[1] > 0x39)
   709  000A90  0E39               	movlw	57
   710  000A92  644B               	cpfsgt	odometroTotal@odoTotal+1,c
   711  000A94  D008               	goto	l189
   712                           
   713                           ;Odometro_Total_Parcial.c: 49: {
   714                           ;Odometro_Total_Parcial.c: 50: odoTotal[1] = 0x30;
   715  000A96  0E30               	movlw	48
   716  000A98  6E4B               	movwf	odometroTotal@odoTotal+1,c
   717                           
   718                           ;Odometro_Total_Parcial.c: 51: odoTotal[0]++;
   719  000A9A  2A4A               	incf	odometroTotal@odoTotal,f,c
   720                           
   721                           ;Odometro_Total_Parcial.c: 52: if (odoTotal[0] > 0x39)
   722  000A9C  0E39               	movlw	57
   723  000A9E  644A               	cpfsgt	odometroTotal@odoTotal,c
   724  000AA0  D002               	goto	l189
   725                           
   726                           ;Odometro_Total_Parcial.c: 53: {
   727                           ;Odometro_Total_Parcial.c: 54: odoTotal[0] = 0x30;
   728  000AA2  0E30               	movlw	48
   729  000AA4  6E4A               	movwf	odometroTotal@odoTotal,c
   730  000AA6                     l189:
   731                           
   732                           ;Odometro_Total_Parcial.c: 56: }
   733                           ;Odometro_Total_Parcial.c: 57: }
   734                           ;Odometro_Total_Parcial.c: 58: }
   735                           ;Odometro_Total_Parcial.c: 59: }
   736                           ;Odometro_Total_Parcial.c: 60: }
   737                           ;Odometro_Total_Parcial.c: 61: }
   738                           ;Odometro_Total_Parcial.c: 62: }
   739                           ;Odometro_Total_Parcial.c: 64: atualizaOdoTotal = 0;
   740  000AA6  0E00               	movlw	0
   741  000AA8  6E27               	movwf	_atualizaOdoTotal+1,c
   742  000AAA  0E00               	movlw	0
   743  000AAC  6E26               	movwf	_atualizaOdoTotal,c
   744                           
   745                           ;Odometro_Total_Parcial.c: 65: PosicaoCursorLCD(1, 7);
   746  000AAE  0E07               	movlw	7
   747  000AB0  6E12               	movwf	PosicaoCursorLCD@coluna,c
   748  000AB2  0E01               	movlw	1
   749  000AB4  ECC4  F007         	call	_PosicaoCursorLCD
   750                           
   751                           ;Odometro_Total_Parcial.c: 66: EscreveFraseRamLCD(odoTotal);
   752  000AB8  0E4A               	movlw	low odometroTotal@odoTotal
   753  000ABA  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   754  000ABC  0E00               	movlw	high odometroTotal@odoTotal
   755  000ABE  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   756  000AC0  ECBC  F008         	call	_EscreveFraseRamLCD	;wreg free
   757                           
   758                           ;Odometro_Total_Parcial.c: 68: EEPROM_WriteByte(0x00, odoTotal[5]);
   759  000AC4  C04F  F00F         	movff	odometroTotal@odoTotal+5,EEPROM_WriteByte@WriteData
   760  000AC8  0E00               	movlw	0
   761  000ACA  EC87  F009         	call	_EEPROM_WriteByte
   762                           
   763                           ;Odometro_Total_Parcial.c: 69: EEPROM_WriteByte(0x01, odoTotal[4]);
   764  000ACE  C04E  F00F         	movff	odometroTotal@odoTotal+4,EEPROM_WriteByte@WriteData
   765  000AD2  0E01               	movlw	1
   766  000AD4  EC87  F009         	call	_EEPROM_WriteByte
   767                           
   768                           ;Odometro_Total_Parcial.c: 70: EEPROM_WriteByte(0x02, odoTotal[3]);
   769  000AD8  C04D  F00F         	movff	odometroTotal@odoTotal+3,EEPROM_WriteByte@WriteData
   770  000ADC  0E02               	movlw	2
   771  000ADE  EC87  F009         	call	_EEPROM_WriteByte
   772                           
   773                           ;Odometro_Total_Parcial.c: 71: EEPROM_WriteByte(0x03, odoTotal[2]);
   774  000AE2  C04C  F00F         	movff	odometroTotal@odoTotal+2,EEPROM_WriteByte@WriteData
   775  000AE6  0E03               	movlw	3
   776  000AE8  EC87  F009         	call	_EEPROM_WriteByte
   777                           
   778                           ;Odometro_Total_Parcial.c: 72: EEPROM_WriteByte(0x04, odoTotal[1]);
   779  000AEC  C04B  F00F         	movff	odometroTotal@odoTotal+1,EEPROM_WriteByte@WriteData
   780  000AF0  0E04               	movlw	4
   781  000AF2  EC87  F009         	call	_EEPROM_WriteByte
   782                           
   783                           ;Odometro_Total_Parcial.c: 73: EEPROM_WriteByte(0x05, odoTotal[0]);
   784  000AF6  C04A  F00F         	movff	odometroTotal@odoTotal,EEPROM_WriteByte@WriteData
   785  000AFA  0E05               	movlw	5
   786  000AFC  EC87  F009         	call	_EEPROM_WriteByte
   787  000B00  0012               	return		;funcret
   788  000B02                     __end_of_odometroTotal:
   789                           	opt stack 0
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1l	equ	0xFE1
   798                           status	equ	0xFD8
   799                           
   800 ;; *************** function _EEPROM_WriteByte *****************
   801 ;; Defined at:
   802 ;;		line 17 in file "EEPROM.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;  WriteMemoryA    1    wreg     unsigned char 
   805 ;;  WriteData       1   14[COMRAM] unsigned char 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  WriteMemoryA    1   15[COMRAM] unsigned char 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, status,2
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   817 ;;      Params:         1       0       0       0       0       0       0       0       0
   818 ;;      Locals:         1       0       0       0       0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0       0       0       0
   820 ;;      Totals:         2       0       0       0       0       0       0       0       0
   821 ;;Total ram usage:        2 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    1
   824 ;; This function calls:
   825 ;;		Nothing
   826 ;; This function is called by:
   827 ;;		_odometroTotal
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text2
   832  00130E                     __ptext2:
   833                           	opt stack 0
   834  00130E                     _EEPROM_WriteByte:
   835                           	opt stack 28
   836                           
   837                           ;incstack = 0
   838                           ;EEPROM_WriteByte@WriteMemoryAddress stored from wreg
   839  00130E  6E10               	movwf	EEPROM_WriteByte@WriteMemoryAddress,c
   840                           
   841                           ;EEPROM.c: 19: EEADR = WriteMemoryAddress;
   842  001310  C010  FFA9         	movff	EEPROM_WriteByte@WriteMemoryAddress,4009	;volatile
   843                           
   844                           ;EEPROM.c: 20: EEDATA = WriteData;
   845  001314  C00F  FFA8         	movff	EEPROM_WriteByte@WriteData,4008	;volatile
   846                           
   847                           ;EEPROM.c: 21: EECON1bits.EEPGD = 0;
   848  001318  9EA6               	bcf	4006,7,c	;volatile
   849                           
   850                           ;EEPROM.c: 22: EECON1bits.CFGS = 0;
   851  00131A  9CA6               	bcf	4006,6,c	;volatile
   852                           
   853                           ;EEPROM.c: 23: EECON1bits.WREN = 1;
   854  00131C  84A6               	bsf	4006,2,c	;volatile
   855                           
   856                           ;EEPROM.c: 24: INTCONbits.GIE = 0;
   857  00131E  9EF2               	bcf	intcon,7,c	;volatile
   858                           
   859                           ;EEPROM.c: 25: EECON2 = 0x55;
   860  001320  0E55               	movlw	85
   861  001322  6EA7               	movwf	4007,c	;volatile
   862                           
   863                           ;EEPROM.c: 26: EECON2 = 0x0AA;
   864  001324  0EAA               	movlw	170
   865  001326  6EA7               	movwf	4007,c	;volatile
   866                           
   867                           ;EEPROM.c: 27: EECON1bits.WR= 1;
   868  001328  82A6               	bsf	4006,1,c	;volatile
   869  00132A                     l159:
   870  00132A  B2A6               	btfsc	4006,1,c	;volatile
   871  00132C  D7FE               	goto	l159
   872                           
   873                           ;EEPROM.c: 29: INTCONbits.GIE = 1;
   874  00132E  8EF2               	bsf	intcon,7,c	;volatile
   875                           
   876                           ;EEPROM.c: 30: EECON1bits.WREN = 0;
   877  001330  94A6               	bcf	4006,2,c	;volatile
   878  001332  0012               	return		;funcret
   879  001334                     __end_of_EEPROM_WriteByte:
   880                           	opt stack 0
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           intcon	equ	0xFF2
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           postdec1	equ	0xFE5
   889                           fsr1l	equ	0xFE1
   890                           status	equ	0xFD8
   891                           
   892 ;; *************** function _EEPROM_ReadByte *****************
   893 ;; Defined at:
   894 ;;		line 10 in file "EEPROM.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;  MemoryAddres    1    wreg     unsigned char 
   897 ;; Auto vars:     Size  Location     Type
   898 ;;  MemoryAddres    1   14[COMRAM] unsigned char 
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      unsigned char 
   901 ;; Registers used:
   902 ;;		wreg, status,2
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   908 ;;      Params:         0       0       0       0       0       0       0       0       0
   909 ;;      Locals:         1       0       0       0       0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0       0       0       0       0
   911 ;;      Totals:         1       0       0       0       0       0       0       0       0
   912 ;;Total ram usage:        1 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; Hardware stack levels required when called:    1
   915 ;; This function calls:
   916 ;;		Nothing
   917 ;; This function is called by:
   918 ;;		_odometroTotal
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text3
   923  001390                     __ptext3:
   924                           	opt stack 0
   925  001390                     _EEPROM_ReadByte:
   926                           	opt stack 28
   927                           
   928                           ;incstack = 0
   929                           ;EEPROM_ReadByte@MemoryAddress stored from wreg
   930  001390  6E0F               	movwf	EEPROM_ReadByte@MemoryAddress,c
   931                           
   932                           ;EEPROM.c: 12: EEADR = MemoryAddress;
   933  001392  C00F  FFA9         	movff	EEPROM_ReadByte@MemoryAddress,4009	;volatile
   934                           
   935                           ;EEPROM.c: 13: EECON1 = 0x01;
   936  001396  0E01               	movlw	1
   937  001398  6EA6               	movwf	4006,c	;volatile
   938                           
   939                           ;EEPROM.c: 14: return(EEDATA);
   940  00139A  50A8               	movf	4008,w,c	;volatile
   941  00139C  0012               	return	
   942  00139E                     __end_of_EEPROM_ReadByte:
   943                           	opt stack 0
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           intcon	equ	0xFF2
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           fsr1l	equ	0xFE1
   953                           status	equ	0xFD8
   954                           
   955 ;; *************** function _odometroParcial *****************
   956 ;; Defined at:
   957 ;;		line 85 in file "Odometro_Total_Parcial.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  trava           1   21[COMRAM] unsigned char 
   962 ;;  position        1   20[COMRAM] unsigned char 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   972 ;;      Params:         0       0       0       0       0       0       0       0       0
   973 ;;      Locals:         2       0       0       0       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0       0       0
   975 ;;      Totals:         2       0       0       0       0       0       0       0       0
   976 ;;Total ram usage:        2 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    4
   979 ;; This function calls:
   980 ;;		_EscreveFraseRamLCD
   981 ;;		_PosicaoCursorLCD
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text4
   988  000BDC                     __ptext4:
   989                           	opt stack 0
   990  000BDC                     _odometroParcial:
   991                           	opt stack 26
   992                           
   993                           ;Odometro_Total_Parcial.c: 87: unsigned char trava = 0;
   994                           
   995                           ;incstack = 0
   996  000BDC  0E00               	movlw	0
   997  000BDE  6E16               	movwf	odometroParcial@trava,c
   998                           
   999                           ;Odometro_Total_Parcial.c: 88: static unsigned char i;
  1000                           ;Odometro_Total_Parcial.c: 89: char position = 0;
  1001  000BE0  0E00               	movlw	0
  1002  000BE2  6E15               	movwf	odometroParcial@position,c
  1003                           
  1004                           ;Odometro_Total_Parcial.c: 91: if (atualizaOdoParcial)
  1005  000BE4  5024               	movf	_atualizaOdoParcial,w,c
  1006  000BE6  1025               	iorwf	_atualizaOdoParcial+1,w,c
  1007  000BE8  B4D8               	btfsc	status,2,c
  1008  000BEA  D03D               	goto	l2206
  1009                           
  1010                           ;Odometro_Total_Parcial.c: 92: {
  1011                           ;Odometro_Total_Parcial.c: 93: odoParcial[5]++;
  1012  000BEC  2A48               	incf	_odoParcial+5,f,c
  1013                           
  1014                           ;Odometro_Total_Parcial.c: 95: if (odoParcial[5] > 0x39){
  1015  000BEE  0E39               	movlw	57
  1016  000BF0  6448               	cpfsgt	_odoParcial+5,c
  1017  000BF2  D02A               	goto	l2200
  1018                           
  1019                           ;Odometro_Total_Parcial.c: 96: odoParcial[5] = 0x30;
  1020  000BF4  0E30               	movlw	48
  1021  000BF6  6E48               	movwf	_odoParcial+5,c
  1022                           
  1023                           ;Odometro_Total_Parcial.c: 97: odoParcial[3]++;
  1024  000BF8  2A46               	incf	_odoParcial+3,f,c
  1025                           
  1026                           ;Odometro_Total_Parcial.c: 99: if (odoParcial[3] > 0x39){
  1027  000BFA  0E39               	movlw	57
  1028  000BFC  6446               	cpfsgt	_odoParcial+3,c
  1029  000BFE  D024               	goto	l2200
  1030                           
  1031                           ;Odometro_Total_Parcial.c: 100: odoParcial[3] = 0x30;
  1032  000C00  0E30               	movlw	48
  1033  000C02  6E46               	movwf	_odoParcial+3,c
  1034                           
  1035                           ;Odometro_Total_Parcial.c: 101: odoParcial[2]++;
  1036  000C04  2A45               	incf	_odoParcial+2,f,c
  1037                           
  1038                           ;Odometro_Total_Parcial.c: 103: if (odoParcial[2] > 0x39){
  1039  000C06  0E39               	movlw	57
  1040  000C08  6445               	cpfsgt	_odoParcial+2,c
  1041  000C0A  D01E               	goto	l2200
  1042                           
  1043                           ;Odometro_Total_Parcial.c: 104: odoParcial[2] = 0x30;
  1044  000C0C  0E30               	movlw	48
  1045  000C0E  6E45               	movwf	_odoParcial+2,c
  1046                           
  1047                           ;Odometro_Total_Parcial.c: 105: odoParcial[1]++;
  1048  000C10  2A44               	incf	_odoParcial+1,f,c
  1049                           
  1050                           ;Odometro_Total_Parcial.c: 107: if (odoParcial[1] > 0x39){
  1051  000C12  0E39               	movlw	57
  1052  000C14  6444               	cpfsgt	_odoParcial+1,c
  1053  000C16  D018               	goto	l2200
  1054                           
  1055                           ;Odometro_Total_Parcial.c: 108: odoParcial[1] = 0x30;
  1056  000C18  0E30               	movlw	48
  1057  000C1A  6E44               	movwf	_odoParcial+1,c
  1058                           
  1059                           ;Odometro_Total_Parcial.c: 109: odoParcial[0]++;
  1060  000C1C  2A43               	incf	_odoParcial,f,c
  1061                           
  1062                           ;Odometro_Total_Parcial.c: 111: if (odoParcial[0] > 0x39){
  1063  000C1E  0E39               	movlw	57
  1064  000C20  6443               	cpfsgt	_odoParcial,c
  1065  000C22  D012               	goto	l2200
  1066                           
  1067                           ;Odometro_Total_Parcial.c: 112: for (i = 0; i <= 3; i++){
  1068  000C24  0E00               	movlw	0
  1069  000C26  6E37               	movwf	odometroParcial@i,c
  1070  000C28                     l2190:
  1071  000C28  0E03               	movlw	3
  1072  000C2A  6437               	cpfsgt	odometroParcial@i,c
  1073  000C2C  D001               	goto	l2194
  1074  000C2E  D00C               	goto	l2200
  1075  000C30                     l2194:
  1076                           
  1077                           ;Odometro_Total_Parcial.c: 113: odoParcial[i] = '0';
  1078  000C30  5037               	movf	odometroParcial@i,w,c
  1079  000C32  0D01               	mullw	1
  1080  000C34  0E43               	movlw	low _odoParcial
  1081  000C36  24F3               	addwf	prodl,w,c
  1082  000C38  6ED9               	movwf	fsr2l,c
  1083  000C3A  0E00               	movlw	high _odoParcial
  1084  000C3C  20F4               	addwfc	prodh,w,c
  1085  000C3E  6EDA               	movwf	fsr2h,c
  1086  000C40  0E30               	movlw	48
  1087  000C42  6EDF               	movwf	indf2,c
  1088  000C44  2A37               	incf	odometroParcial@i,f,c
  1089  000C46  D7F0               	goto	l2190
  1090  000C48                     l2200:
  1091                           
  1092                           ;Odometro_Total_Parcial.c: 115: }
  1093                           ;Odometro_Total_Parcial.c: 116: }
  1094                           ;Odometro_Total_Parcial.c: 117: }
  1095                           ;Odometro_Total_Parcial.c: 118: }
  1096                           ;Odometro_Total_Parcial.c: 119: }
  1097                           ;Odometro_Total_Parcial.c: 120: }
  1098                           ;Odometro_Total_Parcial.c: 121: PosicaoCursorLCD(2, 7);
  1099  000C48  0E07               	movlw	7
  1100  000C4A  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1101  000C4C  0E02               	movlw	2
  1102  000C4E  ECC4  F007         	call	_PosicaoCursorLCD
  1103                           
  1104                           ;Odometro_Total_Parcial.c: 122: EscreveFraseRamLCD(odoParcial);
  1105  000C52  0E43               	movlw	low _odoParcial
  1106  000C54  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1107  000C56  0E00               	movlw	high _odoParcial
  1108  000C58  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1109  000C5A  ECBC  F008         	call	_EscreveFraseRamLCD	;wreg free
  1110                           
  1111                           ;Odometro_Total_Parcial.c: 123: atualizaOdoParcial = 0;
  1112  000C5E  0E00               	movlw	0
  1113  000C60  6E25               	movwf	_atualizaOdoParcial+1,c
  1114  000C62  0E00               	movlw	0
  1115  000C64  6E24               	movwf	_atualizaOdoParcial,c
  1116  000C66                     l2206:
  1117                           
  1118                           ;Odometro_Total_Parcial.c: 125: }
  1119                           ;Odometro_Total_Parcial.c: 126: if((PORTEbits.RE0 == 0)&&(trava == 0))
  1120  000C66  B084               	btfsc	3972,0,c	;volatile
  1121  000C68  D01B               	goto	l209
  1122  000C6A  5016               	movf	odometroParcial@trava,w,c
  1123  000C6C  A4D8               	btfss	status,2,c
  1124  000C6E  D018               	goto	l209
  1125                           
  1126                           ;Odometro_Total_Parcial.c: 127: {
  1127                           ;Odometro_Total_Parcial.c: 128: odoParcial[0] = 0x30;
  1128  000C70  0E30               	movlw	48
  1129  000C72  6E43               	movwf	_odoParcial,c
  1130                           
  1131                           ;Odometro_Total_Parcial.c: 129: odoParcial[1] = 0x30;
  1132  000C74  0E30               	movlw	48
  1133  000C76  6E44               	movwf	_odoParcial+1,c
  1134                           
  1135                           ;Odometro_Total_Parcial.c: 130: odoParcial[2] = 0x30;
  1136  000C78  0E30               	movlw	48
  1137  000C7A  6E45               	movwf	_odoParcial+2,c
  1138                           
  1139                           ;Odometro_Total_Parcial.c: 131: odoParcial[3] = 0x30;
  1140  000C7C  0E30               	movlw	48
  1141  000C7E  6E46               	movwf	_odoParcial+3,c
  1142                           
  1143                           ;Odometro_Total_Parcial.c: 132: odoParcial[5] = 0x30;
  1144  000C80  0E30               	movlw	48
  1145  000C82  6E48               	movwf	_odoParcial+5,c
  1146                           
  1147                           ;Odometro_Total_Parcial.c: 133: PosicaoCursorLCD(2, 7);
  1148  000C84  0E07               	movlw	7
  1149  000C86  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1150  000C88  0E02               	movlw	2
  1151  000C8A  ECC4  F007         	call	_PosicaoCursorLCD
  1152                           
  1153                           ;Odometro_Total_Parcial.c: 134: EscreveFraseRamLCD(odoParcial);
  1154  000C8E  0E43               	movlw	low _odoParcial
  1155  000C90  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1156  000C92  0E00               	movlw	high _odoParcial
  1157  000C94  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1158  000C96  ECBC  F008         	call	_EscreveFraseRamLCD	;wreg free
  1159                           
  1160                           ;Odometro_Total_Parcial.c: 136: trava = 1;
  1161  000C9A  0E01               	movlw	1
  1162  000C9C  6E16               	movwf	odometroParcial@trava,c
  1163                           
  1164                           ;Odometro_Total_Parcial.c: 137: }
  1165  000C9E  0012               	return	
  1166  000CA0                     l209:
  1167                           
  1168                           ;Odometro_Total_Parcial.c: 138: else if((PORTEbits.RE0 == 1) && (trava == 1))
  1169  000CA0  A084               	btfss	3972,0,c	;volatile
  1170  000CA2  0012               	return	
  1171  000CA4  0416               	decf	odometroParcial@trava,w,c
  1172  000CA6  A4D8               	btfss	status,2,c
  1173  000CA8  0012               	return	
  1174                           
  1175                           ;Odometro_Total_Parcial.c: 139: {
  1176                           ;Odometro_Total_Parcial.c: 140: trava = 0;
  1177  000CAA  0E00               	movlw	0
  1178  000CAC  6E16               	movwf	odometroParcial@trava,c
  1179  000CAE  0012               	return	
  1180  000CB0                     __end_of_odometroParcial:
  1181                           	opt stack 0
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           prodh	equ	0xFF4
  1187                           prodl	equ	0xFF3
  1188                           intcon	equ	0xFF2
  1189                           postinc0	equ	0xFEE
  1190                           wreg	equ	0xFE8
  1191                           postdec1	equ	0xFE5
  1192                           fsr1l	equ	0xFE1
  1193                           indf2	equ	0xFDF
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function _initInterrupt *****************
  1199 ;; Defined at:
  1200 ;;		line 67 in file "main.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;		None
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1214 ;;      Params:         0       0       0       0       0       0       0       0       0
  1215 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1217 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1218 ;;Total ram usage:        0 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    1
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text5
  1229  0012E0                     __ptext5:
  1230                           	opt stack 0
  1231  0012E0                     _initInterrupt:
  1232                           	opt stack 29
  1233                           
  1234                           ;main.c: 68: INTCON = 0b11100000;
  1235                           
  1236                           ;incstack = 0
  1237  0012E0  0EE0               	movlw	224
  1238  0012E2  6EF2               	movwf	intcon,c	;volatile
  1239                           
  1240                           ;main.c: 69: INTCON2 = 0b10000000;
  1241  0012E4  0E80               	movlw	128
  1242  0012E6  6EF1               	movwf	intcon2,c	;volatile
  1243                           
  1244                           ;main.c: 70: INTCON3 = 0b00000000;
  1245  0012E8  0E00               	movlw	0
  1246  0012EA  6EF0               	movwf	intcon3,c	;volatile
  1247                           
  1248                           ;main.c: 71: CCP1CON = 0b00000101;
  1249  0012EC  0E05               	movlw	5
  1250  0012EE  6EBD               	movwf	4029,c	;volatile
  1251                           
  1252                           ;main.c: 72: PIR1 = 0b00000000;
  1253  0012F0  0E00               	movlw	0
  1254  0012F2  6E9E               	movwf	3998,c	;volatile
  1255                           
  1256                           ;main.c: 73: PIR2 = 0b00000000;
  1257  0012F4  0E00               	movlw	0
  1258  0012F6  6EA1               	movwf	4001,c	;volatile
  1259                           
  1260                           ;main.c: 74: PIE1 = 0b00000100;
  1261  0012F8  0E04               	movlw	4
  1262  0012FA  6E9D               	movwf	3997,c	;volatile
  1263                           
  1264                           ;main.c: 75: PIE2 = 0b00000000;
  1265  0012FC  0E00               	movlw	0
  1266  0012FE  6EA0               	movwf	4000,c	;volatile
  1267                           
  1268                           ;main.c: 76: IPR1 = 0b00000000;
  1269  001300  0E00               	movlw	0
  1270  001302  6E9F               	movwf	3999,c	;volatile
  1271                           
  1272                           ;main.c: 77: IPR2 = 0b00000000;
  1273  001304  0E00               	movlw	0
  1274  001306  6EA2               	movwf	4002,c	;volatile
  1275                           
  1276                           ;main.c: 78: RCON = 0b00000000;
  1277  001308  0E00               	movlw	0
  1278  00130A  6ED0               	movwf	4048,c	;volatile
  1279  00130C  0012               	return		;funcret
  1280  00130E                     __end_of_initInterrupt:
  1281                           	opt stack 0
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           prodh	equ	0xFF4
  1287                           prodl	equ	0xFF3
  1288                           intcon	equ	0xFF2
  1289                           intcon2	equ	0xFF1
  1290                           intcon3	equ	0xFF0
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           indf2	equ	0xFDF
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function _initHw *****************
  1301 ;; Defined at:
  1302 ;;		line 80 in file "main.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, status,2
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1316 ;;      Params:         0       0       0       0       0       0       0       0       0
  1317 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1319 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1320 ;;Total ram usage:        0 bytes
  1321 ;; Hardware stack levels used:    1
  1322 ;; Hardware stack levels required when called:    1
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_main
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text6
  1331  00121C                     __ptext6:
  1332                           	opt stack 0
  1333  00121C                     _initHw:
  1334                           	opt stack 29
  1335                           
  1336                           ;main.c: 82: TRISA = 0x00;
  1337                           
  1338                           ;incstack = 0
  1339  00121C  0E00               	movlw	0
  1340  00121E  6E92               	movwf	3986,c	;volatile
  1341                           
  1342                           ;main.c: 83: TRISB = 0x00;
  1343  001220  0E00               	movlw	0
  1344  001222  6E93               	movwf	3987,c	;volatile
  1345                           
  1346                           ;main.c: 84: TRISC = 0x00;
  1347  001224  0E00               	movlw	0
  1348  001226  6E94               	movwf	3988,c	;volatile
  1349                           
  1350                           ;main.c: 85: TRISCbits.RC2 = 1;
  1351  001228  8494               	bsf	3988,2,c	;volatile
  1352                           
  1353                           ;main.c: 86: TRISD = 0x00;
  1354  00122A  0E00               	movlw	0
  1355  00122C  6E95               	movwf	3989,c	;volatile
  1356                           
  1357                           ;main.c: 87: TRISE = 0x0F;
  1358  00122E  0E0F               	movlw	15
  1359  001230  6E96               	movwf	3990,c	;volatile
  1360                           
  1361                           ;main.c: 89: ADCON0 = 0b00000001;
  1362  001232  0E01               	movlw	1
  1363  001234  6EC2               	movwf	4034,c	;volatile
  1364                           
  1365                           ;main.c: 90: ADCON1 = 0b00001101;
  1366  001236  0E0D               	movlw	13
  1367  001238  6EC1               	movwf	4033,c	;volatile
  1368                           
  1369                           ;main.c: 91: ADCON2 = 0b10000100;
  1370  00123A  0E84               	movlw	132
  1371  00123C  6EC0               	movwf	4032,c	;volatile
  1372                           
  1373                           ;main.c: 93: PORTEbits.RE0 = 0;
  1374  00123E  9084               	bcf	3972,0,c	;volatile
  1375                           
  1376                           ;main.c: 96: LATA = 0x00;
  1377  001240  0E00               	movlw	0
  1378  001242  6E89               	movwf	3977,c	;volatile
  1379                           
  1380                           ;main.c: 97: LATB = 0x00;
  1381  001244  0E00               	movlw	0
  1382  001246  6E8A               	movwf	3978,c	;volatile
  1383                           
  1384                           ;main.c: 98: LATD = 0x00;
  1385  001248  0E00               	movlw	0
  1386  00124A  6E8C               	movwf	3980,c	;volatile
  1387                           
  1388                           ;main.c: 100: T0CON = 0b01000101;
  1389  00124C  0E45               	movlw	69
  1390  00124E  6ED5               	movwf	4053,c	;volatile
  1391                           
  1392                           ;main.c: 101: CCP1CON = 0b00000101;
  1393  001250  0E05               	movlw	5
  1394  001252  6EBD               	movwf	4029,c	;volatile
  1395                           
  1396                           ;main.c: 102: T1CON = 0b01000100;
  1397  001254  0E44               	movlw	68
  1398  001256  6ECD               	movwf	4045,c	;volatile
  1399                           
  1400                           ;main.c: 103: T3CONbits.T3CCP1 = 0;
  1401  001258  96B1               	bcf	4017,3,c	;volatile
  1402                           
  1403                           ;main.c: 104: INTCONbits.GIE = 1;
  1404  00125A  8EF2               	bsf	intcon,7,c	;volatile
  1405                           
  1406                           ;main.c: 105: INTCONbits.PEIE = 1;
  1407  00125C  8CF2               	bsf	intcon,6,c	;volatile
  1408  00125E  0012               	return		;funcret
  1409  001260                     __end_of_initHw:
  1410                           	opt stack 0
  1411                           tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           prodh	equ	0xFF4
  1416                           prodl	equ	0xFF3
  1417                           intcon	equ	0xFF2
  1418                           intcon2	equ	0xFF1
  1419                           intcon3	equ	0xFF0
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           indf2	equ	0xFDF
  1425                           fsr2h	equ	0xFDA
  1426                           fsr2l	equ	0xFD9
  1427                           status	equ	0xFD8
  1428                           
  1429 ;; *************** function _display *****************
  1430 ;; Defined at:
  1431 ;;		line 108 in file "main.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1445 ;;      Params:         0       0       0       0       0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1447 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1448 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1449 ;;Total ram usage:        0 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    4
  1452 ;; This function calls:
  1453 ;;		_EscreveFraseRamLCD
  1454 ;;		_PosicaoCursorLCD
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text7
  1461  0010C8                     __ptext7:
  1462                           	opt stack 0
  1463  0010C8                     _display:
  1464                           	opt stack 26
  1465                           
  1466                           ;main.c: 109: PosicaoCursorLCD(1, 7);
  1467                           
  1468                           ;incstack = 0
  1469  0010C8  0E07               	movlw	7
  1470  0010CA  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1471  0010CC  0E01               	movlw	1
  1472  0010CE  ECC4  F007         	call	_PosicaoCursorLCD
  1473                           
  1474                           ;main.c: 110: EscreveFraseRamLCD(odoTotal);
  1475  0010D2  0E7E               	movlw	low _odoTotal
  1476  0010D4  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1477  0010D6  0E00               	movlw	high _odoTotal
  1478  0010D8  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1479  0010DA  ECBC  F008         	call	_EscreveFraseRamLCD	;wreg free
  1480                           
  1481                           ;main.c: 111: PosicaoCursorLCD(2, 7);
  1482  0010DE  0E07               	movlw	7
  1483  0010E0  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1484  0010E2  0E02               	movlw	2
  1485  0010E4  ECC4  F007         	call	_PosicaoCursorLCD
  1486                           
  1487                           ;main.c: 112: EscreveFraseRamLCD(odoParcial);
  1488  0010E8  0E43               	movlw	low _odoParcial
  1489  0010EA  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1490  0010EC  0E00               	movlw	high _odoParcial
  1491  0010EE  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1492  0010F0  ECBC  F008         	call	_EscreveFraseRamLCD	;wreg free
  1493                           
  1494                           ;main.c: 113: PosicaoCursorLCD(1, 14);
  1495  0010F4  0E0E               	movlw	14
  1496  0010F6  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1497  0010F8  0E01               	movlw	1
  1498  0010FA  ECC4  F007         	call	_PosicaoCursorLCD
  1499                           
  1500                           ;main.c: 114: EscreveFraseRamLCD("Km");
  1501  0010FE  0E01               	movlw	low STR_1
  1502  001100  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1503  001102  0E08               	movlw	high STR_1
  1504  001104  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1505  001106  ECBC  F008         	call	_EscreveFraseRamLCD	;wreg free
  1506                           
  1507                           ;main.c: 115: PosicaoCursorLCD(2, 14);
  1508  00110A  0E0E               	movlw	14
  1509  00110C  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1510  00110E  0E02               	movlw	2
  1511  001110  ECC4  F007         	call	_PosicaoCursorLCD
  1512                           
  1513                           ;main.c: 116: EscreveFraseRamLCD("Km");
  1514  001114  0E01               	movlw	low STR_1
  1515  001116  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1516  001118  0E08               	movlw	high STR_1
  1517  00111A  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1518  00111C  ECBC  F008         	call	_EscreveFraseRamLCD	;wreg free
  1519  001120  0012               	return		;funcret
  1520  001122                     __end_of_display:
  1521                           	opt stack 0
  1522                           tblptru	equ	0xFF8
  1523                           tblptrh	equ	0xFF7
  1524                           tblptrl	equ	0xFF6
  1525                           tablat	equ	0xFF5
  1526                           prodh	equ	0xFF4
  1527                           prodl	equ	0xFF3
  1528                           intcon	equ	0xFF2
  1529                           intcon2	equ	0xFF1
  1530                           intcon3	equ	0xFF0
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           postdec1	equ	0xFE5
  1534                           fsr1l	equ	0xFE1
  1535                           indf2	equ	0xFDF
  1536                           fsr2h	equ	0xFDA
  1537                           fsr2l	equ	0xFD9
  1538                           status	equ	0xFD8
  1539                           
  1540 ;; *************** function _PosicaoCursorLCD *****************
  1541 ;; Defined at:
  1542 ;;		line 287 in file "displayLCD.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  linha           1    wreg     unsigned char 
  1545 ;;  coluna          1   17[COMRAM] unsigned char 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  linha           1   18[COMRAM] unsigned char 
  1548 ;;  EnderecoLCD     1   19[COMRAM] unsigned char 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2, status,0, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1558 ;;      Params:         1       0       0       0       0       0       0       0       0
  1559 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1560 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1561 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1562 ;;Total ram usage:        3 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    3
  1565 ;; This function calls:
  1566 ;;		_EnderecoCursor
  1567 ;; This function is called by:
  1568 ;;		_odometroTotal
  1569 ;;		_odometroParcial
  1570 ;;		_display
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text8
  1575  000F88                     __ptext8:
  1576                           	opt stack 0
  1577  000F88                     _PosicaoCursorLCD:
  1578                           	opt stack 26
  1579                           
  1580                           ;incstack = 0
  1581                           ;PosicaoCursorLCD@linha stored from wreg
  1582  000F88  6E13               	movwf	PosicaoCursorLCD@linha,c
  1583                           
  1584                           ;displayLCD.c: 295: unsigned char EnderecoLCD = 0x00;
  1585  000F8A  0E00               	movlw	0
  1586  000F8C  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1587                           
  1588                           ;displayLCD.c: 299: if(coluna <= 16)
  1589  000F8E  0E11               	movlw	17
  1590  000F90  6012               	cpfslt	PosicaoCursorLCD@coluna,c
  1591  000F92  D02F               	goto	l1974
  1592  000F94  D01E               	goto	l1970
  1593  000F96                     l70:
  1594                           
  1595                           ;displayLCD.c: 306: EnderecoLCD = 0x00 + coluna;
  1596  000F96  C012  F014         	movff	PosicaoCursorLCD@coluna,PosicaoCursorLCD@EnderecoLCD
  1597                           
  1598                           ;displayLCD.c: 307: EnderecoCursor(EnderecoLCD);
  1599  000F9A  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1600  000F9C  ECFC  F007         	call	_EnderecoCursor
  1601                           
  1602                           ;displayLCD.c: 308: break;
  1603  000FA0  D026               	goto	l1972
  1604  000FA2                     l1954:
  1605                           
  1606                           ;displayLCD.c: 311: EnderecoLCD = 0x40 + coluna;
  1607  000FA2  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1608  000FA4  0F40               	addlw	64
  1609  000FA6  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1610                           
  1611                           ;displayLCD.c: 312: EnderecoCursor(EnderecoLCD);
  1612  000FA8  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1613  000FAA  ECFC  F007         	call	_EnderecoCursor
  1614                           
  1615                           ;displayLCD.c: 313: break;
  1616  000FAE  D01F               	goto	l1972
  1617  000FB0                     l1958:
  1618                           
  1619                           ;displayLCD.c: 316: EnderecoLCD = 0x14 + coluna;
  1620  000FB0  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1621  000FB2  0F14               	addlw	20
  1622  000FB4  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1623                           
  1624                           ;displayLCD.c: 317: EnderecoCursor(EnderecoLCD);
  1625  000FB6  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1626  000FB8  ECFC  F007         	call	_EnderecoCursor
  1627                           
  1628                           ;displayLCD.c: 318: break;
  1629  000FBC  D018               	goto	l1972
  1630  000FBE                     l1962:
  1631                           
  1632                           ;displayLCD.c: 321: EnderecoLCD = 0x54 + coluna;
  1633  000FBE  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1634  000FC0  0F54               	addlw	84
  1635  000FC2  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1636                           
  1637                           ;displayLCD.c: 322: EnderecoCursor(EnderecoLCD);
  1638  000FC4  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1639  000FC6  ECFC  F007         	call	_EnderecoCursor
  1640                           
  1641                           ;displayLCD.c: 323: break;
  1642  000FCA  D011               	goto	l1972
  1643  000FCC                     l1966:
  1644                           
  1645                           ;displayLCD.c: 326: EnderecoLCD = 0x00;
  1646  000FCC  0E00               	movlw	0
  1647  000FCE  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1648                           
  1649                           ;displayLCD.c: 328: }
  1650                           
  1651                           ;displayLCD.c: 327: break;
  1652  000FD0  D00E               	goto	l1972
  1653  000FD2                     l1970:
  1654  000FD2  5013               	movf	PosicaoCursorLCD@linha,w,c
  1655                           
  1656                           ; Switch size 1, requested type "space"
  1657                           ; Number of cases is 4, Range of values is 1 to 4
  1658                           ; switch strategies available:
  1659                           ; Name         Instructions Cycles
  1660                           ; simple_byte           13     7 (average)
  1661                           ;	Chosen strategy is simple_byte
  1662  000FD4  0A01               	xorlw	1	; case 1
  1663  000FD6  B4D8               	btfsc	status,2,c
  1664  000FD8  D7DE               	goto	l70
  1665  000FDA  0A03               	xorlw	3	; case 2
  1666  000FDC  B4D8               	btfsc	status,2,c
  1667  000FDE  D7E1               	goto	l1954
  1668  000FE0  0A01               	xorlw	1	; case 3
  1669  000FE2  B4D8               	btfsc	status,2,c
  1670  000FE4  D7E5               	goto	l1958
  1671  000FE6  0A07               	xorlw	7	; case 4
  1672  000FE8  B4D8               	btfsc	status,2,c
  1673  000FEA  D7E9               	goto	l1962
  1674  000FEC  D7EF               	goto	l1966
  1675  000FEE                     l1972:
  1676                           
  1677                           ;displayLCD.c: 330: coluna++;
  1678  000FEE  2A12               	incf	PosicaoCursorLCD@coluna,f,c
  1679                           
  1680                           ;displayLCD.c: 331: }
  1681  000FF0  0012               	return	
  1682  000FF2                     l1974:
  1683                           
  1684                           ;displayLCD.c: 332: else
  1685                           ;displayLCD.c: 333: {
  1686                           ;displayLCD.c: 334: EnderecoLCD = 0x00;
  1687  000FF2  0E00               	movlw	0
  1688  000FF4  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1689  000FF6  0012               	return	
  1690  000FF8                     __end_of_PosicaoCursorLCD:
  1691                           	opt stack 0
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           prodh	equ	0xFF4
  1697                           prodl	equ	0xFF3
  1698                           intcon	equ	0xFF2
  1699                           intcon2	equ	0xFF1
  1700                           intcon3	equ	0xFF0
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1l	equ	0xFE1
  1705                           indf2	equ	0xFDF
  1706                           fsr2h	equ	0xFDA
  1707                           fsr2l	equ	0xFD9
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _EnderecoCursor *****************
  1711 ;; Defined at:
  1712 ;;		line 236 in file "displayLCD.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  endereco        1    wreg     unsigned char 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  endereco        1   16[COMRAM] unsigned char 
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		wreg, status,2, status,0, cstack
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0
  1727 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1729 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1730 ;;Total ram usage:        1 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    2
  1733 ;; This function calls:
  1734 ;;		_Delay
  1735 ;; This function is called by:
  1736 ;;		_PosicaoCursorLCD
  1737 ;;		_CriaCaractereLCD
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text9
  1742  000FF8                     __ptext9:
  1743                           	opt stack 0
  1744  000FF8                     _EnderecoCursor:
  1745                           	opt stack 26
  1746                           
  1747                           ;incstack = 0
  1748                           ;EnderecoCursor@endereco stored from wreg
  1749  000FF8  6E11               	movwf	EnderecoCursor@endereco,c
  1750                           
  1751                           ;displayLCD.c: 239: PORTDbits.RD2 = 0;
  1752  000FFA  9483               	bcf	3971,2,c	;volatile
  1753                           
  1754                           ;displayLCD.c: 240: PORTDbits.RD1 = 0;
  1755  000FFC  9283               	bcf	3971,1,c	;volatile
  1756                           
  1757                           ;displayLCD.c: 241: PORTDbits.RD0 = 0;
  1758  000FFE  9083               	bcf	3971,0,c	;volatile
  1759                           
  1760                           ;displayLCD.c: 244: PORTDbits.RD7 = 1;
  1761  001000  8E83               	bsf	3971,7,c	;volatile
  1762                           
  1763                           ;displayLCD.c: 245: if(endereco&0b00010000){PORTDbits.RD4=1;}
  1764  001002  A811               	btfss	EnderecoCursor@endereco,4,c
  1765  001004  D002               	goto	l51
  1766  001006  8883               	bsf	3971,4,c	;volatile
  1767  001008  D001               	goto	l1800
  1768  00100A                     l51:
  1769                           
  1770                           ;displayLCD.c: 246: else {PORTDbits.RD4=0;}
  1771  00100A  9883               	bcf	3971,4,c	;volatile
  1772  00100C                     l1800:
  1773                           
  1774                           ;displayLCD.c: 247: if(endereco&0b00100000){PORTDbits.RD5=1;}
  1775  00100C  AA11               	btfss	EnderecoCursor@endereco,5,c
  1776  00100E  D002               	goto	l53
  1777  001010  8A83               	bsf	3971,5,c	;volatile
  1778  001012  D001               	goto	l1804
  1779  001014                     l53:
  1780                           
  1781                           ;displayLCD.c: 248: else {PORTDbits.RD5=0;}
  1782  001014  9A83               	bcf	3971,5,c	;volatile
  1783  001016                     l1804:
  1784                           
  1785                           ;displayLCD.c: 249: if(endereco&0b01000000){PORTDbits.RD6=1;}
  1786  001016  AC11               	btfss	EnderecoCursor@endereco,6,c
  1787  001018  D002               	goto	l55
  1788  00101A  8C83               	bsf	3971,6,c	;volatile
  1789  00101C  D001               	goto	l56
  1790  00101E                     l55:
  1791                           
  1792                           ;displayLCD.c: 250: else {PORTDbits.RD6=0;}
  1793  00101E  9C83               	bcf	3971,6,c	;volatile
  1794  001020                     l56:
  1795                           
  1796                           ;displayLCD.c: 253: PORTDbits.RD0 = 1;
  1797  001020  8083               	bsf	3971,0,c	;volatile
  1798                           
  1799                           ;displayLCD.c: 254: Delay();
  1800  001022  EC9A  F009         	call	_Delay	;wreg free
  1801                           
  1802                           ;displayLCD.c: 255: PORTDbits.RD0 = 0;
  1803  001026  9083               	bcf	3971,0,c	;volatile
  1804                           
  1805                           ;displayLCD.c: 256: Delay();
  1806  001028  EC9A  F009         	call	_Delay	;wreg free
  1807                           
  1808                           ;displayLCD.c: 259: if(endereco&0b00000001){PORTDbits.RD4=1;}
  1809  00102C  A011               	btfss	EnderecoCursor@endereco,0,c
  1810  00102E  D002               	goto	l57
  1811  001030  8883               	bsf	3971,4,c	;volatile
  1812  001032  D001               	goto	l58
  1813  001034                     l57:
  1814                           
  1815                           ;displayLCD.c: 260: else {PORTDbits.RD4=0;}
  1816  001034  9883               	bcf	3971,4,c	;volatile
  1817  001036                     l58:
  1818                           
  1819                           ;displayLCD.c: 261: if(endereco&0b00000010){PORTDbits.RD5=1;}
  1820  001036  A211               	btfss	EnderecoCursor@endereco,1,c
  1821  001038  D002               	goto	l59
  1822  00103A  8A83               	bsf	3971,5,c	;volatile
  1823  00103C  D001               	goto	l60
  1824  00103E                     l59:
  1825                           
  1826                           ;displayLCD.c: 262: else {PORTDbits.RD5=0;}
  1827  00103E  9A83               	bcf	3971,5,c	;volatile
  1828  001040                     l60:
  1829                           
  1830                           ;displayLCD.c: 263: if(endereco&0b00000100){PORTDbits.RD6=1;}
  1831  001040  A411               	btfss	EnderecoCursor@endereco,2,c
  1832  001042  D002               	goto	l61
  1833  001044  8C83               	bsf	3971,6,c	;volatile
  1834  001046  D001               	goto	l62
  1835  001048                     l61:
  1836                           
  1837                           ;displayLCD.c: 264: else {PORTDbits.RD6=0;}
  1838  001048  9C83               	bcf	3971,6,c	;volatile
  1839  00104A                     l62:
  1840                           
  1841                           ;displayLCD.c: 265: if(endereco&0b00001000){PORTDbits.RD7=1;}
  1842  00104A  A611               	btfss	EnderecoCursor@endereco,3,c
  1843  00104C  D002               	goto	l63
  1844  00104E  8E83               	bsf	3971,7,c	;volatile
  1845  001050  D001               	goto	l64
  1846  001052                     l63:
  1847                           
  1848                           ;displayLCD.c: 266: else {PORTDbits.RD7=0;}
  1849  001052  9E83               	bcf	3971,7,c	;volatile
  1850  001054                     l64:
  1851                           
  1852                           ;displayLCD.c: 269: PORTDbits.RD0 = 1;
  1853  001054  8083               	bsf	3971,0,c	;volatile
  1854                           
  1855                           ;displayLCD.c: 270: Delay();
  1856  001056  EC9A  F009         	call	_Delay	;wreg free
  1857                           
  1858                           ;displayLCD.c: 271: PORTDbits.RD0 = 0;
  1859  00105A  9083               	bcf	3971,0,c	;volatile
  1860                           
  1861                           ;displayLCD.c: 272: Delay();
  1862  00105C  EC9A  F009         	call	_Delay	;wreg free
  1863  001060  0012               	return		;funcret
  1864  001062                     __end_of_EnderecoCursor:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           intcon	equ	0xFF2
  1873                           intcon2	equ	0xFF1
  1874                           intcon3	equ	0xFF0
  1875                           postinc0	equ	0xFEE
  1876                           wreg	equ	0xFE8
  1877                           postdec1	equ	0xFE5
  1878                           fsr1l	equ	0xFE1
  1879                           indf2	equ	0xFDF
  1880                           fsr2h	equ	0xFDA
  1881                           fsr2l	equ	0xFD9
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _EscreveFraseRamLCD *****************
  1885 ;; Defined at:
  1886 ;;		line 470 in file "displayLCD.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  buffer          2   17[COMRAM] PTR unsigned char 
  1889 ;;		 -> STR_2(3), STR_1(3), odoTotal(7), odoParcial(7), 
  1890 ;;		 -> odometroTotal@odoTotal(7), EscreveInteiroLCD@texto(7), 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1902 ;;      Params:         2       0       0       0       0       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1905 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1906 ;;Total ram usage:        2 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    3
  1909 ;; This function calls:
  1910 ;;		_EscreveCaractereLCD
  1911 ;; This function is called by:
  1912 ;;		_odometroTotal
  1913 ;;		_odometroParcial
  1914 ;;		_display
  1915 ;;		_EscreveInteiroLCD
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text10
  1920  001178                     __ptext10:
  1921                           	opt stack 0
  1922  001178                     _EscreveFraseRamLCD:
  1923                           	opt stack 26
  1924                           
  1925                           ;displayLCD.c: 472: while(*buffer)
  1926                           
  1927                           ;incstack = 0
  1928  001178  D014               	goto	l1982
  1929  00117A                     l1978:
  1930                           
  1931                           ;displayLCD.c: 473: {
  1932                           ;displayLCD.c: 474: EscreveCaractereLCD(*buffer);
  1933  00117A  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1934  00117E  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1935  001182  6AF8               	clrf	tblptru,c
  1936  001184  0E07               	movlw	(high __ramtop+-1)
  1937  001186  64F7               	cpfsgt	tblptrh,c
  1938  001188  D003               	bra	u1407
  1939  00118A  0008               	tblrd		*
  1940  00118C  50F5               	movf	tablat,w,c
  1941  00118E  D005               	bra	u1400
  1942  001190                     u1407:
  1943  001190  CFF6 FFE9          	movff	tblptrl,fsr0l
  1944  001194  CFF7 FFEA          	movff	tblptrh,fsr0h
  1945  001198  50EF               	movf	indf0,w,c
  1946  00119A                     u1400:
  1947  00119A  EC8B  F007         	call	_EscreveCaractereLCD
  1948                           
  1949                           ;displayLCD.c: 475: buffer++;
  1950  00119E  4A12               	infsnz	EscreveFraseRamLCD@buffer,f,c
  1951  0011A0  2A13               	incf	EscreveFraseRamLCD@buffer+1,f,c
  1952  0011A2                     l1982:
  1953  0011A2  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1954  0011A6  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1955  0011AA  6AF8               	clrf	tblptru,c
  1956  0011AC  0E07               	movlw	(high __ramtop+-1)
  1957  0011AE  64F7               	cpfsgt	tblptrh,c
  1958  0011B0  D003               	bra	u1417
  1959  0011B2  0008               	tblrd		*
  1960  0011B4  50F5               	movf	tablat,w,c
  1961  0011B6  D005               	bra	u1410
  1962  0011B8                     u1417:
  1963  0011B8  CFF6 FFE9          	movff	tblptrl,fsr0l
  1964  0011BC  CFF7 FFEA          	movff	tblptrh,fsr0h
  1965  0011C0  50EF               	movf	indf0,w,c
  1966  0011C2                     u1410:
  1967  0011C2  0900               	iorlw	0
  1968  0011C4  B4D8               	btfsc	status,2,c
  1969  0011C6  0012               	return	
  1970  0011C8  D7D8               	goto	l1978
  1971  0011CA                     __end_of_EscreveFraseRamLCD:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           prodh	equ	0xFF4
  1978                           prodl	equ	0xFF3
  1979                           intcon	equ	0xFF2
  1980                           intcon2	equ	0xFF1
  1981                           intcon3	equ	0xFF0
  1982                           indf0	equ	0xFEF
  1983                           postinc0	equ	0xFEE
  1984                           fsr0h	equ	0xFEA
  1985                           fsr0l	equ	0xFE9
  1986                           wreg	equ	0xFE8
  1987                           postdec1	equ	0xFE5
  1988                           fsr1l	equ	0xFE1
  1989                           indf2	equ	0xFDF
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _EscreveCaractereLCD *****************
  1995 ;; Defined at:
  1996 ;;		line 348 in file "displayLCD.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  data            1    wreg     unsigned char 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  data            1   16[COMRAM] unsigned char 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2010 ;;      Params:         0       0       0       0       0       0       0       0       0
  2011 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2013 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2014 ;;Total ram usage:        1 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    2
  2017 ;; This function calls:
  2018 ;;		_Delay
  2019 ;; This function is called by:
  2020 ;;		_EscreveFraseRamLCD
  2021 ;;		_EscreveFloatLCD
  2022 ;;		_EscreveFraseLCD
  2023 ;;		_CriaCaractereLCD
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text11
  2028  000F16                     __ptext11:
  2029                           	opt stack 0
  2030  000F16                     _EscreveCaractereLCD:
  2031                           	opt stack 26
  2032                           
  2033                           ;incstack = 0
  2034                           ;EscreveCaractereLCD@data stored from wreg
  2035  000F16  6E11               	movwf	EscreveCaractereLCD@data,c
  2036                           
  2037                           ;displayLCD.c: 351: PORTDbits.RD2 = 0;
  2038  000F18  9483               	bcf	3971,2,c	;volatile
  2039                           
  2040                           ;displayLCD.c: 352: PORTDbits.RD1 = 1;
  2041  000F1A  8283               	bsf	3971,1,c	;volatile
  2042                           
  2043                           ;displayLCD.c: 353: PORTDbits.RD0 = 0;
  2044  000F1C  9083               	bcf	3971,0,c	;volatile
  2045                           
  2046                           ;displayLCD.c: 356: if(data&0b00010000){PORTDbits.RD4=1;}
  2047  000F1E  A811               	btfss	EscreveCaractereLCD@data,4,c
  2048  000F20  D002               	goto	l80
  2049  000F22  8883               	bsf	3971,4,c	;volatile
  2050  000F24  D001               	goto	l1832
  2051  000F26                     l80:
  2052                           
  2053                           ;displayLCD.c: 357: else {PORTDbits.RD4=0;}
  2054  000F26  9883               	bcf	3971,4,c	;volatile
  2055  000F28                     l1832:
  2056                           
  2057                           ;displayLCD.c: 358: if(data&0b00100000){PORTDbits.RD5=1;}
  2058  000F28  AA11               	btfss	EscreveCaractereLCD@data,5,c
  2059  000F2A  D002               	goto	l82
  2060  000F2C  8A83               	bsf	3971,5,c	;volatile
  2061  000F2E  D001               	goto	l1836
  2062  000F30                     l82:
  2063                           
  2064                           ;displayLCD.c: 359: else {PORTDbits.RD5=0;}
  2065  000F30  9A83               	bcf	3971,5,c	;volatile
  2066  000F32                     l1836:
  2067                           
  2068                           ;displayLCD.c: 360: if(data&0b01000000){PORTDbits.RD6=1;}
  2069  000F32  AC11               	btfss	EscreveCaractereLCD@data,6,c
  2070  000F34  D002               	goto	l84
  2071  000F36  8C83               	bsf	3971,6,c	;volatile
  2072  000F38  D001               	goto	l1840
  2073  000F3A                     l84:
  2074                           
  2075                           ;displayLCD.c: 361: else {PORTDbits.RD6=0;}
  2076  000F3A  9C83               	bcf	3971,6,c	;volatile
  2077  000F3C                     l1840:
  2078                           
  2079                           ;displayLCD.c: 362: if(data&0b10000000){PORTDbits.RD7=1;}
  2080  000F3C  AE11               	btfss	EscreveCaractereLCD@data,7,c
  2081  000F3E  D002               	goto	l86
  2082  000F40  8E83               	bsf	3971,7,c	;volatile
  2083  000F42  D001               	goto	l87
  2084  000F44                     l86:
  2085                           
  2086                           ;displayLCD.c: 363: else {PORTDbits.RD7=0;}
  2087  000F44  9E83               	bcf	3971,7,c	;volatile
  2088  000F46                     l87:
  2089                           
  2090                           ;displayLCD.c: 366: PORTDbits.RD0 = 1;
  2091  000F46  8083               	bsf	3971,0,c	;volatile
  2092                           
  2093                           ;displayLCD.c: 367: Delay();
  2094  000F48  EC9A  F009         	call	_Delay	;wreg free
  2095                           
  2096                           ;displayLCD.c: 368: PORTDbits.RD0 = 0;
  2097  000F4C  9083               	bcf	3971,0,c	;volatile
  2098                           
  2099                           ;displayLCD.c: 369: Delay();
  2100  000F4E  EC9A  F009         	call	_Delay	;wreg free
  2101                           
  2102                           ;displayLCD.c: 373: if(data&0b00000001){PORTDbits.RD4=1;}
  2103  000F52  A011               	btfss	EscreveCaractereLCD@data,0,c
  2104  000F54  D002               	goto	l88
  2105  000F56  8883               	bsf	3971,4,c	;volatile
  2106  000F58  D001               	goto	l89
  2107  000F5A                     l88:
  2108                           
  2109                           ;displayLCD.c: 374: else {PORTDbits.RD4=0;}
  2110  000F5A  9883               	bcf	3971,4,c	;volatile
  2111  000F5C                     l89:
  2112                           
  2113                           ;displayLCD.c: 375: if(data&0b00000010){PORTDbits.RD5=1;}
  2114  000F5C  A211               	btfss	EscreveCaractereLCD@data,1,c
  2115  000F5E  D002               	goto	l90
  2116  000F60  8A83               	bsf	3971,5,c	;volatile
  2117  000F62  D001               	goto	l91
  2118  000F64                     l90:
  2119                           
  2120                           ;displayLCD.c: 376: else {PORTDbits.RD5=0;}
  2121  000F64  9A83               	bcf	3971,5,c	;volatile
  2122  000F66                     l91:
  2123                           
  2124                           ;displayLCD.c: 377: if(data&0b00000100){PORTDbits.RD6=1;}
  2125  000F66  A411               	btfss	EscreveCaractereLCD@data,2,c
  2126  000F68  D002               	goto	l92
  2127  000F6A  8C83               	bsf	3971,6,c	;volatile
  2128  000F6C  D001               	goto	l93
  2129  000F6E                     l92:
  2130                           
  2131                           ;displayLCD.c: 378: else {PORTDbits.RD6=0;}
  2132  000F6E  9C83               	bcf	3971,6,c	;volatile
  2133  000F70                     l93:
  2134                           
  2135                           ;displayLCD.c: 379: if(data&0b00001000){PORTDbits.RD7=1;}
  2136  000F70  A611               	btfss	EscreveCaractereLCD@data,3,c
  2137  000F72  D002               	goto	l94
  2138  000F74  8E83               	bsf	3971,7,c	;volatile
  2139  000F76  D001               	goto	l95
  2140  000F78                     l94:
  2141                           
  2142                           ;displayLCD.c: 380: else {PORTDbits.RD7=0;}
  2143  000F78  9E83               	bcf	3971,7,c	;volatile
  2144  000F7A                     l95:
  2145                           
  2146                           ;displayLCD.c: 383: PORTDbits.RD0 = 1;
  2147  000F7A  8083               	bsf	3971,0,c	;volatile
  2148                           
  2149                           ;displayLCD.c: 384: Delay();
  2150  000F7C  EC9A  F009         	call	_Delay	;wreg free
  2151                           
  2152                           ;displayLCD.c: 385: PORTDbits.RD0 = 0;
  2153  000F80  9083               	bcf	3971,0,c	;volatile
  2154                           
  2155                           ;displayLCD.c: 386: Delay();
  2156  000F82  EC9A  F009         	call	_Delay	;wreg free
  2157  000F86  0012               	return		;funcret
  2158  000F88                     __end_of_EscreveCaractereLCD:
  2159                           	opt stack 0
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           intcon	equ	0xFF2
  2167                           intcon2	equ	0xFF1
  2168                           intcon3	equ	0xFF0
  2169                           indf0	equ	0xFEF
  2170                           postinc0	equ	0xFEE
  2171                           fsr0h	equ	0xFEA
  2172                           fsr0l	equ	0xFE9
  2173                           wreg	equ	0xFE8
  2174                           postdec1	equ	0xFE5
  2175                           fsr1l	equ	0xFE1
  2176                           indf2	equ	0xFDF
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function _Init_EEPROM *****************
  2182 ;; Defined at:
  2183 ;;		line 5 in file "EEPROM.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2197 ;;      Params:         0       0       0       0       0       0       0       0       0
  2198 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2200 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    1
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text12
  2212  0013A6                     __ptext12:
  2213                           	opt stack 0
  2214  0013A6                     _Init_EEPROM:
  2215                           	opt stack 29
  2216                           
  2217                           ;EEPROM.c: 7: EECON1 = 0b00000100;
  2218                           
  2219                           ;incstack = 0
  2220  0013A6  0E04               	movlw	4
  2221  0013A8  6EA6               	movwf	4006,c	;volatile
  2222  0013AA  0012               	return		;funcret
  2223  0013AC                     __end_of_Init_EEPROM:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           prodh	equ	0xFF4
  2230                           prodl	equ	0xFF3
  2231                           intcon	equ	0xFF2
  2232                           intcon2	equ	0xFF1
  2233                           intcon3	equ	0xFF0
  2234                           indf0	equ	0xFEF
  2235                           postinc0	equ	0xFEE
  2236                           fsr0h	equ	0xFEA
  2237                           fsr0l	equ	0xFE9
  2238                           wreg	equ	0xFE8
  2239                           postdec1	equ	0xFE5
  2240                           fsr1l	equ	0xFE1
  2241                           indf2	equ	0xFDF
  2242                           fsr2h	equ	0xFDA
  2243                           fsr2l	equ	0xFD9
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _ConfiguraLCD *****************
  2247 ;; Defined at:
  2248 ;;		line 87 in file "displayLCD.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, status,2, status,0, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2262 ;;      Params:         0       0       0       0       0       0       0       0       0
  2263 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2264 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2265 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2266 ;;Total ram usage:        1 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    3
  2269 ;; This function calls:
  2270 ;;		_Delay
  2271 ;;		_EscreveComandoLCD
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text13
  2278  000D60                     __ptext13:
  2279                           	opt stack 0
  2280  000D60                     _ConfiguraLCD:
  2281                           	opt stack 27
  2282                           
  2283                           ;displayLCD.c: 90: TRISDbits.RD2 = 0;
  2284                           
  2285                           ;incstack = 0
  2286  000D60  9495               	bcf	3989,2,c	;volatile
  2287                           
  2288                           ;displayLCD.c: 91: TRISDbits.RD1 = 0;
  2289  000D62  9295               	bcf	3989,1,c	;volatile
  2290                           
  2291                           ;displayLCD.c: 92: TRISDbits.RD0 = 0;
  2292  000D64  9095               	bcf	3989,0,c	;volatile
  2293                           
  2294                           ;displayLCD.c: 95: TRISDbits.RD4=0;
  2295  000D66  9895               	bcf	3989,4,c	;volatile
  2296                           
  2297                           ;displayLCD.c: 96: TRISDbits.RD5=0;
  2298  000D68  9A95               	bcf	3989,5,c	;volatile
  2299                           
  2300                           ;displayLCD.c: 97: TRISDbits.RD6=0;
  2301  000D6A  9C95               	bcf	3989,6,c	;volatile
  2302                           
  2303                           ;displayLCD.c: 98: TRISDbits.RD7=0;
  2304  000D6C  9E95               	bcf	3989,7,c	;volatile
  2305                           
  2306                           ;displayLCD.c: 105: PORTDbits.RD2 = 0;
  2307  000D6E  9483               	bcf	3971,2,c	;volatile
  2308                           
  2309                           ;displayLCD.c: 106: PORTDbits.RD1 = 0;
  2310  000D70  9283               	bcf	3971,1,c	;volatile
  2311                           
  2312                           ;displayLCD.c: 107: PORTDbits.RD0 = 0;
  2313  000D72  9083               	bcf	3971,0,c	;volatile
  2314                           
  2315                           ;displayLCD.c: 111: PORTDbits.RD7=0;
  2316  000D74  9E83               	bcf	3971,7,c	;volatile
  2317                           
  2318                           ;displayLCD.c: 112: PORTDbits.RD6=0;
  2319  000D76  9C83               	bcf	3971,6,c	;volatile
  2320                           
  2321                           ;displayLCD.c: 113: PORTDbits.RD5=1;
  2322  000D78  8A83               	bsf	3971,5,c	;volatile
  2323                           
  2324                           ;displayLCD.c: 114: PORTDbits.RD4=1;
  2325  000D7A  8883               	bsf	3971,4,c	;volatile
  2326                           
  2327                           ;displayLCD.c: 119: _delay((unsigned long)((15)*(48000000/4000.0)));
  2328  000D7C  0EEA               	movlw	234
  2329  000D7E  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2330  000D80  0EC3               	movlw	195
  2331  000D82                     u2277:
  2332  000D82  2EE8               	decfsz	wreg,f,c
  2333  000D84  D7FE               	bra	u2277
  2334  000D86  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2335  000D88  D7FC               	bra	u2277
  2336  000D8A  F000               	nop	
  2337                           
  2338                           ;displayLCD.c: 123: PORTDbits.RD0 = 1;
  2339  000D8C  8083               	bsf	3971,0,c	;volatile
  2340                           
  2341                           ;displayLCD.c: 124: Delay();
  2342  000D8E  EC9A  F009         	call	_Delay	;wreg free
  2343                           
  2344                           ;displayLCD.c: 125: PORTDbits.RD0 = 0;
  2345  000D92  9083               	bcf	3971,0,c	;volatile
  2346                           
  2347                           ;displayLCD.c: 126: Delay();
  2348  000D94  EC9A  F009         	call	_Delay	;wreg free
  2349                           
  2350                           ;displayLCD.c: 131: _delay((unsigned long)((5)*(48000000/4000.0)));
  2351  000D98  0E4E               	movlw	78
  2352  000D9A  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2353  000D9C  0EEB               	movlw	235
  2354  000D9E                     u2287:
  2355  000D9E  2EE8               	decfsz	wreg,f,c
  2356  000DA0  D7FE               	bra	u2287
  2357  000DA2  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2358  000DA4  D7FC               	bra	u2287
  2359  000DA6  F000               	nop	
  2360                           
  2361                           ;displayLCD.c: 134: PORTDbits.RD0 = 1;
  2362  000DA8  8083               	bsf	3971,0,c	;volatile
  2363                           
  2364                           ;displayLCD.c: 135: Delay();
  2365  000DAA  EC9A  F009         	call	_Delay	;wreg free
  2366                           
  2367                           ;displayLCD.c: 136: PORTDbits.RD0 = 0;
  2368  000DAE  9083               	bcf	3971,0,c	;volatile
  2369                           
  2370                           ;displayLCD.c: 137: Delay();
  2371  000DB0  EC9A  F009         	call	_Delay	;wreg free
  2372                           
  2373                           ;displayLCD.c: 142: _delay((unsigned long)((5)*(48000000/4000.0)));
  2374  000DB4  0E4E               	movlw	78
  2375  000DB6  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  2376  000DB8  0EEB               	movlw	235
  2377  000DBA                     u2297:
  2378  000DBA  2EE8               	decfsz	wreg,f,c
  2379  000DBC  D7FE               	bra	u2297
  2380  000DBE  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  2381  000DC0  D7FC               	bra	u2297
  2382  000DC2  F000               	nop	
  2383                           
  2384                           ;displayLCD.c: 145: PORTDbits.RD0 = 1;
  2385  000DC4  8083               	bsf	3971,0,c	;volatile
  2386                           
  2387                           ;displayLCD.c: 146: Delay();
  2388  000DC6  EC9A  F009         	call	_Delay	;wreg free
  2389                           
  2390                           ;displayLCD.c: 147: PORTDbits.RD0 = 0;
  2391  000DCA  9083               	bcf	3971,0,c	;volatile
  2392                           
  2393                           ;displayLCD.c: 148: Delay();
  2394  000DCC  EC9A  F009         	call	_Delay	;wreg free
  2395                           
  2396                           ;displayLCD.c: 151: PORTDbits.RD7=0;
  2397  000DD0  9E83               	bcf	3971,7,c	;volatile
  2398                           
  2399                           ;displayLCD.c: 152: PORTDbits.RD6=0;
  2400  000DD2  9C83               	bcf	3971,6,c	;volatile
  2401                           
  2402                           ;displayLCD.c: 153: PORTDbits.RD5=1;
  2403  000DD4  8A83               	bsf	3971,5,c	;volatile
  2404                           
  2405                           ;displayLCD.c: 154: PORTDbits.RD4=0;
  2406  000DD6  9883               	bcf	3971,4,c	;volatile
  2407                           
  2408                           ;displayLCD.c: 158: PORTDbits.RD0 = 1;
  2409  000DD8  8083               	bsf	3971,0,c	;volatile
  2410                           
  2411                           ;displayLCD.c: 159: Delay();
  2412  000DDA  EC9A  F009         	call	_Delay	;wreg free
  2413                           
  2414                           ;displayLCD.c: 160: PORTDbits.RD0 = 0;
  2415  000DDE  9083               	bcf	3971,0,c	;volatile
  2416                           
  2417                           ;displayLCD.c: 161: Delay();
  2418  000DE0  EC9A  F009         	call	_Delay	;wreg free
  2419                           
  2420                           ;displayLCD.c: 165: EscreveComandoLCD(0b00101000);
  2421  000DE4  0E28               	movlw	40
  2422  000DE6  ECFF  F006         	call	_EscreveComandoLCD
  2423                           
  2424                           ;displayLCD.c: 166: EscreveComandoLCD(0b00000110);
  2425  000DEA  0E06               	movlw	6
  2426  000DEC  ECFF  F006         	call	_EscreveComandoLCD
  2427                           
  2428                           ;displayLCD.c: 167: EscreveComandoLCD(0b00001110);
  2429  000DF0  0E0E               	movlw	14
  2430  000DF2  ECFF  F006         	call	_EscreveComandoLCD
  2431                           
  2432                           ;displayLCD.c: 168: EscreveComandoLCD(0b00000001);
  2433  000DF6  0E01               	movlw	1
  2434  000DF8  ECFF  F006         	call	_EscreveComandoLCD
  2435  000DFC  0012               	return		;funcret
  2436  000DFE                     __end_of_ConfiguraLCD:
  2437                           	opt stack 0
  2438                           tblptru	equ	0xFF8
  2439                           tblptrh	equ	0xFF7
  2440                           tblptrl	equ	0xFF6
  2441                           tablat	equ	0xFF5
  2442                           prodh	equ	0xFF4
  2443                           prodl	equ	0xFF3
  2444                           intcon	equ	0xFF2
  2445                           intcon2	equ	0xFF1
  2446                           intcon3	equ	0xFF0
  2447                           indf0	equ	0xFEF
  2448                           postinc0	equ	0xFEE
  2449                           fsr0h	equ	0xFEA
  2450                           fsr0l	equ	0xFE9
  2451                           wreg	equ	0xFE8
  2452                           postdec1	equ	0xFE5
  2453                           fsr1l	equ	0xFE1
  2454                           indf2	equ	0xFDF
  2455                           fsr2h	equ	0xFDA
  2456                           fsr2l	equ	0xFD9
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _EscreveComandoLCD *****************
  2460 ;; Defined at:
  2461 ;;		line 179 in file "displayLCD.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  cmd             1    wreg     unsigned char 
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  cmd             1   16[COMRAM] unsigned char 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg, status,2, status,0, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2475 ;;      Params:         0       0       0       0       0       0       0       0       0
  2476 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2477 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2478 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2479 ;;Total ram usage:        1 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    2
  2482 ;; This function calls:
  2483 ;;		_Delay
  2484 ;; This function is called by:
  2485 ;;		_ConfiguraLCD
  2486 ;;		_CriaCaractereLCD
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text14
  2491  000DFE                     __ptext14:
  2492                           	opt stack 0
  2493  000DFE                     _EscreveComandoLCD:
  2494                           	opt stack 27
  2495                           
  2496                           ;incstack = 0
  2497                           ;EscreveComandoLCD@cmd stored from wreg
  2498  000DFE  6E11               	movwf	EscreveComandoLCD@cmd,c
  2499                           
  2500                           ;displayLCD.c: 182: PORTDbits.RD2 = 0;
  2501  000E00  9483               	bcf	3971,2,c	;volatile
  2502                           
  2503                           ;displayLCD.c: 183: PORTDbits.RD1 = 0;
  2504  000E02  9283               	bcf	3971,1,c	;volatile
  2505                           
  2506                           ;displayLCD.c: 184: PORTDbits.RD0 = 0;
  2507  000E04  9083               	bcf	3971,0,c	;volatile
  2508                           
  2509                           ;displayLCD.c: 187: if(cmd&0b00010000){PORTDbits.RD4=1;}
  2510  000E06  A811               	btfss	EscreveComandoLCD@cmd,4,c
  2511  000E08  D002               	goto	l29
  2512  000E0A  8883               	bsf	3971,4,c	;volatile
  2513  000E0C  D001               	goto	l1908
  2514  000E0E                     l29:
  2515                           
  2516                           ;displayLCD.c: 188: else {PORTDbits.RD4=0;}
  2517  000E0E  9883               	bcf	3971,4,c	;volatile
  2518  000E10                     l1908:
  2519                           
  2520                           ;displayLCD.c: 189: if(cmd&0b00100000){PORTDbits.RD5=1;}
  2521  000E10  AA11               	btfss	EscreveComandoLCD@cmd,5,c
  2522  000E12  D002               	goto	l31
  2523  000E14  8A83               	bsf	3971,5,c	;volatile
  2524  000E16  D001               	goto	l1912
  2525  000E18                     l31:
  2526                           
  2527                           ;displayLCD.c: 190: else {PORTDbits.RD5=0;}
  2528  000E18  9A83               	bcf	3971,5,c	;volatile
  2529  000E1A                     l1912:
  2530                           
  2531                           ;displayLCD.c: 191: if(cmd&0b01000000){PORTDbits.RD6=1;}
  2532  000E1A  AC11               	btfss	EscreveComandoLCD@cmd,6,c
  2533  000E1C  D002               	goto	l33
  2534  000E1E  8C83               	bsf	3971,6,c	;volatile
  2535  000E20  D001               	goto	l1916
  2536  000E22                     l33:
  2537                           
  2538                           ;displayLCD.c: 192: else {PORTDbits.RD6=0;}
  2539  000E22  9C83               	bcf	3971,6,c	;volatile
  2540  000E24                     l1916:
  2541                           
  2542                           ;displayLCD.c: 193: if(cmd&0b10000000){PORTDbits.RD7=1;}
  2543  000E24  AE11               	btfss	EscreveComandoLCD@cmd,7,c
  2544  000E26  D002               	goto	l35
  2545  000E28  8E83               	bsf	3971,7,c	;volatile
  2546  000E2A  D001               	goto	l36
  2547  000E2C                     l35:
  2548                           
  2549                           ;displayLCD.c: 194: else {PORTDbits.RD7=0;}
  2550  000E2C  9E83               	bcf	3971,7,c	;volatile
  2551  000E2E                     l36:
  2552                           
  2553                           ;displayLCD.c: 197: PORTDbits.RD0 = 1;
  2554  000E2E  8083               	bsf	3971,0,c	;volatile
  2555                           
  2556                           ;displayLCD.c: 198: Delay();
  2557  000E30  EC9A  F009         	call	_Delay	;wreg free
  2558                           
  2559                           ;displayLCD.c: 199: PORTDbits.RD0 = 0;
  2560  000E34  9083               	bcf	3971,0,c	;volatile
  2561                           
  2562                           ;displayLCD.c: 200: Delay();
  2563  000E36  EC9A  F009         	call	_Delay	;wreg free
  2564                           
  2565                           ;displayLCD.c: 203: if(cmd&0b00000001){PORTDbits.RD4=1;}
  2566  000E3A  A011               	btfss	EscreveComandoLCD@cmd,0,c
  2567  000E3C  D002               	goto	l37
  2568  000E3E  8883               	bsf	3971,4,c	;volatile
  2569  000E40  D001               	goto	l38
  2570  000E42                     l37:
  2571                           
  2572                           ;displayLCD.c: 204: else {PORTDbits.RD4=0;}
  2573  000E42  9883               	bcf	3971,4,c	;volatile
  2574  000E44                     l38:
  2575                           
  2576                           ;displayLCD.c: 205: if(cmd&0b00000010){PORTDbits.RD5=1;}
  2577  000E44  A211               	btfss	EscreveComandoLCD@cmd,1,c
  2578  000E46  D002               	goto	l39
  2579  000E48  8A83               	bsf	3971,5,c	;volatile
  2580  000E4A  D001               	goto	l40
  2581  000E4C                     l39:
  2582                           
  2583                           ;displayLCD.c: 206: else {PORTDbits.RD5=0;}
  2584  000E4C  9A83               	bcf	3971,5,c	;volatile
  2585  000E4E                     l40:
  2586                           
  2587                           ;displayLCD.c: 207: if(cmd&0b00000100){PORTDbits.RD6=1;}
  2588  000E4E  A411               	btfss	EscreveComandoLCD@cmd,2,c
  2589  000E50  D002               	goto	l41
  2590  000E52  8C83               	bsf	3971,6,c	;volatile
  2591  000E54  D001               	goto	l42
  2592  000E56                     l41:
  2593                           
  2594                           ;displayLCD.c: 208: else {PORTDbits.RD6=0;}
  2595  000E56  9C83               	bcf	3971,6,c	;volatile
  2596  000E58                     l42:
  2597                           
  2598                           ;displayLCD.c: 209: if(cmd&0b00001000){PORTDbits.RD7=1;}
  2599  000E58  A611               	btfss	EscreveComandoLCD@cmd,3,c
  2600  000E5A  D002               	goto	l43
  2601  000E5C  8E83               	bsf	3971,7,c	;volatile
  2602  000E5E  D001               	goto	l44
  2603  000E60                     l43:
  2604                           
  2605                           ;displayLCD.c: 210: else {PORTDbits.RD7=0;}
  2606  000E60  9E83               	bcf	3971,7,c	;volatile
  2607  000E62                     l44:
  2608                           
  2609                           ;displayLCD.c: 213: PORTDbits.RD0 = 1;
  2610  000E62  8083               	bsf	3971,0,c	;volatile
  2611                           
  2612                           ;displayLCD.c: 214: Delay();
  2613  000E64  EC9A  F009         	call	_Delay	;wreg free
  2614                           
  2615                           ;displayLCD.c: 215: PORTDbits.RD0 = 0;
  2616  000E68  9083               	bcf	3971,0,c	;volatile
  2617                           
  2618                           ;displayLCD.c: 216: Delay();
  2619  000E6A  EC9A  F009         	call	_Delay	;wreg free
  2620                           
  2621                           ;displayLCD.c: 221: if (cmd==0x01 || cmd==0x02 || cmd==0x03)
  2622  000E6E  0411               	decf	EscreveComandoLCD@cmd,w,c
  2623  000E70  B4D8               	btfsc	status,2,c
  2624  000E72  D008               	goto	l1944
  2625  000E74  0E02               	movlw	2
  2626  000E76  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2627  000E78  B4D8               	btfsc	status,2,c
  2628  000E7A  D004               	goto	l1944
  2629  000E7C  0E03               	movlw	3
  2630  000E7E  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2631  000E80  A4D8               	btfss	status,2,c
  2632  000E82  0012               	return	
  2633  000E84                     l1944:
  2634                           
  2635                           ;displayLCD.c: 222: { Delay(); }
  2636  000E84  EC9A  F009         	call	_Delay	;wreg free
  2637  000E88  0012               	return	
  2638  000E8A                     __end_of_EscreveComandoLCD:
  2639                           	opt stack 0
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           prodh	equ	0xFF4
  2645                           prodl	equ	0xFF3
  2646                           intcon	equ	0xFF2
  2647                           intcon2	equ	0xFF1
  2648                           intcon3	equ	0xFF0
  2649                           indf0	equ	0xFEF
  2650                           postinc0	equ	0xFEE
  2651                           fsr0h	equ	0xFEA
  2652                           fsr0l	equ	0xFE9
  2653                           wreg	equ	0xFE8
  2654                           postdec1	equ	0xFE5
  2655                           fsr1l	equ	0xFE1
  2656                           indf2	equ	0xFDF
  2657                           fsr2h	equ	0xFDA
  2658                           fsr2l	equ	0xFD9
  2659                           status	equ	0xFD8
  2660                           
  2661 ;; *************** function _Delay *****************
  2662 ;; Defined at:
  2663 ;;		line 61 in file "displayLCD.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  Cnt2            1   15[COMRAM] unsigned char 
  2668 ;;  Cnt1            1   14[COMRAM] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2678 ;;      Params:         0       0       0       0       0       0       0       0       0
  2679 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2681 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2682 ;;Total ram usage:        2 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    1
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_ConfiguraLCD
  2689 ;;		_EscreveComandoLCD
  2690 ;;		_EnderecoCursor
  2691 ;;		_EscreveCaractereLCD
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text15
  2696  001334                     __ptext15:
  2697                           	opt stack 0
  2698  001334                     _Delay:
  2699                           	opt stack 26
  2700                           
  2701                           ;displayLCD.c: 63: unsigned char Cnt1, Cnt2;
  2702                           ;displayLCD.c: 65: for(Cnt1 = 0; Cnt1<100; Cnt1++)
  2703                           
  2704                           ;incstack = 0
  2705  001334  0E00               	movlw	0
  2706  001336  6E0F               	movwf	Delay@Cnt1,c
  2707  001338                     l1776:
  2708  001338  0E63               	movlw	99
  2709  00133A  640F               	cpfsgt	Delay@Cnt1,c
  2710  00133C  D001               	goto	l19
  2711  00133E  0012               	return	
  2712  001340                     l19:
  2713                           
  2714                           ;displayLCD.c: 66: {
  2715                           ;displayLCD.c: 67: __nop();
  2716  001340  F000               	nop	
  2717                           
  2718                           ;displayLCD.c: 68: for(Cnt2 = 0; Cnt2<50; Cnt2++)
  2719  001342  0E00               	movlw	0
  2720  001344  6E10               	movwf	Delay@Cnt2,c
  2721  001346                     l1782:
  2722  001346  0E31               	movlw	49
  2723  001348  6410               	cpfsgt	Delay@Cnt2,c
  2724  00134A  D001               	goto	l21
  2725  00134C  D003               	goto	l1790
  2726  00134E                     l21:
  2727                           
  2728                           ;displayLCD.c: 69: {
  2729                           ;displayLCD.c: 70: __nop();
  2730  00134E  F000               	nop	
  2731  001350  2A10               	incf	Delay@Cnt2,f,c
  2732  001352  D7F9               	goto	l1782
  2733  001354                     l1790:
  2734  001354  2A0F               	incf	Delay@Cnt1,f,c
  2735  001356  D7F0               	goto	l1776
  2736  001358                     __end_of_Delay:
  2737                           	opt stack 0
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           prodh	equ	0xFF4
  2743                           prodl	equ	0xFF3
  2744                           intcon	equ	0xFF2
  2745                           intcon2	equ	0xFF1
  2746                           intcon3	equ	0xFF0
  2747                           indf0	equ	0xFEF
  2748                           postinc0	equ	0xFEE
  2749                           fsr0h	equ	0xFEA
  2750                           fsr0l	equ	0xFE9
  2751                           wreg	equ	0xFE8
  2752                           postdec1	equ	0xFE5
  2753                           fsr1l	equ	0xFE1
  2754                           indf2	equ	0xFDF
  2755                           fsr2h	equ	0xFDA
  2756                           fsr2l	equ	0xFD9
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _Combustivel *****************
  2760 ;; Defined at:
  2761 ;;		line 15 in file "Fuel_Gauge.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2775 ;;      Params:         0       0       0       0       0       0       0       0       0
  2776 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2777 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2778 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2779 ;;Total ram usage:        2 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    3
  2782 ;; This function calls:
  2783 ;;		_TensaoBateria
  2784 ;;		_ValorCombustivel
  2785 ;;		___lwdiv
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text16
  2792  000806                     __ptext16:
  2793                           	opt stack 0
  2794  000806                     _Combustivel:
  2795                           	opt stack 27
  2796                           
  2797                           ;Fuel_Gauge.c: 16: while(primeiroFiltro == 1) {
  2798                           
  2799                           ;incstack = 0
  2800  000806  D00E               	goto	l2474
  2801  000808                     l2458:
  2802                           
  2803                           ;Fuel_Gauge.c: 17: for(primeiroFiltro = 0; primeiroFiltro <= 9; primeiroFiltro ++) {
  2804  000808  0E00               	movlw	0
  2805  00080A  6E35               	movwf	_primeiroFiltro,c
  2806  00080C                     l2460:
  2807  00080C  0E09               	movlw	9
  2808  00080E  6435               	cpfsgt	_primeiroFiltro,c
  2809  000810  D001               	goto	l2464
  2810  000812  D006               	goto	l2472
  2811  000814                     l2464:
  2812                           
  2813                           ;Fuel_Gauge.c: 18: TensaoBateria();
  2814  000814  EC30  F009         	call	_TensaoBateria	;wreg free
  2815                           
  2816                           ;Fuel_Gauge.c: 19: ValorCombustivel();
  2817  000818  EC45  F007         	call	_ValorCombustivel	;wreg free
  2818  00081C  2A35               	incf	_primeiroFiltro,f,c
  2819  00081E  D7F6               	goto	l2460
  2820  000820                     l2472:
  2821                           
  2822                           ;Fuel_Gauge.c: 20: }
  2823                           ;Fuel_Gauge.c: 22: primeiroFiltro = 0;
  2824  000820  0E00               	movlw	0
  2825  000822  6E35               	movwf	_primeiroFiltro,c
  2826  000824                     l2474:
  2827  000824  0435               	decf	_primeiroFiltro,w,c
  2828  000826  B4D8               	btfsc	status,2,c
  2829  000828  D7EF               	goto	l2458
  2830                           
  2831                           ;Fuel_Gauge.c: 23: }
  2832                           ;Fuel_Gauge.c: 25: if(tempoCombustivel >= 500) {
  2833  00082A  0EF4               	movlw	244
  2834  00082C  5C2E               	subwf	_tempoCombustivel,w,c
  2835  00082E  0E01               	movlw	1
  2836  000830  582F               	subwfb	_tempoCombustivel+1,w,c
  2837  000832  A0D8               	btfss	status,0,c
  2838  000834  D0DC               	goto	l2542
  2839                           
  2840                           ;Fuel_Gauge.c: 26: TensaoBateria();
  2841  000836  EC30  F009         	call	_TensaoBateria	;wreg free
  2842                           
  2843                           ;Fuel_Gauge.c: 27: ValorCombustivel();
  2844  00083A  EC45  F007         	call	_ValorCombustivel	;wreg free
  2845                           
  2846                           ;Fuel_Gauge.c: 28: valorADCMedia = (combArray[0] + combArray[1] + combArray[2] + combArr
      +                          ay[3] + combArray[4] + combArray[5] + combArray[6] + combArray[7] + combArray[8] + combA
      +                          rray[9]) / 10;
  2847  00083E  0100               	movlb	0	; () banked
  2848  000840  5164               	movf	(_combArray+4)& (0+255),w,b
  2849  000842  0100               	movlb	0	; () banked
  2850  000844  2562               	addwf	(_combArray+2)& (0+255),w,b
  2851  000846  0100               	movlb	0	; () banked
  2852  000848  6F7C               	movwf	??_Combustivel& (0+255),b
  2853  00084A  0100               	movlb	0	; () banked
  2854  00084C  5165               	movf	(_combArray+5)& (0+255),w,b
  2855  00084E  0100               	movlb	0	; () banked
  2856  000850  2163               	addwfc	(_combArray+3)& (0+255),w,b
  2857  000852  0100               	movlb	0	; () banked
  2858  000854  6F7D               	movwf	(??_Combustivel+1)& (0+255),b
  2859  000856  0100               	movlb	0	; () banked
  2860  000858  5166               	movf	(_combArray+6)& (0+255),w,b
  2861  00085A  0100               	movlb	0	; () banked
  2862  00085C  277C               	addwf	??_Combustivel& (0+255),f,b
  2863  00085E  0100               	movlb	0	; () banked
  2864  000860  5167               	movf	(_combArray+7)& (0+255),w,b
  2865  000862  0100               	movlb	0	; () banked
  2866  000864  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2867  000866  0100               	movlb	0	; () banked
  2868  000868  5168               	movf	(_combArray+8)& (0+255),w,b
  2869  00086A  0100               	movlb	0	; () banked
  2870  00086C  277C               	addwf	??_Combustivel& (0+255),f,b
  2871  00086E  0100               	movlb	0	; () banked
  2872  000870  5169               	movf	(_combArray+9)& (0+255),w,b
  2873  000872  0100               	movlb	0	; () banked
  2874  000874  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2875  000876  0100               	movlb	0	; () banked
  2876  000878  516A               	movf	(_combArray+10)& (0+255),w,b
  2877  00087A  0100               	movlb	0	; () banked
  2878  00087C  277C               	addwf	??_Combustivel& (0+255),f,b
  2879  00087E  0100               	movlb	0	; () banked
  2880  000880  516B               	movf	(_combArray+11)& (0+255),w,b
  2881  000882  0100               	movlb	0	; () banked
  2882  000884  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2883  000886  0100               	movlb	0	; () banked
  2884  000888  516C               	movf	(_combArray+12)& (0+255),w,b
  2885  00088A  0100               	movlb	0	; () banked
  2886  00088C  277C               	addwf	??_Combustivel& (0+255),f,b
  2887  00088E  0100               	movlb	0	; () banked
  2888  000890  516D               	movf	(_combArray+13)& (0+255),w,b
  2889  000892  0100               	movlb	0	; () banked
  2890  000894  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2891  000896  0100               	movlb	0	; () banked
  2892  000898  516E               	movf	(_combArray+14)& (0+255),w,b
  2893  00089A  0100               	movlb	0	; () banked
  2894  00089C  277C               	addwf	??_Combustivel& (0+255),f,b
  2895  00089E  0100               	movlb	0	; () banked
  2896  0008A0  516F               	movf	(_combArray+15)& (0+255),w,b
  2897  0008A2  0100               	movlb	0	; () banked
  2898  0008A4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2899  0008A6  0100               	movlb	0	; () banked
  2900  0008A8  5170               	movf	(_combArray+16)& (0+255),w,b
  2901  0008AA  0100               	movlb	0	; () banked
  2902  0008AC  277C               	addwf	??_Combustivel& (0+255),f,b
  2903  0008AE  0100               	movlb	0	; () banked
  2904  0008B0  5171               	movf	(_combArray+17)& (0+255),w,b
  2905  0008B2  0100               	movlb	0	; () banked
  2906  0008B4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2907  0008B6  0100               	movlb	0	; () banked
  2908  0008B8  5172               	movf	(_combArray+18)& (0+255),w,b
  2909  0008BA  0100               	movlb	0	; () banked
  2910  0008BC  277C               	addwf	??_Combustivel& (0+255),f,b
  2911  0008BE  0100               	movlb	0	; () banked
  2912  0008C0  5173               	movf	(_combArray+19)& (0+255),w,b
  2913  0008C2  0100               	movlb	0	; () banked
  2914  0008C4  237D               	addwfc	(??_Combustivel+1)& (0+255),f,b
  2915  0008C6  0100               	movlb	0	; () banked
  2916  0008C8  5160               	movf	_combArray& (0+255),w,b
  2917  0008CA  0100               	movlb	0	; () banked
  2918  0008CC  257C               	addwf	??_Combustivel& (0+255),w,b
  2919  0008CE  6E0F               	movwf	___lwdiv@dividend,c
  2920  0008D0  0100               	movlb	0	; () banked
  2921  0008D2  5161               	movf	(_combArray+1)& (0+255),w,b
  2922  0008D4  0100               	movlb	0	; () banked
  2923  0008D6  217D               	addwfc	(??_Combustivel+1)& (0+255),w,b
  2924  0008D8  6E10               	movwf	___lwdiv@dividend+1,c
  2925  0008DA  0E00               	movlw	0
  2926  0008DC  6E12               	movwf	___lwdiv@divisor+1,c
  2927  0008DE  0E0A               	movlw	10
  2928  0008E0  6E11               	movwf	___lwdiv@divisor,c
  2929  0008E2  ECE5  F008         	call	___lwdiv	;wreg free
  2930  0008E6  C00F  F030         	movff	?___lwdiv,_valorADCMedia
  2931  0008EA  C010  F031         	movff	?___lwdiv+1,_valorADCMedia+1
  2932                           
  2933                           ;Fuel_Gauge.c: 30: if(valorADCMedia <= 50) {
  2934  0008EE  5031               	movf	_valorADCMedia+1,w,c
  2935  0008F0  E106               	bnz	l2488
  2936  0008F2  0E33               	movlw	51
  2937  0008F4  5C30               	subwf	_valorADCMedia,w,c
  2938  0008F6  B0D8               	btfsc	status,0,c
  2939  0008F8  D002               	goto	l2488
  2940                           
  2941                           ;Fuel_Gauge.c: 31: PORTB = 0b00000000;
  2942  0008FA  0E00               	movlw	0
  2943  0008FC  6E81               	movwf	3969,c	;volatile
  2944  0008FE                     l2488:
  2945                           
  2946                           ;Fuel_Gauge.c: 32: }
  2947                           ;Fuel_Gauge.c: 33: if(valorADCMedia > 50 && valorADCMedia <= 85) {
  2948  0008FE  5031               	movf	_valorADCMedia+1,w,c
  2949  000900  E104               	bnz	u2080
  2950  000902  0E33               	movlw	51
  2951  000904  5C30               	subwf	_valorADCMedia,w,c
  2952  000906  A0D8               	btfss	status,0,c
  2953  000908  D008               	goto	l2494
  2954  00090A                     u2080:
  2955  00090A  5031               	movf	_valorADCMedia+1,w,c
  2956  00090C  E106               	bnz	l2494
  2957  00090E  0E56               	movlw	86
  2958  000910  5C30               	subwf	_valorADCMedia,w,c
  2959  000912  B0D8               	btfsc	status,0,c
  2960  000914  D002               	goto	l2494
  2961                           
  2962                           ;Fuel_Gauge.c: 34: PORTB = 0b010000000;
  2963  000916  0E80               	movlw	128
  2964  000918  6E81               	movwf	3969,c	;volatile
  2965  00091A                     l2494:
  2966                           
  2967                           ;Fuel_Gauge.c: 35: }
  2968                           ;Fuel_Gauge.c: 36: if(valorADCMedia > 85 && valorADCMedia <= 120) {
  2969  00091A  5031               	movf	_valorADCMedia+1,w,c
  2970  00091C  E104               	bnz	u2100
  2971  00091E  0E56               	movlw	86
  2972  000920  5C30               	subwf	_valorADCMedia,w,c
  2973  000922  A0D8               	btfss	status,0,c
  2974  000924  D008               	goto	l2500
  2975  000926                     u2100:
  2976  000926  5031               	movf	_valorADCMedia+1,w,c
  2977  000928  E106               	bnz	l2500
  2978  00092A  0E79               	movlw	121
  2979  00092C  5C30               	subwf	_valorADCMedia,w,c
  2980  00092E  B0D8               	btfsc	status,0,c
  2981  000930  D002               	goto	l2500
  2982                           
  2983                           ;Fuel_Gauge.c: 37: PORTB = 0b11000000;
  2984  000932  0EC0               	movlw	192
  2985  000934  6E81               	movwf	3969,c	;volatile
  2986  000936                     l2500:
  2987                           
  2988                           ;Fuel_Gauge.c: 38: }
  2989                           ;Fuel_Gauge.c: 39: if(valorADCMedia > 120 && valorADCMedia<= 155) {
  2990  000936  5031               	movf	_valorADCMedia+1,w,c
  2991  000938  E104               	bnz	u2120
  2992  00093A  0E79               	movlw	121
  2993  00093C  5C30               	subwf	_valorADCMedia,w,c
  2994  00093E  A0D8               	btfss	status,0,c
  2995  000940  D008               	goto	l2506
  2996  000942                     u2120:
  2997  000942  5031               	movf	_valorADCMedia+1,w,c
  2998  000944  E106               	bnz	l2506
  2999  000946  0E9C               	movlw	156
  3000  000948  5C30               	subwf	_valorADCMedia,w,c
  3001  00094A  B0D8               	btfsc	status,0,c
  3002  00094C  D002               	goto	l2506
  3003                           
  3004                           ;Fuel_Gauge.c: 40: PORTB = 0b11100000;
  3005  00094E  0EE0               	movlw	224
  3006  000950  6E81               	movwf	3969,c	;volatile
  3007  000952                     l2506:
  3008                           
  3009                           ;Fuel_Gauge.c: 41: }
  3010                           ;Fuel_Gauge.c: 42: if(valorADCMedia > 155 && valorADCMedia <= 190) {
  3011  000952  5031               	movf	_valorADCMedia+1,w,c
  3012  000954  E104               	bnz	u2140
  3013  000956  0E9C               	movlw	156
  3014  000958  5C30               	subwf	_valorADCMedia,w,c
  3015  00095A  A0D8               	btfss	status,0,c
  3016  00095C  D008               	goto	l2512
  3017  00095E                     u2140:
  3018  00095E  5031               	movf	_valorADCMedia+1,w,c
  3019  000960  E106               	bnz	l2512
  3020  000962  0EBF               	movlw	191
  3021  000964  5C30               	subwf	_valorADCMedia,w,c
  3022  000966  B0D8               	btfsc	status,0,c
  3023  000968  D002               	goto	l2512
  3024                           
  3025                           ;Fuel_Gauge.c: 43: PORTB = 0b11110000;
  3026  00096A  0EF0               	movlw	240
  3027  00096C  6E81               	movwf	3969,c	;volatile
  3028  00096E                     l2512:
  3029                           
  3030                           ;Fuel_Gauge.c: 44: }
  3031                           ;Fuel_Gauge.c: 45: if(valorADCMedia > 190 && valorADCMedia <= 225) {
  3032  00096E  5031               	movf	_valorADCMedia+1,w,c
  3033  000970  E104               	bnz	u2160
  3034  000972  0EBF               	movlw	191
  3035  000974  5C30               	subwf	_valorADCMedia,w,c
  3036  000976  A0D8               	btfss	status,0,c
  3037  000978  D008               	goto	l2518
  3038  00097A                     u2160:
  3039  00097A  5031               	movf	_valorADCMedia+1,w,c
  3040  00097C  E106               	bnz	l2518
  3041  00097E  0EE2               	movlw	226
  3042  000980  5C30               	subwf	_valorADCMedia,w,c
  3043  000982  B0D8               	btfsc	status,0,c
  3044  000984  D002               	goto	l2518
  3045                           
  3046                           ;Fuel_Gauge.c: 46: PORTB = 0b11111000;
  3047  000986  0EF8               	movlw	248
  3048  000988  6E81               	movwf	3969,c	;volatile
  3049  00098A                     l2518:
  3050                           
  3051                           ;Fuel_Gauge.c: 47: }
  3052                           ;Fuel_Gauge.c: 48: if(valorADCMedia > 225 && valorADCMedia <= 268) {
  3053  00098A  5031               	movf	_valorADCMedia+1,w,c
  3054  00098C  E104               	bnz	u2180
  3055  00098E  0EE2               	movlw	226
  3056  000990  5C30               	subwf	_valorADCMedia,w,c
  3057  000992  A0D8               	btfss	status,0,c
  3058  000994  D008               	goto	l2524
  3059  000996                     u2180:
  3060  000996  0E0D               	movlw	13
  3061  000998  5C30               	subwf	_valorADCMedia,w,c
  3062  00099A  0E01               	movlw	1
  3063  00099C  5831               	subwfb	_valorADCMedia+1,w,c
  3064  00099E  B0D8               	btfsc	status,0,c
  3065  0009A0  D002               	goto	l2524
  3066                           
  3067                           ;Fuel_Gauge.c: 49: PORTB = 0b11111100;
  3068  0009A2  0EFC               	movlw	252
  3069  0009A4  6E81               	movwf	3969,c	;volatile
  3070  0009A6                     l2524:
  3071                           
  3072                           ;Fuel_Gauge.c: 50: }
  3073                           ;Fuel_Gauge.c: 51: if(valorADCMedia > 268 && valorADCMedia <= 370) {
  3074  0009A6  0E0D               	movlw	13
  3075  0009A8  5C30               	subwf	_valorADCMedia,w,c
  3076  0009AA  0E01               	movlw	1
  3077  0009AC  5831               	subwfb	_valorADCMedia+1,w,c
  3078  0009AE  A0D8               	btfss	status,0,c
  3079  0009B0  D008               	goto	l2530
  3080  0009B2  0E73               	movlw	115
  3081  0009B4  5C30               	subwf	_valorADCMedia,w,c
  3082  0009B6  0E01               	movlw	1
  3083  0009B8  5831               	subwfb	_valorADCMedia+1,w,c
  3084  0009BA  B0D8               	btfsc	status,0,c
  3085  0009BC  D002               	goto	l2530
  3086                           
  3087                           ;Fuel_Gauge.c: 52: PORTB = 0b11111110;
  3088  0009BE  0EFE               	movlw	254
  3089  0009C0  6E81               	movwf	3969,c	;volatile
  3090  0009C2                     l2530:
  3091                           
  3092                           ;Fuel_Gauge.c: 53: }
  3093                           ;Fuel_Gauge.c: 54: if(valorADCMedia > 370) {
  3094  0009C2  0E73               	movlw	115
  3095  0009C4  5C30               	subwf	_valorADCMedia,w,c
  3096  0009C6  0E01               	movlw	1
  3097  0009C8  5831               	subwfb	_valorADCMedia+1,w,c
  3098  0009CA  B0D8               	btfsc	status,0,c
  3099                           
  3100                           ;Fuel_Gauge.c: 55: PORTB = 0b11111111;
  3101  0009CC  6881               	setf	3969,c	;volatile
  3102                           
  3103                           ;Fuel_Gauge.c: 56: }
  3104                           ;Fuel_Gauge.c: 57: if(valorADCMedia> 345) {
  3105  0009CE  0E5A               	movlw	90
  3106  0009D0  5C30               	subwf	_valorADCMedia,w,c
  3107  0009D2  0E01               	movlw	1
  3108  0009D4  5831               	subwfb	_valorADCMedia+1,w,c
  3109  0009D6  A0D8               	btfss	status,0,c
  3110  0009D8  D003               	goto	l2538
  3111                           
  3112                           ;Fuel_Gauge.c: 58: reserva = 1;
  3113  0009DA  0E01               	movlw	1
  3114  0009DC  6E36               	movwf	_reserva,c
  3115                           
  3116                           ;Fuel_Gauge.c: 59: }
  3117  0009DE  D003               	goto	l401
  3118  0009E0                     l2538:
  3119                           
  3120                           ;Fuel_Gauge.c: 60: else {
  3121                           ;Fuel_Gauge.c: 61: reserva = 0;
  3122  0009E0  0E00               	movlw	0
  3123  0009E2  6E36               	movwf	_reserva,c
  3124                           
  3125                           ;Fuel_Gauge.c: 62: PORTCbits.RC0 = 1;
  3126  0009E4  8082               	bsf	3970,0,c	;volatile
  3127  0009E6                     l401:
  3128                           
  3129                           ;Fuel_Gauge.c: 63: }
  3130                           ;Fuel_Gauge.c: 65: tempoCombustivel = 0;
  3131  0009E6  0E00               	movlw	0
  3132  0009E8  6E2F               	movwf	_tempoCombustivel+1,c
  3133  0009EA  0E00               	movlw	0
  3134  0009EC  6E2E               	movwf	_tempoCombustivel,c
  3135  0009EE                     l2542:
  3136                           
  3137                           ;Fuel_Gauge.c: 67: }
  3138                           ;Fuel_Gauge.c: 69: if(countLed >= 1000 && reserva ==1) {
  3139  0009EE  0EE8               	movlw	232
  3140  0009F0  5C2C               	subwf	_countLed,w,c
  3141  0009F2  0E03               	movlw	3
  3142  0009F4  582D               	subwfb	_countLed+1,w,c
  3143  0009F6  A0D8               	btfss	status,0,c
  3144  0009F8  0012               	return	
  3145  0009FA  0436               	decf	_reserva,w,c
  3146  0009FC  A4D8               	btfss	status,2,c
  3147  0009FE  0012               	return	
  3148                           
  3149                           ;Fuel_Gauge.c: 70: PORTCbits.RC0 = ~PORTCbits.RC0;
  3150  000A00  A082               	btfss	3970,0,c	;volatile
  3151  000A02  D002               	goto	u2260
  3152  000A04  0E01               	movlw	1
  3153  000A06  D001               	goto	u2266
  3154  000A08                     u2260:
  3155  000A08  0E00               	movlw	0
  3156  000A0A                     u2266:
  3157  000A0A  0AFF               	xorlw	255
  3158  000A0C  0100               	movlb	0	; () banked
  3159  000A0E  6F7C               	movwf	??_Combustivel& (0+255),b
  3160  000A10  5082               	movf	3970,w,c	;volatile
  3161  000A12  0100               	movlb	0	; () banked
  3162  000A14  197C               	xorwf	??_Combustivel& (0+255),w,b
  3163  000A16  0BFE               	andlw	-2
  3164  000A18  197C               	xorwf	??_Combustivel& (0+255),w,b
  3165  000A1A  6E82               	movwf	3970,c	;volatile
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;Fuel_Gauge.c: 71: countLed = 0;
  3169  000A1C  0E00               	movlw	0
  3170  000A1E  6E2D               	movwf	_countLed+1,c
  3171  000A20  0E00               	movlw	0
  3172  000A22  6E2C               	movwf	_countLed,c
  3173  000A24  0012               	return	
  3174  000A26                     __end_of_Combustivel:
  3175                           	opt stack 0
  3176                           tblptru	equ	0xFF8
  3177                           tblptrh	equ	0xFF7
  3178                           tblptrl	equ	0xFF6
  3179                           tablat	equ	0xFF5
  3180                           prodh	equ	0xFF4
  3181                           prodl	equ	0xFF3
  3182                           intcon	equ	0xFF2
  3183                           intcon2	equ	0xFF1
  3184                           intcon3	equ	0xFF0
  3185                           indf0	equ	0xFEF
  3186                           postinc0	equ	0xFEE
  3187                           fsr0h	equ	0xFEA
  3188                           fsr0l	equ	0xFE9
  3189                           wreg	equ	0xFE8
  3190                           postdec1	equ	0xFE5
  3191                           fsr1l	equ	0xFE1
  3192                           indf2	equ	0xFDF
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function ___lwdiv *****************
  3198 ;; Defined at:
  3199 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  dividend        2   14[COMRAM] unsigned int 
  3202 ;;  divisor         2   16[COMRAM] unsigned int 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  quotient        2   18[COMRAM] unsigned int 
  3205 ;;  counter         1   20[COMRAM] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  2   14[COMRAM] unsigned int 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3215 ;;      Params:         4       0       0       0       0       0       0       0       0
  3216 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3218 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3219 ;;Total ram usage:        7 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    1
  3222 ;; This function calls:
  3223 ;;		Nothing
  3224 ;; This function is called by:
  3225 ;;		_Combustivel
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text17
  3230  0011CA                     __ptext17:
  3231                           	opt stack 0
  3232  0011CA                     ___lwdiv:
  3233                           	opt stack 28
  3234                           
  3235                           ;incstack = 0
  3236  0011CA  0E00               	movlw	0
  3237  0011CC  6E14               	movwf	___lwdiv@quotient+1,c
  3238  0011CE  0E00               	movlw	0
  3239  0011D0  6E13               	movwf	___lwdiv@quotient,c
  3240  0011D2  5011               	movf	___lwdiv@divisor,w,c
  3241  0011D4  1012               	iorwf	___lwdiv@divisor+1,w,c
  3242  0011D6  B4D8               	btfsc	status,2,c
  3243  0011D8  D01C               	goto	l863
  3244  0011DA  0E01               	movlw	1
  3245  0011DC  6E15               	movwf	___lwdiv@counter,c
  3246  0011DE  D004               	goto	l2028
  3247  0011E0                     l2026:
  3248  0011E0  90D8               	bcf	status,0,c
  3249  0011E2  3611               	rlcf	___lwdiv@divisor,f,c
  3250  0011E4  3612               	rlcf	___lwdiv@divisor+1,f,c
  3251  0011E6  2A15               	incf	___lwdiv@counter,f,c
  3252  0011E8                     l2028:
  3253  0011E8  AE12               	btfss	___lwdiv@divisor+1,7,c
  3254  0011EA  D7FA               	goto	l2026
  3255  0011EC                     l2030:
  3256  0011EC  90D8               	bcf	status,0,c
  3257  0011EE  3613               	rlcf	___lwdiv@quotient,f,c
  3258  0011F0  3614               	rlcf	___lwdiv@quotient+1,f,c
  3259  0011F2  5011               	movf	___lwdiv@divisor,w,c
  3260  0011F4  5C0F               	subwf	___lwdiv@dividend,w,c
  3261  0011F6  5012               	movf	___lwdiv@divisor+1,w,c
  3262  0011F8  5810               	subwfb	___lwdiv@dividend+1,w,c
  3263  0011FA  A0D8               	btfss	status,0,c
  3264  0011FC  D005               	goto	l2038
  3265  0011FE  5011               	movf	___lwdiv@divisor,w,c
  3266  001200  5E0F               	subwf	___lwdiv@dividend,f,c
  3267  001202  5012               	movf	___lwdiv@divisor+1,w,c
  3268  001204  5A10               	subwfb	___lwdiv@dividend+1,f,c
  3269  001206  8013               	bsf	___lwdiv@quotient,0,c
  3270  001208                     l2038:
  3271  001208  90D8               	bcf	status,0,c
  3272  00120A  3212               	rrcf	___lwdiv@divisor+1,f,c
  3273  00120C  3211               	rrcf	___lwdiv@divisor,f,c
  3274  00120E  2E15               	decfsz	___lwdiv@counter,f,c
  3275  001210  D7ED               	goto	l2030
  3276  001212                     l863:
  3277  001212  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  3278  001216  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3279  00121A  0012               	return		;funcret
  3280  00121C                     __end_of___lwdiv:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           intcon	equ	0xFF2
  3289                           intcon2	equ	0xFF1
  3290                           intcon3	equ	0xFF0
  3291                           indf0	equ	0xFEF
  3292                           postinc0	equ	0xFEE
  3293                           fsr0h	equ	0xFEA
  3294                           fsr0l	equ	0xFE9
  3295                           wreg	equ	0xFE8
  3296                           postdec1	equ	0xFE5
  3297                           fsr1l	equ	0xFE1
  3298                           indf2	equ	0xFDF
  3299                           fsr2h	equ	0xFDA
  3300                           fsr2l	equ	0xFD9
  3301                           status	equ	0xFD8
  3302                           
  3303 ;; *************** function _ValorCombustivel *****************
  3304 ;; Defined at:
  3305 ;;		line 85 in file "Fuel_Gauge.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3319 ;;      Params:         0       0       0       0       0       0       0       0       0
  3320 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3322 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3323 ;;Total ram usage:        0 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    2
  3326 ;; This function calls:
  3327 ;;		_ADCRead
  3328 ;;		___lldiv
  3329 ;;		___lmul
  3330 ;; This function is called by:
  3331 ;;		_Combustivel
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text18
  3336  000E8A                     __ptext18:
  3337                           	opt stack 0
  3338  000E8A                     _ValorCombustivel:
  3339                           	opt stack 27
  3340                           
  3341                           ;Fuel_Gauge.c: 86: ADCON0bits.CHS = 0;
  3342                           
  3343                           ;incstack = 0
  3344  000E8A  94C2               	bcf	4034,2,c	;volatile
  3345  000E8C  96C2               	bcf	4034,3,c	;volatile
  3346  000E8E  98C2               	bcf	4034,4,c	;volatile
  3347  000E90  9AC2               	bcf	4034,5,c	;volatile
  3348                           
  3349                           ;Fuel_Gauge.c: 87: ADCRead();
  3350  000E92  EC51  F009         	call	_ADCRead	;wreg free
  3351                           
  3352                           ;Fuel_Gauge.c: 89: valorADC = ((valorADC * 100000) / porcentagemTensao);
  3353  000E96  C038  F00F         	movff	_valorADC,___lmul@multiplier
  3354  000E9A  C039  F010         	movff	_valorADC+1,___lmul@multiplier+1
  3355  000E9E  C03A  F011         	movff	_valorADC+2,___lmul@multiplier+2
  3356  000EA2  C03B  F012         	movff	_valorADC+3,___lmul@multiplier+3
  3357  000EA6  0EA0               	movlw	160
  3358  000EA8  6E13               	movwf	___lmul@multiplicand,c
  3359  000EAA  0E86               	movlw	134
  3360  000EAC  6E14               	movwf	___lmul@multiplicand+1,c
  3361  000EAE  0E01               	movlw	1
  3362  000EB0  6E15               	movwf	___lmul@multiplicand+2,c
  3363  000EB2  0E00               	movlw	0
  3364  000EB4  6E16               	movwf	___lmul@multiplicand+3,c
  3365  000EB6  EC91  F008         	call	___lmul	;wreg free
  3366  000EBA  C00F  F074         	movff	?___lmul,___lldiv@dividend
  3367  000EBE  C010  F075         	movff	?___lmul+1,___lldiv@dividend+1
  3368  000EC2  C011  F076         	movff	?___lmul+2,___lldiv@dividend+2
  3369  000EC6  C012  F077         	movff	?___lmul+3,___lldiv@dividend+3
  3370  000ECA  C020  F078         	movff	_porcentagemTensao,___lldiv@divisor
  3371  000ECE  C021  F079         	movff	_porcentagemTensao+1,___lldiv@divisor+1
  3372  000ED2  C022  F07A         	movff	_porcentagemTensao+2,___lldiv@divisor+2
  3373  000ED6  C023  F07B         	movff	_porcentagemTensao+3,___lldiv@divisor+3
  3374  000EDA  EC58  F006         	call	___lldiv	;wreg free
  3375  000EDE  C074  F038         	movff	?___lldiv,_valorADC
  3376  000EE2  C075  F039         	movff	?___lldiv+1,_valorADC+1
  3377  000EE6  C076  F03A         	movff	?___lldiv+2,_valorADC+2
  3378  000EEA  C077  F03B         	movff	?___lldiv+3,_valorADC+3
  3379                           
  3380                           ;Fuel_Gauge.c: 91: combArray[numeroC] = valorADC;
  3381  000EEE  5034               	movf	_numeroC,w,c
  3382  000EF0  0D02               	mullw	2
  3383  000EF2  0E60               	movlw	low _combArray
  3384  000EF4  24F3               	addwf	prodl,w,c
  3385  000EF6  6ED9               	movwf	fsr2l,c
  3386  000EF8  0E00               	movlw	high _combArray
  3387  000EFA  20F4               	addwfc	prodh,w,c
  3388  000EFC  6EDA               	movwf	fsr2h,c
  3389  000EFE  C038  FFDE         	movff	_valorADC,postinc2
  3390  000F02  C039  FFDD         	movff	_valorADC+1,postdec2
  3391                           
  3392                           ;Fuel_Gauge.c: 92: numeroC ++;
  3393  000F06  2A34               	incf	_numeroC,f,c
  3394                           
  3395                           ;Fuel_Gauge.c: 94: if(numeroC == 10){
  3396  000F08  0E0A               	movlw	10
  3397  000F0A  1834               	xorwf	_numeroC,w,c
  3398  000F0C  A4D8               	btfss	status,2,c
  3399  000F0E  0012               	return	
  3400                           
  3401                           ;Fuel_Gauge.c: 95: numeroC = 0;
  3402  000F10  0E00               	movlw	0
  3403  000F12  6E34               	movwf	_numeroC,c
  3404  000F14  0012               	return	
  3405  000F16                     __end_of_ValorCombustivel:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodh	equ	0xFF4
  3412                           prodl	equ	0xFF3
  3413                           intcon	equ	0xFF2
  3414                           intcon2	equ	0xFF1
  3415                           intcon3	equ	0xFF0
  3416                           indf0	equ	0xFEF
  3417                           postinc0	equ	0xFEE
  3418                           fsr0h	equ	0xFEA
  3419                           fsr0l	equ	0xFE9
  3420                           wreg	equ	0xFE8
  3421                           postdec1	equ	0xFE5
  3422                           fsr1l	equ	0xFE1
  3423                           indf2	equ	0xFDF
  3424                           postinc2	equ	0xFDE
  3425                           postdec2	equ	0xFDD
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function ___lldiv *****************
  3431 ;; Defined at:
  3432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  dividend        4    0[BANK0 ] unsigned long 
  3435 ;;  divisor         4    4[BANK0 ] unsigned long 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  quotient        4   26[COMRAM] unsigned long 
  3438 ;;  counter         1   30[COMRAM] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  4    0[BANK0 ] unsigned long 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3448 ;;      Params:         0       8       0       0       0       0       0       0       0
  3449 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3451 ;;      Totals:         5       8       0       0       0       0       0       0       0
  3452 ;;Total ram usage:       13 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    1
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_ValorCombustivel
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text19
  3463  000CB0                     __ptext19:
  3464                           	opt stack 0
  3465  000CB0                     ___lldiv:
  3466                           	opt stack 27
  3467                           
  3468                           ;incstack = 0
  3469  000CB0  0E00               	movlw	0
  3470  000CB2  6E1B               	movwf	___lldiv@quotient,c
  3471  000CB4  0E00               	movlw	0
  3472  000CB6  6E1C               	movwf	___lldiv@quotient+1,c
  3473  000CB8  0E00               	movlw	0
  3474  000CBA  6E1D               	movwf	___lldiv@quotient+2,c
  3475  000CBC  0E00               	movlw	0
  3476  000CBE  6E1E               	movwf	___lldiv@quotient+3,c
  3477  000CC0  0100               	movlb	0	; () banked
  3478  000CC2  5178               	movf	___lldiv@divisor& (0+255),w,b
  3479  000CC4  0100               	movlb	0	; () banked
  3480  000CC6  1179               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3481  000CC8  0100               	movlb	0	; () banked
  3482  000CCA  117A               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3483  000CCC  0100               	movlb	0	; () banked
  3484  000CCE  117B               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3485  000CD0  B4D8               	btfsc	status,2,c
  3486  000CD2  D03D               	goto	l810
  3487                           
  3488                           ; BSR set to: 0
  3489  000CD4  0E01               	movlw	1
  3490  000CD6  6E1F               	movwf	___lldiv@counter,c
  3491  000CD8  D007               	goto	l2430
  3492  000CDA                     l2428:
  3493                           
  3494                           ; BSR set to: 0
  3495  000CDA  0100               	movlb	0	; () banked
  3496  000CDC  90D8               	bcf	status,0,c
  3497  000CDE  3778               	rlcf	___lldiv@divisor& (0+255),f,b
  3498  000CE0  3779               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3499  000CE2  377A               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3500  000CE4  377B               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3501  000CE6  2A1F               	incf	___lldiv@counter,f,c
  3502  000CE8                     l2430:
  3503                           
  3504                           ; BSR set to: 0
  3505  000CE8  0100               	movlb	0	; () banked
  3506  000CEA  AF7B               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3507  000CEC  D7F6               	goto	l2428
  3508  000CEE                     l2432:
  3509                           
  3510                           ; BSR set to: 0
  3511  000CEE  90D8               	bcf	status,0,c
  3512  000CF0  361B               	rlcf	___lldiv@quotient,f,c
  3513  000CF2  361C               	rlcf	___lldiv@quotient+1,f,c
  3514  000CF4  361D               	rlcf	___lldiv@quotient+2,f,c
  3515  000CF6  361E               	rlcf	___lldiv@quotient+3,f,c
  3516                           
  3517                           ; BSR set to: 0
  3518  000CF8  0100               	movlb	0	; () banked
  3519  000CFA  5178               	movf	___lldiv@divisor& (0+255),w,b
  3520  000CFC  0100               	movlb	0	; () banked
  3521  000CFE  5D74               	subwf	___lldiv@dividend& (0+255),w,b
  3522  000D00  0100               	movlb	0	; () banked
  3523  000D02  5179               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3524  000D04  0100               	movlb	0	; () banked
  3525  000D06  5975               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3526  000D08  0100               	movlb	0	; () banked
  3527  000D0A  517A               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3528  000D0C  0100               	movlb	0	; () banked
  3529  000D0E  5976               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3530  000D10  0100               	movlb	0	; () banked
  3531  000D12  517B               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3532  000D14  0100               	movlb	0	; () banked
  3533  000D16  5977               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3534  000D18  A0D8               	btfss	status,0,c
  3535  000D1A  D011               	goto	l2440
  3536                           
  3537                           ; BSR set to: 0
  3538  000D1C  0100               	movlb	0	; () banked
  3539  000D1E  5178               	movf	___lldiv@divisor& (0+255),w,b
  3540  000D20  0100               	movlb	0	; () banked
  3541  000D22  5F74               	subwf	___lldiv@dividend& (0+255),f,b
  3542  000D24  0100               	movlb	0	; () banked
  3543  000D26  5179               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3544  000D28  0100               	movlb	0	; () banked
  3545  000D2A  5B75               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3546  000D2C  0100               	movlb	0	; () banked
  3547  000D2E  517A               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3548  000D30  0100               	movlb	0	; () banked
  3549  000D32  5B76               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3550  000D34  0100               	movlb	0	; () banked
  3551  000D36  517B               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3552  000D38  0100               	movlb	0	; () banked
  3553  000D3A  5B77               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3554                           
  3555                           ; BSR set to: 0
  3556  000D3C  801B               	bsf	___lldiv@quotient,0,c
  3557  000D3E                     l2440:
  3558                           
  3559                           ; BSR set to: 0
  3560  000D3E  0100               	movlb	0	; () banked
  3561  000D40  90D8               	bcf	status,0,c
  3562  000D42  337B               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3563  000D44  337A               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3564  000D46  3379               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3565  000D48  3378               	rrcf	___lldiv@divisor& (0+255),f,b
  3566                           
  3567                           ; BSR set to: 0
  3568  000D4A  2E1F               	decfsz	___lldiv@counter,f,c
  3569  000D4C  D7D0               	goto	l2432
  3570  000D4E                     l810:
  3571                           
  3572                           ; BSR set to: 0
  3573  000D4E  C01B  F074         	movff	___lldiv@quotient,?___lldiv
  3574  000D52  C01C  F075         	movff	___lldiv@quotient+1,?___lldiv+1
  3575  000D56  C01D  F076         	movff	___lldiv@quotient+2,?___lldiv+2
  3576  000D5A  C01E  F077         	movff	___lldiv@quotient+3,?___lldiv+3
  3577                           
  3578                           ; BSR set to: 0
  3579  000D5E  0012               	return		;funcret
  3580  000D60                     __end_of___lldiv:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           intcon2	equ	0xFF1
  3590                           intcon3	equ	0xFF0
  3591                           indf0	equ	0xFEF
  3592                           postinc0	equ	0xFEE
  3593                           fsr0h	equ	0xFEA
  3594                           fsr0l	equ	0xFE9
  3595                           wreg	equ	0xFE8
  3596                           postdec1	equ	0xFE5
  3597                           fsr1l	equ	0xFE1
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           postdec2	equ	0xFDD
  3601                           fsr2h	equ	0xFDA
  3602                           fsr2l	equ	0xFD9
  3603                           status	equ	0xFD8
  3604                           
  3605 ;; *************** function _TensaoBateria *****************
  3606 ;; Defined at:
  3607 ;;		line 77 in file "Fuel_Gauge.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		wreg, status,2, status,0, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3621 ;;      Params:         0       0       0       0       0       0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3623 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3624 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3625 ;;Total ram usage:        0 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    2
  3628 ;; This function calls:
  3629 ;;		_ADCRead
  3630 ;;		___lmul
  3631 ;; This function is called by:
  3632 ;;		_Combustivel
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text20
  3637  001260                     __ptext20:
  3638                           	opt stack 0
  3639  001260                     _TensaoBateria:
  3640                           	opt stack 27
  3641                           
  3642                           ;Fuel_Gauge.c: 78: ADCON0bits.CHS = 1 ;
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;incstack = 0
  3646  001260  50C2               	movf	4034,w,c	;volatile
  3647  001262  0BC3               	andlw	-61
  3648  001264  0904               	iorlw	4
  3649  001266  6EC2               	movwf	4034,c	;volatile
  3650                           
  3651                           ;Fuel_Gauge.c: 79: ADCRead();
  3652  001268  EC51  F009         	call	_ADCRead	;wreg free
  3653                           
  3654                           ;Fuel_Gauge.c: 82: porcentagemTensao = 333 * valorADC;
  3655  00126C  C038  F00F         	movff	_valorADC,___lmul@multiplier
  3656  001270  C039  F010         	movff	_valorADC+1,___lmul@multiplier+1
  3657  001274  C03A  F011         	movff	_valorADC+2,___lmul@multiplier+2
  3658  001278  C03B  F012         	movff	_valorADC+3,___lmul@multiplier+3
  3659  00127C  0E4D               	movlw	77
  3660  00127E  6E13               	movwf	___lmul@multiplicand,c
  3661  001280  0E01               	movlw	1
  3662  001282  6E14               	movwf	___lmul@multiplicand+1,c
  3663  001284  0E00               	movlw	0
  3664  001286  6E15               	movwf	___lmul@multiplicand+2,c
  3665  001288  0E00               	movlw	0
  3666  00128A  6E16               	movwf	___lmul@multiplicand+3,c
  3667  00128C  EC91  F008         	call	___lmul	;wreg free
  3668  001290  C00F  F020         	movff	?___lmul,_porcentagemTensao
  3669  001294  C010  F021         	movff	?___lmul+1,_porcentagemTensao+1
  3670  001298  C011  F022         	movff	?___lmul+2,_porcentagemTensao+2
  3671  00129C  C012  F023         	movff	?___lmul+3,_porcentagemTensao+3
  3672  0012A0  0012               	return		;funcret
  3673  0012A2                     __end_of_TensaoBateria:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           intcon	equ	0xFF2
  3682                           intcon2	equ	0xFF1
  3683                           intcon3	equ	0xFF0
  3684                           indf0	equ	0xFEF
  3685                           postinc0	equ	0xFEE
  3686                           fsr0h	equ	0xFEA
  3687                           fsr0l	equ	0xFE9
  3688                           wreg	equ	0xFE8
  3689                           postdec1	equ	0xFE5
  3690                           fsr1l	equ	0xFE1
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           postdec2	equ	0xFDD
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function ___lmul *****************
  3699 ;; Defined at:
  3700 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  multiplier      4   14[COMRAM] unsigned long 
  3703 ;;  multiplicand    4   18[COMRAM] unsigned long 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  product         4   22[COMRAM] unsigned long 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  4   14[COMRAM] unsigned long 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3715 ;;      Params:         8       0       0       0       0       0       0       0       0
  3716 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3718 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3719 ;;Total ram usage:       12 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    1
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_TensaoBateria
  3726 ;;		_ValorCombustivel
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text21
  3731  001122                     __ptext21:
  3732                           	opt stack 0
  3733  001122                     ___lmul:
  3734                           	opt stack 27
  3735                           
  3736                           ;incstack = 0
  3737  001122  0E00               	movlw	0
  3738  001124  6E17               	movwf	___lmul@product,c
  3739  001126  0E00               	movlw	0
  3740  001128  6E18               	movwf	___lmul@product+1,c
  3741  00112A  0E00               	movlw	0
  3742  00112C  6E19               	movwf	___lmul@product+2,c
  3743  00112E  0E00               	movlw	0
  3744  001130  6E1A               	movwf	___lmul@product+3,c
  3745  001132                     l1872:
  3746  001132  A00F               	btfss	___lmul@multiplier,0,c
  3747  001134  D008               	goto	l1876
  3748  001136  5013               	movf	___lmul@multiplicand,w,c
  3749  001138  2617               	addwf	___lmul@product,f,c
  3750  00113A  5014               	movf	___lmul@multiplicand+1,w,c
  3751  00113C  2218               	addwfc	___lmul@product+1,f,c
  3752  00113E  5015               	movf	___lmul@multiplicand+2,w,c
  3753  001140  2219               	addwfc	___lmul@product+2,f,c
  3754  001142  5016               	movf	___lmul@multiplicand+3,w,c
  3755  001144  221A               	addwfc	___lmul@product+3,f,c
  3756  001146                     l1876:
  3757  001146  90D8               	bcf	status,0,c
  3758  001148  3613               	rlcf	___lmul@multiplicand,f,c
  3759  00114A  3614               	rlcf	___lmul@multiplicand+1,f,c
  3760  00114C  3615               	rlcf	___lmul@multiplicand+2,f,c
  3761  00114E  3616               	rlcf	___lmul@multiplicand+3,f,c
  3762  001150  90D8               	bcf	status,0,c
  3763  001152  3212               	rrcf	___lmul@multiplier+3,f,c
  3764  001154  3211               	rrcf	___lmul@multiplier+2,f,c
  3765  001156  3210               	rrcf	___lmul@multiplier+1,f,c
  3766  001158  320F               	rrcf	___lmul@multiplier,f,c
  3767  00115A  500F               	movf	___lmul@multiplier,w,c
  3768  00115C  1010               	iorwf	___lmul@multiplier+1,w,c
  3769  00115E  1011               	iorwf	___lmul@multiplier+2,w,c
  3770  001160  1012               	iorwf	___lmul@multiplier+3,w,c
  3771  001162  A4D8               	btfss	status,2,c
  3772  001164  D7E6               	goto	l1872
  3773  001166  C017  F00F         	movff	___lmul@product,?___lmul
  3774  00116A  C018  F010         	movff	___lmul@product+1,?___lmul+1
  3775  00116E  C019  F011         	movff	___lmul@product+2,?___lmul+2
  3776  001172  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  3777  001176  0012               	return		;funcret
  3778  001178                     __end_of___lmul:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           intcon	equ	0xFF2
  3787                           intcon2	equ	0xFF1
  3788                           intcon3	equ	0xFF0
  3789                           indf0	equ	0xFEF
  3790                           postinc0	equ	0xFEE
  3791                           fsr0h	equ	0xFEA
  3792                           fsr0l	equ	0xFE9
  3793                           wreg	equ	0xFE8
  3794                           postdec1	equ	0xFE5
  3795                           fsr1l	equ	0xFE1
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803 ;; *************** function _ADCRead *****************
  3804 ;; Defined at:
  3805 ;;		line 15 in file "ADC.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;		None
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3819 ;;      Params:         0       0       0       0       0       0       0       0       0
  3820 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3821 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3822 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3823 ;;Total ram usage:        2 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    1
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_TensaoBateria
  3830 ;;		_ValorCombustivel
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text22
  3835  0012A2                     __ptext22:
  3836                           	opt stack 0
  3837  0012A2                     _ADCRead:
  3838                           	opt stack 27
  3839                           
  3840                           ;ADC.c: 17: ADCON0bits.GO = 1;
  3841                           
  3842                           ;incstack = 0
  3843  0012A2  82C2               	bsf	4034,1,c	;volatile
  3844                           
  3845                           ;ADC.c: 18: _delay((unsigned long)((10)*(48000000/4000.0)));
  3846  0012A4  0E9C               	movlw	156
  3847  0012A6  6E0F               	movwf	??_ADCRead& (0+255),c
  3848  0012A8  0ED7               	movlw	215
  3849  0012AA                     u2307:
  3850  0012AA  2EE8               	decfsz	wreg,f,c
  3851  0012AC  D7FE               	bra	u2307
  3852  0012AE  2E0F               	decfsz	??_ADCRead& (0+255),f,c
  3853  0012B0  D7FC               	bra	u2307
  3854  0012B2  F000               	nop	
  3855                           
  3856                           ;ADC.c: 19: if(ADCON0bits.GO_DONE == 0)
  3857  0012B4  B2C2               	btfsc	4034,1,c	;volatile
  3858  0012B6  0012               	return	
  3859                           
  3860                           ;ADC.c: 20: {
  3861                           ;ADC.c: 21: valorADC = (ADRESH<<8)+ADRESL;
  3862  0012B8  50C3               	movf	4035,w,c	;volatile
  3863  0012BA  CFC4 F00F          	movff	4036,??_ADCRead	;volatile
  3864  0012BE  6A10               	clrf	(??_ADCRead+1)& (0+255),c
  3865  0012C0  C00F  F010         	movff	??_ADCRead,??_ADCRead+1
  3866  0012C4  6A0F               	clrf	??_ADCRead,c
  3867  0012C6  260F               	addwf	??_ADCRead,f,c
  3868  0012C8  0E00               	movlw	0
  3869  0012CA  2210               	addwfc	??_ADCRead+1,f,c
  3870  0012CC  C00F  F038         	movff	??_ADCRead,_valorADC
  3871  0012D0  C010  F039         	movff	??_ADCRead+1,_valorADC+1
  3872  0012D4  0E00               	movlw	0
  3873  0012D6  BE39               	btfsc	_valorADC+1,7,c
  3874  0012D8  0EFF               	movlw	-1
  3875  0012DA  6E3A               	movwf	_valorADC+2,c
  3876  0012DC  6E3B               	movwf	_valorADC+3,c
  3877  0012DE  0012               	return	
  3878  0012E0                     __end_of_ADCRead:
  3879                           	opt stack 0
  3880                           tblptru	equ	0xFF8
  3881                           tblptrh	equ	0xFF7
  3882                           tblptrl	equ	0xFF6
  3883                           tablat	equ	0xFF5
  3884                           prodh	equ	0xFF4
  3885                           prodl	equ	0xFF3
  3886                           intcon	equ	0xFF2
  3887                           intcon2	equ	0xFF1
  3888                           intcon3	equ	0xFF0
  3889                           indf0	equ	0xFEF
  3890                           postinc0	equ	0xFEE
  3891                           fsr0h	equ	0xFEA
  3892                           fsr0l	equ	0xFE9
  3893                           wreg	equ	0xFE8
  3894                           postdec1	equ	0xFE5
  3895                           fsr1l	equ	0xFE1
  3896                           indf2	equ	0xFDF
  3897                           postinc2	equ	0xFDE
  3898                           postdec2	equ	0xFDD
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903 ;; *************** function _isr *****************
  3904 ;; Defined at:
  3905 ;;		line 21 in file "main.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3919 ;;      Params:         0       0       0       0       0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3921 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3922 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3923 ;;Total ram usage:       14 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		Interrupt level 2
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	intcode
  3933  000008                     __pintcode:
  3934                           	opt stack 0
  3935  000008                     _isr:
  3936                           	opt stack 26
  3937                           
  3938                           ;incstack = 0
  3939  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3940  00000A  ED81  F005         	call	int_func,f	;refresh shadow registers
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           intcon2	equ	0xFF1
  3949                           intcon3	equ	0xFF0
  3950                           indf0	equ	0xFEF
  3951                           postinc0	equ	0xFEE
  3952                           fsr0h	equ	0xFEA
  3953                           fsr0l	equ	0xFE9
  3954                           wreg	equ	0xFE8
  3955                           postdec1	equ	0xFE5
  3956                           fsr1l	equ	0xFE1
  3957                           indf2	equ	0xFDF
  3958                           postinc2	equ	0xFDE
  3959                           postdec2	equ	0xFDD
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964                           	psect	intcode_body
  3965  000B02                     __pintcode_body:
  3966                           	opt stack 26
  3967  000B02                     int_func:
  3968                           	opt stack 26
  3969  000B02  0006               	pop		; remove dummy address from shadow register refresh
  3970  000B04  CFFA F001          	movff	pclath,??_isr
  3971  000B08  CFFB F002          	movff	pclatu,??_isr+1
  3972  000B0C  CFE9 F003          	movff	fsr0l,??_isr+2
  3973  000B10  CFEA F004          	movff	fsr0h,??_isr+3
  3974  000B14  CFE1 F005          	movff	fsr1l,??_isr+4
  3975  000B18  CFE2 F006          	movff	fsr1h,??_isr+5
  3976  000B1C  CFD9 F007          	movff	fsr2l,??_isr+6
  3977  000B20  CFDA F008          	movff	fsr2h,??_isr+7
  3978  000B24  CFF3 F009          	movff	prodl,??_isr+8
  3979  000B28  CFF4 F00A          	movff	prodh,??_isr+9
  3980  000B2C  CFF6 F00B          	movff	tblptrl,??_isr+10
  3981  000B30  CFF7 F00C          	movff	tblptrh,??_isr+11
  3982  000B34  CFF8 F00D          	movff	tblptru,??_isr+12
  3983  000B38  CFF5 F00E          	movff	tablat,??_isr+13
  3984                           
  3985                           ;main.c: 22: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF)
  3986  000B3C  BAF2               	btfsc	intcon,5,c	;volatile
  3987  000B3E  A4F2               	btfss	intcon,2,c	;volatile
  3988  000B40  D00A               	goto	i2l1742
  3989                           
  3990                           ;main.c: 23: {
  3991                           ;main.c: 24: T0IF = 0;
  3992  000B42  94F2               	bcf	intcon,2,c	;volatile
  3993                           
  3994                           ;main.c: 25: INTCONbits.TMR0IF = 0;
  3995  000B44  94F2               	bcf	intcon,2,c	;volatile
  3996                           
  3997                           ;main.c: 26: TMR0 = 69;
  3998  000B46  0E00               	movlw	0
  3999  000B48  6ED7               	movwf	4055,c	;volatile
  4000  000B4A  0E45               	movlw	69
  4001  000B4C  6ED6               	movwf	4054,c	;volatile
  4002                           
  4003                           ;main.c: 28: tempoCombustivel ++;
  4004  000B4E  4A2E               	infsnz	_tempoCombustivel,f,c
  4005  000B50  2A2F               	incf	_tempoCombustivel+1,f,c
  4006                           
  4007                           ;main.c: 29: countLed ++;
  4008  000B52  4A2C               	infsnz	_countLed,f,c
  4009  000B54  2A2D               	incf	_countLed+1,f,c
  4010  000B56                     i2l1742:
  4011                           
  4012                           ;main.c: 30: }
  4013                           ;main.c: 32: if ((PIR1bits.CCP1IF) && (PIE1bits.CCP1IE))
  4014  000B56  B49E               	btfsc	3998,2,c	;volatile
  4015  000B58  A49D               	btfss	3997,2,c	;volatile
  4016  000B5A  D022               	goto	i2l335
  4017                           
  4018                           ;main.c: 33: {
  4019                           ;main.c: 34: bordaParcial++;
  4020  000B5C  4A28               	infsnz	_bordaParcial,f,c
  4021  000B5E  2A29               	incf	_bordaParcial+1,f,c
  4022                           
  4023                           ;main.c: 35: bordaTotal++;
  4024  000B60  4A2A               	infsnz	_bordaTotal,f,c
  4025  000B62  2A2B               	incf	_bordaTotal+1,f,c
  4026                           
  4027                           ;main.c: 36: if (bordaParcial == 500)
  4028  000B64  0EF4               	movlw	244
  4029  000B66  1828               	xorwf	_bordaParcial,w,c
  4030  000B68  E10B               	bnz	i2l1752
  4031  000B6A  0429               	decf	_bordaParcial+1,w,c
  4032  000B6C  A4D8               	btfss	status,2,c
  4033  000B6E  D008               	goto	i2l1752
  4034                           
  4035                           ;main.c: 37: {
  4036                           ;main.c: 38: atualizaOdoParcial = 1;
  4037  000B70  0E00               	movlw	0
  4038  000B72  6E25               	movwf	_atualizaOdoParcial+1,c
  4039  000B74  0E01               	movlw	1
  4040  000B76  6E24               	movwf	_atualizaOdoParcial,c
  4041                           
  4042                           ;main.c: 39: bordaParcial = 0;
  4043  000B78  0E00               	movlw	0
  4044  000B7A  6E29               	movwf	_bordaParcial+1,c
  4045  000B7C  0E00               	movlw	0
  4046  000B7E  6E28               	movwf	_bordaParcial,c
  4047  000B80                     i2l1752:
  4048                           
  4049                           ;main.c: 40: }
  4050                           ;main.c: 41: if (bordaTotal == 5000)
  4051  000B80  0E88               	movlw	136
  4052  000B82  182A               	xorwf	_bordaTotal,w,c
  4053  000B84  E10C               	bnz	i2l1756
  4054  000B86  0E13               	movlw	19
  4055  000B88  182B               	xorwf	_bordaTotal+1,w,c
  4056  000B8A  A4D8               	btfss	status,2,c
  4057  000B8C  D008               	goto	i2l1756
  4058                           
  4059                           ;main.c: 42: {
  4060                           ;main.c: 43: atualizaOdoTotal = 1;
  4061  000B8E  0E00               	movlw	0
  4062  000B90  6E27               	movwf	_atualizaOdoTotal+1,c
  4063  000B92  0E01               	movlw	1
  4064  000B94  6E26               	movwf	_atualizaOdoTotal,c
  4065                           
  4066                           ;main.c: 44: bordaTotal = 0;
  4067  000B96  0E00               	movlw	0
  4068  000B98  6E2B               	movwf	_bordaTotal+1,c
  4069  000B9A  0E00               	movlw	0
  4070  000B9C  6E2A               	movwf	_bordaTotal,c
  4071  000B9E                     i2l1756:
  4072                           
  4073                           ;main.c: 45: }
  4074                           ;main.c: 46: PIR1bits.CCP1IF = 0;
  4075  000B9E  949E               	bcf	3998,2,c	;volatile
  4076  000BA0                     i2l335:
  4077  000BA0  C00E  FFF5         	movff	??_isr+13,tablat
  4078  000BA4  C00D  FFF8         	movff	??_isr+12,tblptru
  4079  000BA8  C00C  FFF7         	movff	??_isr+11,tblptrh
  4080  000BAC  C00B  FFF6         	movff	??_isr+10,tblptrl
  4081  000BB0  C00A  FFF4         	movff	??_isr+9,prodh
  4082  000BB4  C009  FFF3         	movff	??_isr+8,prodl
  4083  000BB8  C008  FFDA         	movff	??_isr+7,fsr2h
  4084  000BBC  C007  FFD9         	movff	??_isr+6,fsr2l
  4085  000BC0  C006  FFE2         	movff	??_isr+5,fsr1h
  4086  000BC4  C005  FFE1         	movff	??_isr+4,fsr1l
  4087  000BC8  C004  FFEA         	movff	??_isr+3,fsr0h
  4088  000BCC  C003  FFE9         	movff	??_isr+2,fsr0l
  4089  000BD0  C002  FFFB         	movff	??_isr+1,pclatu
  4090  000BD4  C001  FFFA         	movff	??_isr,pclath
  4091  000BD8  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4092  000BDA  0011               	retfie		f
  4093  000BDC                     __end_of_isr:
  4094                           	opt stack 0
  4095                           pclatu	equ	0xFFB
  4096                           pclath	equ	0xFFA
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           intcon2	equ	0xFF1
  4105                           intcon3	equ	0xFF0
  4106                           indf0	equ	0xFEF
  4107                           postinc0	equ	0xFEE
  4108                           fsr0h	equ	0xFEA
  4109                           fsr0l	equ	0xFE9
  4110                           wreg	equ	0xFE8
  4111                           postdec1	equ	0xFE5
  4112                           fsr1h	equ	0xFE2
  4113                           fsr1l	equ	0xFE1
  4114                           indf2	equ	0xFDF
  4115                           postinc2	equ	0xFDE
  4116                           postdec2	equ	0xFDD
  4117                           fsr2h	equ	0xFDA
  4118                           fsr2l	equ	0xFD9
  4119                           status	equ	0xFD8
  4120                           pclatu	equ	0xFFB
  4121                           pclath	equ	0xFFA
  4122                           tblptru	equ	0xFF8
  4123                           tblptrh	equ	0xFF7
  4124                           tblptrl	equ	0xFF6
  4125                           tablat	equ	0xFF5
  4126                           prodh	equ	0xFF4
  4127                           prodl	equ	0xFF3
  4128                           intcon	equ	0xFF2
  4129                           intcon2	equ	0xFF1
  4130                           intcon3	equ	0xFF0
  4131                           indf0	equ	0xFEF
  4132                           postinc0	equ	0xFEE
  4133                           fsr0h	equ	0xFEA
  4134                           fsr0l	equ	0xFE9
  4135                           wreg	equ	0xFE8
  4136                           postdec1	equ	0xFE5
  4137                           fsr1h	equ	0xFE2
  4138                           fsr1l	equ	0xFE1
  4139                           indf2	equ	0xFDF
  4140                           postinc2	equ	0xFDE
  4141                           postdec2	equ	0xFDD
  4142                           fsr2h	equ	0xFDA
  4143                           fsr2l	equ	0xFD9
  4144                           status	equ	0xFD8
  4145                           
  4146                           	psect	rparam
  4147  0000                     pclatu	equ	0xFFB
  4148                           pclath	equ	0xFFA
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           intcon2	equ	0xFF1
  4157                           intcon3	equ	0xFF0
  4158                           indf0	equ	0xFEF
  4159                           postinc0	equ	0xFEE
  4160                           fsr0h	equ	0xFEA
  4161                           fsr0l	equ	0xFE9
  4162                           wreg	equ	0xFE8
  4163                           postdec1	equ	0xFE5
  4164                           fsr1h	equ	0xFE2
  4165                           fsr1l	equ	0xFE1
  4166                           indf2	equ	0xFDF
  4167                           postinc2	equ	0xFDE
  4168                           postdec2	equ	0xFDD
  4169                           fsr2h	equ	0xFDA
  4170                           fsr2l	equ	0xFD9
  4171                           status	equ	0xFD8
  4172                           
  4173                           	psect	temp
  4174  000051                     btemp:
  4175                           	opt stack 0
  4176  000051                     	ds	1
  4177  0000                     int$flags	set	btemp
  4178                           pclatu	equ	0xFFB
  4179                           pclath	equ	0xFFA
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           prodh	equ	0xFF4
  4185                           prodl	equ	0xFF3
  4186                           intcon	equ	0xFF2
  4187                           intcon2	equ	0xFF1
  4188                           intcon3	equ	0xFF0
  4189                           indf0	equ	0xFEF
  4190                           postinc0	equ	0xFEE
  4191                           fsr0h	equ	0xFEA
  4192                           fsr0l	equ	0xFE9
  4193                           wreg	equ	0xFE8
  4194                           postdec1	equ	0xFE5
  4195                           fsr1h	equ	0xFE2
  4196                           fsr1l	equ	0xFE1
  4197                           indf2	equ	0xFDF
  4198                           postinc2	equ	0xFDE
  4199                           postdec2	equ	0xFDD
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        28
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      80
    BANK0           160     10      37
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    EscreveFraseRamLCD@buffer	PTR unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[3]), STR_1(CODE[3]), odoTotal(BANK0[7]), odoParcial(COMRAM[7]), 
		 -> odometroTotal@odoTotal(COMRAM[7]), EscreveInteiroLCD@texto(COMRAM[7]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _odometroTotal->_PosicaoCursorLCD
    _odometroParcial->_PosicaoCursorLCD
    _display->_PosicaoCursorLCD
    _PosicaoCursorLCD->_EnderecoCursor
    _EnderecoCursor->_Delay
    _EscreveFraseRamLCD->_EscreveCaractereLCD
    _EscreveCaractereLCD->_Delay
    _ConfiguraLCD->_EscreveComandoLCD
    _EscreveComandoLCD->_Delay
    _ValorCombustivel->___lldiv
    ___lldiv->___lmul
    _TensaoBateria->___lmul

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Combustivel
    _ValorCombustivel->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7947
                        _Combustivel
                       _ConfiguraLCD
                        _Init_EEPROM
                            _display
                             _initHw
                      _initInterrupt
                    _odometroParcial
                      _odometroTotal
 ---------------------------------------------------------------------------------
 (1) _odometroTotal                                        0     0      0    2190
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteByte                                     2     1      1     428
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _EEPROM_ReadByte                                      1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _odometroParcial                                      2     2      0    1795
                                             20 COMRAM     2     2      0
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initHw                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              0     0      0    1747
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _PosicaoCursorLCD                                     3     2      1     922
                                             17 COMRAM     3     2      1
                     _EnderecoCursor
 ---------------------------------------------------------------------------------
 (3) _EnderecoCursor                                       1     1      0     246
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _EscreveFraseRamLCD                                   2     0      2     825
                                             17 COMRAM     2     0      2
                _EscreveCaractereLCD
 ---------------------------------------------------------------------------------
 (3) _EscreveCaractereLCD                                  1     1      0     268
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _Init_EEPROM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0     426
                                             17 COMRAM     1     1      0
                              _Delay
                  _EscreveComandoLCD
 ---------------------------------------------------------------------------------
 (2) _EscreveComandoLCD                                    1     1      0     334
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     2      0      92
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Combustivel                                          2     2      0    1789
                                              8 BANK0      2     2      0
                      _TensaoBateria
                   _ValorCombustivel
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     494
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ValorCombustivel                                     0     0      0     845
                            _ADCRead
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     395
                                             26 COMRAM     5     5      0
                                              0 BANK0      8     0      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _TensaoBateria                                        0     0      0     450
                            _ADCRead
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     450
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                              2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Combustivel
     _TensaoBateria
       _ADCRead
       ___lmul
     _ValorCombustivel
       _ADCRead
       ___lldiv
         ___lmul (ARG)
       ___lmul
     ___lwdiv
   _ConfiguraLCD
     _Delay
     _EscreveComandoLCD
       _Delay
   _Init_EEPROM
   _display
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _initHw
   _initInterrupt
   _odometroParcial
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _odometroTotal
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      25       5       23.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      75      20        0.0%
DATA                 0      0      75       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Nov 26 22:06:15 2019

                                l21 134E                                  l31 0E18  
                                l40 0E4E                                  l41 0E56  
                                l33 0E22                                  l42 0E58  
                                l19 1340                                  l43 0E60  
                                l35 0E2C                                  l51 100A  
                                l44 0E62                                  l36 0E2E  
                                l60 1040                                  l37 0E42  
                                l29 0E0E                                  l61 1048  
                                l53 1014                                  l38 0E44  
                                l62 104A                                  l70 0F96  
                                l39 0E4C                                  l63 1052  
                                l55 101E                                  l80 0F26  
                                l64 1054                                  l56 1020  
                                l57 1034                                  l90 0F64  
                                l82 0F30                                  l58 1036  
                                l91 0F66                                  l59 103E  
                                l92 0F6E                                  l84 0F3A  
                                l93 0F70                                  l94 0F78  
                                l86 0F44                                  l95 0F7A  
                                l87 0F46                                  l88 0F5A  
                                l89 0F5C                                 l401 09E6  
                               l209 0CA0                                 l159 132A  
                               l189 0AA6                                 l810 0D4E  
                               l863 1212                                 _isr 0008  
                   __end_of_ADCRead 12E0                                 prod 000FF3  
                               wreg 000FE8                                l2030 11EC  
                              l2200 0C48                                l2026 11E0  
                              l2028 11E8                                l2038 1208  
                              l2206 0C66                                l2500 0936  
                              l2430 0CE8                                l2190 0C28  
                              l2440 0D3E                                l2432 0CEE  
                              l2512 096E                                l1800 100C  
                              l2530 09C2                                l2506 0952  
                              l2194 0C30                                l2428 0CDA  
                              l2524 09A6                                l2460 080C  
                              l1804 1016                                l2518 098A  
                              l2542 09EE                                l2472 0820  
                              l2464 0814                                l1912 0E1A  
                              l1840 0F3C                                l1832 0F28  
                              l2560 136C                                l2538 09E0  
                              l2458 0808                                l2474 0824  
                              l1916 0E24                                l1908 0E10  
                              l1836 0F32                                l2494 091A  
                              l1790 1354                                l1782 1346  
                              l1872 1132                                l2488 08FE  
                              l1776 1338                                l1944 0E84  
                              l1962 0FBE                                l1954 0FA2  
                              l1970 0FD2                                l1876 1146  
                              l1972 0FEE                                l1982 11A2  
                              l1966 0FCC                                l1958 0FB0  
                              l1974 0FF2                                l1978 117A  
                              ?_isr 0001                                STR_1 0801  
                              STR_2 0801                                _T0IF 007F92  
                              u2100 0926                                u2120 0942  
                              u1400 119A                                u1410 11C2  
                              u2140 095E                                _LATA 000F89  
                              _LATB 000F8A                                u1407 1190  
                              u2160 097A                                u2080 090A  
                              _LATD 000F8C                                u1417 11B8  
                              u2307 12AA                                u2260 0A08  
                              u2180 0996                                u2266 0A0A  
                              u2277 0D82                                _IPR1 000F9F  
                              _IPR2 000FA2                                u2287 0D9E  
                              _PIE1 000F9D                                _PIE2 000FA0  
                              u2297 0DBA                                _PIR1 000F9E  
                              _PIR2 000FA1                                _RCON 000FD0  
                              _TMR0 000FD6                       ??_Init_EEPROM 000F  
                              _main 1358                                fsr0h 000FEA  
                              fsr1h 000FE2                                indf0 000FEF  
                              fsr2h 000FDA                                fsr0l 000FE9  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 0051  
                              prodh 000FF4                                prodl 000FF3  
                              start 000E            __size_of_EEPROM_ReadByte 000E  
                      ___param_bank 000000          __end_of_EscreveFraseRamLCD 11CA  
                             ??_isr 0001                 __end_of_Combustivel 0A26  
                             ?_main 0001                               _EEADR 000FA9  
                   __end_of___lldiv 0D60                               _T0CON 000FD5  
                             _T1CON 000FCD                     __end_of___lwdiv 121C  
                             i2l335 0BA0                               _PORTB 000F81  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _Delay 1334  
               ___lmul@multiplicand 0013                     __end_of_display 1122  
              EscreveComandoLCD@cmd 0011                               pclath 000FFA  
                             tablat 000FF5                               status 000FD8  
                  ?_odometroParcial 0001                 __end_of_Init_EEPROM 13AC  
                   __initialization 1062              __size_of_initInterrupt 002E  
                      __end_of_main 137A                           ??_ADCRead 000F  
                            ??_main 0020                __end_of_ConfiguraLCD 0DFE  
                     __activetblptr 000002                   _EscreveComandoLCD 0DFE  
             __end_of_TensaoBateria 12A2                              ?_Delay 0001  
                ?_EscreveComandoLCD 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _EEDATA 000FA8                              _EECON1 000FA6  
                            _EECON2 000FA7                              i2l1742 0B56  
                            i2l1752 0B80                              i2l1756 0B9E  
                            _INTCON 000FF2                 ??_EscreveComandoLCD 0011  
                _atualizaOdoParcial 0024                    _tempoCombustivel 002E  
                       _Combustivel 0806                              ___lmul 1122  
                 ?_PosicaoCursorLCD 0012                           ??___lldiv 001B  
                         ??___lwdiv 0013        __size_of_EscreveCaractereLCD 0072  
                ??_PosicaoCursorLCD 0013                              _initHw 121C  
                 ??_EEPROM_ReadByte 000F                              clear_0 10A8  
                            clear_1 10B4           __end_of_EscreveComandoLCD 0E8A  
          __end_of_EEPROM_WriteByte 1334                           ??_display 0015  
                      __pdataCOMRAM 003C                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8             __size_of_EnderecoCursor 006A  
                     _initInterrupt 12E0                         _Init_EEPROM 13A6  
                        __accesstop 0060             __end_of__initialization 10BA  
                     ___rparam_used 000001                       __end_of_Delay 1358  
                 ?_ValorCombustivel 0001                      __pcstackCOMRAM 0001  
                      __pidataBANK0 139E                  ??_ValorCombustivel 0020  
             odometroTotal@odoTotal 004A                             ??_Delay 000F  
                    ?_initInterrupt 0001                          __pbssBANK0 0060  
                           ?___lmul 000F           EEPROM_WriteByte@WriteData 000F  
             __size_of_ConfiguraLCD 009E                             _CCP1CON 000FBD  
                           ?_initHw 0001                      ___lmul@product 0017  
                           _ADCRead 12A2          __size_of_EscreveComandoLCD 008C  
                        _bordaTotal 002A                             _INTCON2 000FF1  
                           _INTCON3 000FF0                  _EscreveFraseRamLCD 1178  
            __size_of_odometroTotal 00DC                 ?_EscreveFraseRamLCD 0012  
                      _ConfiguraLCD 0D60             odometroParcial@position 0015  
                           __Hparam 0000                             __Lparam 0000  
                        _odoParcial 0043                     __size_of___lmul 0056  
                           ___lldiv 0CB0                             ___lwdiv 11CA  
              ??_EscreveFraseRamLCD 0014                        __psmallconst 0800  
                   __size_of_initHw 0044                             __pcinit 1062  
                      _bordaParcial 0028                             __ramtop 0800  
                           __ptext0 1358                             __ptext1 0A26  
                           __ptext2 130E                             __ptext3 1390  
                           __ptext4 0BDC                             __ptext5 12E0  
                           __ptext6 121C                             __ptext7 10C8  
                           __ptext8 0F88                             __ptext9 0FF8  
                           _display 10C8                odometroParcial@trava 0016  
                   ??_initInterrupt 000F                        __size_of_isr 0BD4  
                         _T3CONbits 000FB1                      _EnderecoCursor 0FF8  
                           _reserva 0036                             _numeroC 0034  
                         Delay@Cnt1 000F                           Delay@Cnt2 0010  
                    __pintcode_body 0B02                 _EscreveCaractereLCD 0F16  
              end_of_initialization 10BA                       __Lmediumconst 0000  
                           int_func 0B02                     _EEPROM_ReadByte 1390  
                   ___lldiv@divisor 0078                     ___lldiv@counter 001F  
                      ?_Combustivel 0001                       _odometroTotal 0A26  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc2 000FDE  
              ?_EscreveCaractereLCD 0001            __size_of_odometroParcial 00D4  
       PosicaoCursorLCD@EnderecoLCD 0014                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                 ?_EEPROM_WriteByte 000F              __end_of_EnderecoCursor 1062  
                ??_EEPROM_WriteByte 0010                           _TRISCbits 000F94  
                         _TRISDbits 000F95           __size_of_PosicaoCursorLCD 0070  
                      ?_Init_EEPROM 0001              __size_of_TensaoBateria 0042  
                    ?_odometroTotal 0001               ??_EscreveCaractereLCD 0011  
                    __end_of___lmul 1178                       __pidataCOMRAM 137A  
                  _atualizaOdoTotal 0026                      __end_of_initHw 1260  
                   ?_EnderecoCursor 0001                 start_initialization 1062  
         __size_of_ValorCombustivel 008C                         __end_of_isr 0BDC  
          EscreveFraseRamLCD@buffer 0012             __end_of_EEPROM_ReadByte 139E  
                          ??___lmul 0017                         __pdataBANK0 007E  
                          ??_initHw 000F                            ?_ADCRead 0001  
                 ??_odometroParcial 0015                         __pbssCOMRAM 0020  
                     __pcstackBANK0 0074                       _TensaoBateria 1260  
                  odometroParcial@i 0037                     ??_odometroTotal 0015  
                  ___lwdiv@dividend 000F                           __pintcode 0008  
                         _combArray 0060                            ?___lldiv 0074  
                          ?___lwdiv 000F                __size_of_Combustivel 0220  
      EEPROM_ReadByte@MemoryAddress 000F                       _valorADCMedia 0030  
            EscreveInteiroLCD@F3948 003C                            ?_display 0001  
                       __smallconst 0800                      ?_TensaoBateria 0001  
                    __size_of_Delay 0024                    _PosicaoCursorLCD 0F88  
                  ___lwdiv@quotient 0013                    ?_EEPROM_ReadByte 0001  
            EnderecoCursor@endereco 0011                __size_of_Init_EEPROM 0006  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
           EscreveCaractereLCD@data 0011         __size_of_EscreveFraseRamLCD 0052  
                  __size_of_ADCRead 003E                          _ADCON0bits 000FC2  
                  _ValorCombustivel 0E8A               __end_of_initInterrupt 130E  
                    _primeiroFiltro 0035                   ___lmul@multiplier 000F  
                         copy_data0 1076                           copy_data1 1096  
         __size_of_EEPROM_WriteByte 0026                          _EECON1bits 000FA6  
                          __Hrparam 0000                   _porcentagemTensao 0020  
                          __Lrparam 0000                    ??_EnderecoCursor 0011  
                  __size_of___lldiv 00B0                    __size_of___lwdiv 0052  
                   ??_TensaoBateria 001B                    __size_of_display 005A  
                   ___lwdiv@divisor 0011                     ___lwdiv@counter 0015  
                          __ptext10 1178                            __ptext11 0F16  
                          __ptext20 1260                            __ptext12 13A6  
                          __ptext21 1122                            __ptext13 0D60  
                          __ptext22 12A2                            __ptext14 0DFE  
                          __ptext15 1334                            __ptext16 0806  
                          __ptext17 11CA                            __ptext18 0E8A  
                          __ptext19 0CB0                            _countLed 002C  
                          _odoTotal 007E                       __size_of_main 0022  
       __end_of_EscreveCaractereLCD 0F88                            _valorADC 0038  
                   _odometroParcial 0BDC                            int$flags 0051  
                        _INTCONbits 000FF2                            intlevel2 0000  
EEPROM_WriteByte@WriteMemoryAddress 0010                    ___lldiv@dividend 0074  
                     ?_ConfiguraLCD 0001            __end_of_PosicaoCursorLCD 0FF8  
            PosicaoCursorLCD@coluna 0012                         _valorTensao 0032  
                  ___lldiv@quotient 001B               PosicaoCursorLCD@linha 0013  
                    ??_ConfiguraLCD 0012                    _EEPROM_WriteByte 130E  
           __end_of_odometroParcial 0CB0            __end_of_ValorCombustivel 0F16  
                     ??_Combustivel 007C               __end_of_odometroTotal 0B02  
