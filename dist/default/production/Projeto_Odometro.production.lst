

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Nov 24 23:15:33 2019

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.40
    32                           ; Generated 01/12/2016 GMT
    33                           ; 
    34                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  000DFE                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for EscreveInteiroLCD@F3948
    71  000DFE  30                 	db	48
    72  000DFF  30                 	db	48
    73  000E00  30                 	db	48
    74  000E01  30                 	db	48
    75  000E02  30                 	db	48
    76  000E03  30                 	db	48
    77  000E04  00                 	db	0
    78                           
    79                           ;initializer for _odoParcial
    80  000E05  30                 	db	48
    81  000E06  30                 	db	48
    82  000E07  30                 	db	48
    83  000E08  30                 	db	48
    84  000E09  2C                 	db	44
    85  000E0A  30                 	db	48
    86  000E0B  00                 	db	0
    87                           
    88                           ;initializer for _odoTotal
    89  000E0C  30                 	db	48
    90  000E0D  30                 	db	48
    91  000E0E  30                 	db	48
    92  000E0F  30                 	db	48
    93  000E10  30                 	db	48
    94  000E11  30                 	db	48
    95  000E12  00                 	db	0
    96  0000                     _ADCON0	set	4034
    97  0000                     _ADCON1	set	4033
    98  0000                     _ADCON2	set	4032
    99  0000                     _CCP1CON	set	4029
   100  0000                     _EEADR	set	4009
   101  0000                     _EECON1	set	4006
   102  0000                     _EECON1bits	set	4006
   103  0000                     _EECON2	set	4007
   104  0000                     _EEDATA	set	4008
   105  0000                     _INTCON	set	4082
   106  0000                     _INTCON2	set	4081
   107  0000                     _INTCON3	set	4080
   108  0000                     _INTCONbits	set	4082
   109  0000                     _IPR1	set	3999
   110  0000                     _IPR2	set	4002
   111  0000                     _LATA	set	3977
   112  0000                     _LATB	set	3978
   113  0000                     _LATD	set	3980
   114  0000                     _PIE1	set	3997
   115  0000                     _PIE1bits	set	3997
   116  0000                     _PIE2	set	4000
   117  0000                     _PIR1	set	3998
   118  0000                     _PIR1bits	set	3998
   119  0000                     _PIR2	set	4001
   120  0000                     _PORTDbits	set	3971
   121  0000                     _PORTEbits	set	3972
   122  0000                     _RCON	set	4048
   123  0000                     _T0CON	set	4053
   124  0000                     _T1CON	set	4045
   125  0000                     _T3CONbits	set	4017
   126  0000                     _TRISA	set	3986
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISC	set	3988
   129  0000                     _TRISCbits	set	3988
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISDbits	set	3989
   132  0000                     _TRISE	set	3990
   133                           
   134                           	psect	smallconst
   135  000800                     __psmallconst:
   136                           	opt stack 0
   137  000800  00                 	db	0
   138  000801                     STR_1:
   139  000801  4B                 	db	75	;'K'
   140  000802  6D                 	db	109	;'m'
   141  000803  00                 	db	0
   142  000804  00                 	db	0	; dummy byte at the end
   143  0000                     
   144                           ; #config settings
   145                           
   146                           	psect	cinit
   147  000D54                     __pcinit:
   148                           	opt stack 0
   149  000D54                     start_initialization:
   150                           	opt stack 0
   151  000D54                     __initialization:
   152                           	opt stack 0
   153                           
   154                           ; Initialize objects allocated to COMRAM (21 bytes)
   155                           ; load TBLPTR registers with __pidataCOMRAM
   156  000D54  0EFE               	movlw	low __pidataCOMRAM
   157  000D56  6EF6               	movwf	tblptrl,c
   158  000D58  0E0D               	movlw	high __pidataCOMRAM
   159  000D5A  6EF7               	movwf	tblptrh,c
   160  000D5C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   161  000D5E  6EF8               	movwf	tblptru,c
   162  000D60  EE00  F017         	lfsr	0,__pdataCOMRAM
   163  000D64  EE10 F015          	lfsr	1,21
   164  000D68                     copy_data0:
   165  000D68  0009               	tblrd		*+
   166  000D6A  CFF5 FFEE          	movff	tablat,postinc0
   167  000D6E  50E5               	movf	postdec1,w,c
   168  000D70  50E1               	movf	fsr1l,w,c
   169  000D72  E1FA               	bnz	copy_data0
   170                           
   171                           ; Clear objects allocated to COMRAM (9 bytes)
   172  000D74  EE00  F02C         	lfsr	0,__pbssCOMRAM
   173  000D78  0E09               	movlw	9
   174  000D7A                     clear_0:
   175  000D7A  6AEE               	clrf	postinc0,c
   176  000D7C  06E8               	decf	wreg,f,c
   177  000D7E  E1FD               	bnz	clear_0
   178  000D80                     end_of_initialization:
   179                           	opt stack 0
   180  000D80                     __end_of__initialization:
   181                           	opt stack 0
   182  000D80  9035               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   183  000D82  9235               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   184  000D84  0E00               	movlw	low (__Lmediumconst shr (0+16))
   185  000D86  6EF8               	movwf	tblptru,c
   186  000D88  0100               	movlb	0
   187  000D8A  EFF0  F006         	goto	_main	;jump to C main() function
   188                           tblptru	equ	0xFF8
   189                           tblptrh	equ	0xFF7
   190                           tblptrl	equ	0xFF6
   191                           tablat	equ	0xFF5
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           postdec1	equ	0xFE5
   195                           fsr1l	equ	0xFE1
   196                           
   197                           	psect	bssCOMRAM
   198  00002C                     __pbssCOMRAM:
   199                           	opt stack 0
   200  00002C                     _atualizaOdoParcial:
   201                           	opt stack 0
   202  00002C                     	ds	2
   203  00002E                     _atualizaOdoTotal:
   204                           	opt stack 0
   205  00002E                     	ds	2
   206  000030                     _bordaParcial:
   207                           	opt stack 0
   208  000030                     	ds	2
   209  000032                     _bordaTotal:
   210                           	opt stack 0
   211  000032                     	ds	2
   212  000034                     odometroParcial@i:
   213                           	opt stack 0
   214  000034                     	ds	1
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           postdec1	equ	0xFE5
   222                           fsr1l	equ	0xFE1
   223                           
   224                           	psect	dataCOMRAM
   225  000017                     __pdataCOMRAM:
   226                           	opt stack 0
   227  000017                     EscreveInteiroLCD@F3948:
   228                           	opt stack 0
   229  000017                     	ds	7
   230  00001E                     _odoParcial:
   231                           	opt stack 0
   232  00001E                     	ds	7
   233  000025                     _odoTotal:
   234                           	opt stack 0
   235  000025                     	ds	7
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           postdec1	equ	0xFE5
   243                           fsr1l	equ	0xFE1
   244                           
   245                           	psect	cstackCOMRAM
   246  000001                     __pcstackCOMRAM:
   247                           	opt stack 0
   248  000001                     ??_isr:
   249  000001                     
   250                           ; 1 bytes @ 0x0
   251  000001                     	ds	14
   252  00000F                     Delay@Cnt1:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0xE
   256  00000F                     	ds	1
   257  000010                     Delay@Cnt2:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0xF
   261  000010                     	ds	1
   262  000011                     EscreveComandoLCD@cmd:
   263                           	opt stack 0
   264  000011                     EnderecoCursor@endereco:
   265                           	opt stack 0
   266  000011                     EscreveCaractereLCD@data:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x10
   270  000011                     	ds	1
   271  000012                     ??_ConfiguraLCD:
   272  000012                     PosicaoCursorLCD@coluna:
   273                           	opt stack 0
   274  000012                     EscreveFraseRamLCD@buffer:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x11
   278  000012                     	ds	1
   279  000013                     PosicaoCursorLCD@linha:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x12
   283  000013                     	ds	1
   284  000014                     PosicaoCursorLCD@EnderecoLCD:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x13
   288  000014                     	ds	1
   289  000015                     odometroParcial@position:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x14
   293  000015                     	ds	1
   294  000016                     odometroParcial@trava:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x15
   298  000016                     	ds	1
   299  000017                     tblptru	equ	0xFF8
   300                           tblptrh	equ	0xFF7
   301                           tblptrl	equ	0xFF6
   302                           tablat	equ	0xFF5
   303                           postinc0	equ	0xFEE
   304                           wreg	equ	0xFE8
   305                           postdec1	equ	0xFE5
   306                           fsr1l	equ	0xFE1
   307                           
   308                           ; 1 bytes @ 0x16
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 36 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;		None
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : 0/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   328 ;;      Params:         0       0       0       0       0       0       0       0       0
   329 ;;      Locals:         0       0       0       0       0       0       0       0       0
   330 ;;      Temps:          0       0       0       0       0       0       0       0       0
   331 ;;      Totals:         0       0       0       0       0       0       0       0       0
   332 ;;Total ram usage:        0 bytes
   333 ;; Hardware stack levels required when called:    5
   334 ;; This function calls:
   335 ;;		_ConfiguraLCD
   336 ;;		_Init_EEPROM
   337 ;;		_display
   338 ;;		_initHw
   339 ;;		_initInterrupt
   340 ;;		_odometroParcial
   341 ;;		_odometroTotal
   342 ;; This function is called by:
   343 ;;		Startup code after reset
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text0
   348  000DE0                     __ptext0:
   349                           	opt stack 0
   350  000DE0                     _main:
   351                           	opt stack 26
   352                           
   353                           ;main.c: 37: ConfiguraLCD();
   354                           
   355                           ;incstack = 0
   356  000DE0  ECC4  F004         	call	_ConfiguraLCD	;wreg free
   357                           
   358                           ;main.c: 38: initInterrupt();
   359  000DE4  ECC7  F006         	call	_initInterrupt	;wreg free
   360                           
   361                           ;main.c: 39: initHw();
   362  000DE8  EC88  F006         	call	_initHw	;wreg free
   363                           
   364                           ;main.c: 40: Init_EEPROM();
   365  000DEC  EC0A  F007         	call	_Init_EEPROM	;wreg free
   366                           
   367                           ;main.c: 41: display();
   368  000DF0  EC32  F006         	call	_display	;wreg free
   369  000DF4                     l1639:
   370                           
   371                           ;main.c: 44: {
   372                           ;main.c: 45: odometroTotal();
   373  000DF4  ECFF  F005         	call	_odometroTotal	;wreg free
   374                           
   375                           ;main.c: 46: odometroParcial();
   376  000DF8  EC03  F004         	call	_odometroParcial	;wreg free
   377  000DFC  D7FB               	goto	l1639
   378  000DFE                     __end_of_main:
   379                           	opt stack 0
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           postdec1	equ	0xFE5
   387                           fsr1l	equ	0xFE1
   388                           
   389 ;; *************** function _odometroTotal *****************
   390 ;; Defined at:
   391 ;;		line 17 in file "Odometro_Total_Parcial.c"
   392 ;; Parameters:    Size  Location     Type
   393 ;;		None
   394 ;; Auto vars:     Size  Location     Type
   395 ;;		None
   396 ;; Return value:  Size  Location     Type
   397 ;;                  1    wreg      void 
   398 ;; Registers used:
   399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   400 ;; Tracked objects:
   401 ;;		On entry : 0/0
   402 ;;		On exit  : 0/0
   403 ;;		Unchanged: 0/0
   404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   405 ;;      Params:         0       0       0       0       0       0       0       0       0
   406 ;;      Locals:         0       0       0       0       0       0       0       0       0
   407 ;;      Temps:          0       0       0       0       0       0       0       0       0
   408 ;;      Totals:         0       0       0       0       0       0       0       0       0
   409 ;;Total ram usage:        0 bytes
   410 ;; Hardware stack levels used:    1
   411 ;; Hardware stack levels required when called:    4
   412 ;; This function calls:
   413 ;;		_EscreveFraseRamLCD
   414 ;;		_PosicaoCursorLCD
   415 ;; This function is called by:
   416 ;;		_main
   417 ;; This function uses a non-reentrant model
   418 ;;
   419                           
   420                           	psect	text1
   421  000BFE                     __ptext1:
   422                           	opt stack 0
   423  000BFE                     _odometroTotal:
   424                           	opt stack 26
   425                           
   426                           ;Odometro_Total_Parcial.c: 19: if (atualizaOdoTotal)
   427                           
   428                           ;incstack = 0
   429  000BFE  502E               	movf	_atualizaOdoTotal,w,c
   430  000C00  102F               	iorwf	_atualizaOdoTotal+1,w,c
   431  000C02  B4D8               	btfsc	status,2,c
   432  000C04  0012               	return	
   433                           
   434                           ;Odometro_Total_Parcial.c: 20: {
   435                           ;Odometro_Total_Parcial.c: 21: odoTotal[5]++;
   436  000C06  2A2A               	incf	_odoTotal+5,f,c
   437                           
   438                           ;Odometro_Total_Parcial.c: 22: if (odoTotal[5] > 0x39)
   439  000C08  0E39               	movlw	57
   440  000C0A  642A               	cpfsgt	_odoTotal+5,c
   441  000C0C  D01B               	goto	l1523
   442                           
   443                           ;Odometro_Total_Parcial.c: 23: {
   444                           ;Odometro_Total_Parcial.c: 24: odoTotal[5] = 0x30;
   445  000C0E  0E30               	movlw	48
   446  000C10  6E2A               	movwf	_odoTotal+5,c
   447                           
   448                           ;Odometro_Total_Parcial.c: 25: odoTotal[4]++;
   449  000C12  2A29               	incf	_odoTotal+4,f,c
   450                           
   451                           ;Odometro_Total_Parcial.c: 26: if (odoTotal[4] > 0x39)
   452  000C14  0E39               	movlw	57
   453  000C16  6429               	cpfsgt	_odoTotal+4,c
   454  000C18  D015               	goto	l1523
   455                           
   456                           ;Odometro_Total_Parcial.c: 27: {
   457                           ;Odometro_Total_Parcial.c: 28: odoTotal[4] = 0x30;
   458  000C1A  0E30               	movlw	48
   459  000C1C  6E29               	movwf	_odoTotal+4,c
   460                           
   461                           ;Odometro_Total_Parcial.c: 29: odoTotal[3]++;
   462  000C1E  2A28               	incf	_odoTotal+3,f,c
   463                           
   464                           ;Odometro_Total_Parcial.c: 30: if (odoTotal[3] > 0x39)
   465  000C20  0E39               	movlw	57
   466  000C22  6428               	cpfsgt	_odoTotal+3,c
   467  000C24  D00F               	goto	l1523
   468                           
   469                           ;Odometro_Total_Parcial.c: 31: {
   470                           ;Odometro_Total_Parcial.c: 32: odoTotal[3] = 0x30;
   471  000C26  0E30               	movlw	48
   472  000C28  6E28               	movwf	_odoTotal+3,c
   473                           
   474                           ;Odometro_Total_Parcial.c: 33: odoTotal[2]++;
   475  000C2A  2A27               	incf	_odoTotal+2,f,c
   476                           
   477                           ;Odometro_Total_Parcial.c: 34: if (odoTotal[2] > 0x39)
   478  000C2C  0E39               	movlw	57
   479  000C2E  6427               	cpfsgt	_odoTotal+2,c
   480  000C30  D009               	goto	l1523
   481                           
   482                           ;Odometro_Total_Parcial.c: 35: {
   483                           ;Odometro_Total_Parcial.c: 36: odoTotal[2] = 0x30;
   484  000C32  0E30               	movlw	48
   485  000C34  6E27               	movwf	_odoTotal+2,c
   486                           
   487                           ;Odometro_Total_Parcial.c: 37: odoTotal[1]++;
   488  000C36  2A26               	incf	_odoTotal+1,f,c
   489                           
   490                           ;Odometro_Total_Parcial.c: 38: if (odoTotal[1] > 0x39)
   491  000C38  0E39               	movlw	57
   492  000C3A  6426               	cpfsgt	_odoTotal+1,c
   493  000C3C  D003               	goto	l1523
   494                           
   495                           ;Odometro_Total_Parcial.c: 39: {
   496                           ;Odometro_Total_Parcial.c: 40: odoTotal[1] = 0x30;
   497  000C3E  0E30               	movlw	48
   498  000C40  6E26               	movwf	_odoTotal+1,c
   499                           
   500                           ;Odometro_Total_Parcial.c: 41: odoTotal[0]++;
   501  000C42  2A25               	incf	_odoTotal,f,c
   502  000C44                     l1523:
   503                           
   504                           ;Odometro_Total_Parcial.c: 45: }
   505                           ;Odometro_Total_Parcial.c: 46: }
   506                           ;Odometro_Total_Parcial.c: 47: }
   507                           ;Odometro_Total_Parcial.c: 48: }
   508                           ;Odometro_Total_Parcial.c: 49: }
   509                           ;Odometro_Total_Parcial.c: 50: }
   510                           ;Odometro_Total_Parcial.c: 51: PosicaoCursorLCD(1, 7);
   511  000C44  0E07               	movlw	7
   512  000C46  6E12               	movwf	PosicaoCursorLCD@coluna,c
   513  000C48  0E01               	movlw	1
   514  000C4A  EC92  F005         	call	_PosicaoCursorLCD
   515                           
   516                           ;Odometro_Total_Parcial.c: 52: EscreveFraseRamLCD(odoTotal);
   517  000C4E  0E25               	movlw	low _odoTotal
   518  000C50  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   519  000C52  0E00               	movlw	high _odoTotal
   520  000C54  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   521  000C56  EC5F  F006         	call	_EscreveFraseRamLCD	;wreg free
   522                           
   523                           ;Odometro_Total_Parcial.c: 53: atualizaOdoTotal = 0;
   524  000C5A  0E00               	movlw	0
   525  000C5C  6E2F               	movwf	_atualizaOdoTotal+1,c
   526  000C5E  0E00               	movlw	0
   527  000C60  6E2E               	movwf	_atualizaOdoTotal,c
   528  000C62  0012               	return	
   529  000C64                     __end_of_odometroTotal:
   530                           	opt stack 0
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           postinc0	equ	0xFEE
   536                           wreg	equ	0xFE8
   537                           postdec1	equ	0xFE5
   538                           fsr1l	equ	0xFE1
   539                           status	equ	0xFD8
   540                           
   541 ;; *************** function _odometroParcial *****************
   542 ;; Defined at:
   543 ;;		line 57 in file "Odometro_Total_Parcial.c"
   544 ;; Parameters:    Size  Location     Type
   545 ;;		None
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  trava           1   21[COMRAM] unsigned char 
   548 ;;  position        1   20[COMRAM] unsigned char 
   549 ;; Return value:  Size  Location     Type
   550 ;;                  1    wreg      void 
   551 ;; Registers used:
   552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   558 ;;      Params:         0       0       0       0       0       0       0       0       0
   559 ;;      Locals:         2       0       0       0       0       0       0       0       0
   560 ;;      Temps:          0       0       0       0       0       0       0       0       0
   561 ;;      Totals:         2       0       0       0       0       0       0       0       0
   562 ;;Total ram usage:        2 bytes
   563 ;; Hardware stack levels used:    1
   564 ;; Hardware stack levels required when called:    4
   565 ;; This function calls:
   566 ;;		_EscreveFraseRamLCD
   567 ;;		_PosicaoCursorLCD
   568 ;; This function is called by:
   569 ;;		_main
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573                           	psect	text2
   574  000806                     __ptext2:
   575                           	opt stack 0
   576  000806                     _odometroParcial:
   577                           	opt stack 26
   578                           
   579                           ;Odometro_Total_Parcial.c: 58: unsigned char trava = 0;
   580                           
   581                           ;incstack = 0
   582  000806  0E00               	movlw	0
   583  000808  6E16               	movwf	odometroParcial@trava,c
   584                           
   585                           ;Odometro_Total_Parcial.c: 59: static unsigned char i;
   586                           ;Odometro_Total_Parcial.c: 60: char position = 0;
   587  00080A  0E00               	movlw	0
   588  00080C  6E15               	movwf	odometroParcial@position,c
   589                           
   590                           ;Odometro_Total_Parcial.c: 62: if (atualizaOdoParcial){
   591  00080E  502C               	movf	_atualizaOdoParcial,w,c
   592  000810  102D               	iorwf	_atualizaOdoParcial+1,w,c
   593  000812  B4D8               	btfsc	status,2,c
   594  000814  0012               	return	
   595                           
   596                           ;Odometro_Total_Parcial.c: 63: odoParcial[5]++;
   597  000816  2A23               	incf	_odoParcial+5,f,c
   598                           
   599                           ;Odometro_Total_Parcial.c: 65: if (odoParcial[5] > 0x39){
   600  000818  0E39               	movlw	57
   601  00081A  6423               	cpfsgt	_odoParcial+5,c
   602  00081C  0012               	return	
   603                           
   604                           ;Odometro_Total_Parcial.c: 66: odoParcial[5] = 0x30;
   605  00081E  0E30               	movlw	48
   606  000820  6E23               	movwf	_odoParcial+5,c
   607                           
   608                           ;Odometro_Total_Parcial.c: 67: odoParcial[3]++;
   609  000822  2A21               	incf	_odoParcial+3,f,c
   610                           
   611                           ;Odometro_Total_Parcial.c: 69: if (odoParcial[3] > 0x39){
   612  000824  0E39               	movlw	57
   613  000826  6421               	cpfsgt	_odoParcial+3,c
   614  000828  D026               	goto	l1575
   615                           
   616                           ;Odometro_Total_Parcial.c: 70: odoParcial[3] = 0x30;
   617  00082A  0E30               	movlw	48
   618  00082C  6E21               	movwf	_odoParcial+3,c
   619                           
   620                           ;Odometro_Total_Parcial.c: 71: odoParcial[2]++;
   621  00082E  2A20               	incf	_odoParcial+2,f,c
   622                           
   623                           ;Odometro_Total_Parcial.c: 73: if (odoParcial[2] > 0x39){
   624  000830  0E39               	movlw	57
   625  000832  6420               	cpfsgt	_odoParcial+2,c
   626  000834  D020               	goto	l1575
   627                           
   628                           ;Odometro_Total_Parcial.c: 74: odoParcial[2] = 0x30;
   629  000836  0E30               	movlw	48
   630  000838  6E20               	movwf	_odoParcial+2,c
   631                           
   632                           ;Odometro_Total_Parcial.c: 75: odoParcial[1]++;
   633  00083A  2A1F               	incf	_odoParcial+1,f,c
   634                           
   635                           ;Odometro_Total_Parcial.c: 77: if (odoParcial[1] > 0x39){
   636  00083C  0E39               	movlw	57
   637  00083E  641F               	cpfsgt	_odoParcial+1,c
   638  000840  D01A               	goto	l1575
   639                           
   640                           ;Odometro_Total_Parcial.c: 78: odoParcial[1] = 0x30;
   641  000842  0E30               	movlw	48
   642  000844  6E1F               	movwf	_odoParcial+1,c
   643                           
   644                           ;Odometro_Total_Parcial.c: 79: odoParcial[0]++;
   645  000846  2A1E               	incf	_odoParcial,f,c
   646                           
   647                           ;Odometro_Total_Parcial.c: 81: if (odoParcial[0] > 0x39){
   648  000848  0E39               	movlw	57
   649  00084A  641E               	cpfsgt	_odoParcial,c
   650  00084C  D014               	goto	l1575
   651                           
   652                           ;Odometro_Total_Parcial.c: 82: for (i = 0; i <= 3; i++){
   653  00084E  0E00               	movlw	0
   654  000850  6E34               	movwf	odometroParcial@i,c
   655  000852                     l1563:
   656  000852  0E03               	movlw	3
   657  000854  6434               	cpfsgt	odometroParcial@i,c
   658  000856  D001               	goto	l1567
   659  000858  D00E               	goto	l1575
   660  00085A                     l1567:
   661                           
   662                           ;Odometro_Total_Parcial.c: 83: odoParcial[i] = '0';
   663  00085A  5034               	movf	odometroParcial@i,w,c
   664  00085C  0D01               	mullw	1
   665  00085E  0E1E               	movlw	low _odoParcial
   666  000860  24F3               	addwf	prodl,w,c
   667  000862  6ED9               	movwf	fsr2l,c
   668  000864  0E00               	movlw	high _odoParcial
   669  000866  20F4               	addwfc	prodh,w,c
   670  000868  6EDA               	movwf	fsr2h,c
   671  00086A  0E30               	movlw	48
   672  00086C  6EDF               	movwf	indf2,c
   673                           
   674                           ;Odometro_Total_Parcial.c: 84: odoParcial[5] = '0';
   675  00086E  0E30               	movlw	48
   676  000870  6E23               	movwf	_odoParcial+5,c
   677  000872  2A34               	incf	odometroParcial@i,f,c
   678  000874  D7EE               	goto	l1563
   679  000876                     l1575:
   680                           
   681                           ;Odometro_Total_Parcial.c: 85: }
   682                           ;Odometro_Total_Parcial.c: 86: }
   683                           ;Odometro_Total_Parcial.c: 87: }
   684                           ;Odometro_Total_Parcial.c: 88: }
   685                           ;Odometro_Total_Parcial.c: 89: }
   686                           ;Odometro_Total_Parcial.c: 90: PosicaoCursorLCD(2, 7);
   687  000876  0E07               	movlw	7
   688  000878  6E12               	movwf	PosicaoCursorLCD@coluna,c
   689  00087A  0E02               	movlw	2
   690  00087C  EC92  F005         	call	_PosicaoCursorLCD
   691                           
   692                           ;Odometro_Total_Parcial.c: 91: EscreveFraseRamLCD(odoParcial);
   693  000880  0E1E               	movlw	low _odoParcial
   694  000882  6E12               	movwf	EscreveFraseRamLCD@buffer,c
   695  000884  0E00               	movlw	high _odoParcial
   696  000886  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
   697  000888  EC5F  F006         	call	_EscreveFraseRamLCD	;wreg free
   698                           
   699                           ;Odometro_Total_Parcial.c: 92: atualizaOdoParcial = 0;
   700  00088C  0E00               	movlw	0
   701  00088E  6E2D               	movwf	_atualizaOdoParcial+1,c
   702  000890  0E00               	movlw	0
   703  000892  6E2C               	movwf	_atualizaOdoParcial,c
   704                           
   705                           ;Odometro_Total_Parcial.c: 94: if((PORTEbits.RE0 == 0)&&(trava == 0)) {
   706  000894  B084               	btfsc	3972,0,c	;volatile
   707  000896  D010               	goto	l203
   708  000898  5016               	movf	odometroParcial@trava,w,c
   709  00089A  A4D8               	btfss	status,2,c
   710  00089C  D00D               	goto	l203
   711                           
   712                           ;Odometro_Total_Parcial.c: 95: odoParcial[0] = 0x30;
   713  00089E  0E30               	movlw	48
   714  0008A0  6E1E               	movwf	_odoParcial,c
   715                           
   716                           ;Odometro_Total_Parcial.c: 96: odoParcial[1] = 0x30;
   717  0008A2  0E30               	movlw	48
   718  0008A4  6E1F               	movwf	_odoParcial+1,c
   719                           
   720                           ;Odometro_Total_Parcial.c: 97: odoParcial[2] = 0x30;
   721  0008A6  0E30               	movlw	48
   722  0008A8  6E20               	movwf	_odoParcial+2,c
   723                           
   724                           ;Odometro_Total_Parcial.c: 98: odoParcial[3] = 0x30;
   725  0008AA  0E30               	movlw	48
   726  0008AC  6E21               	movwf	_odoParcial+3,c
   727                           
   728                           ;Odometro_Total_Parcial.c: 99: odoParcial[5] = 0x30;
   729  0008AE  0E30               	movlw	48
   730  0008B0  6E23               	movwf	_odoParcial+5,c
   731                           
   732                           ;Odometro_Total_Parcial.c: 101: trava = 1;
   733  0008B2  0E01               	movlw	1
   734  0008B4  6E16               	movwf	odometroParcial@trava,c
   735                           
   736                           ;Odometro_Total_Parcial.c: 102: } else if((PORTEbits.RE0 == 1) && (trava == 1)){
   737  0008B6  0012               	return	
   738  0008B8                     l203:
   739  0008B8  A084               	btfss	3972,0,c	;volatile
   740  0008BA  0012               	return	
   741  0008BC  0416               	decf	odometroParcial@trava,w,c
   742  0008BE  A4D8               	btfss	status,2,c
   743  0008C0  0012               	return	
   744                           
   745                           ;Odometro_Total_Parcial.c: 103: trava = 0;
   746  0008C2  0E00               	movlw	0
   747  0008C4  6E16               	movwf	odometroParcial@trava,c
   748  0008C6  0012               	return	
   749  0008C8                     __end_of_odometroParcial:
   750                           	opt stack 0
   751                           tblptru	equ	0xFF8
   752                           tblptrh	equ	0xFF7
   753                           tblptrl	equ	0xFF6
   754                           tablat	equ	0xFF5
   755                           prodh	equ	0xFF4
   756                           prodl	equ	0xFF3
   757                           postinc0	equ	0xFEE
   758                           wreg	equ	0xFE8
   759                           postdec1	equ	0xFE5
   760                           fsr1l	equ	0xFE1
   761                           indf2	equ	0xFDF
   762                           fsr2h	equ	0xFDA
   763                           fsr2l	equ	0xFD9
   764                           status	equ	0xFD8
   765                           
   766 ;; *************** function _initInterrupt *****************
   767 ;; Defined at:
   768 ;;		line 52 in file "main.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;		None
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      void 
   775 ;; Registers used:
   776 ;;		wreg, status,2
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   782 ;;      Params:         0       0       0       0       0       0       0       0       0
   783 ;;      Locals:         0       0       0       0       0       0       0       0       0
   784 ;;      Temps:          0       0       0       0       0       0       0       0       0
   785 ;;      Totals:         0       0       0       0       0       0       0       0       0
   786 ;;Total ram usage:        0 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; Hardware stack levels required when called:    1
   789 ;; This function calls:
   790 ;;		Nothing
   791 ;; This function is called by:
   792 ;;		_main
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text3
   797  000D8E                     __ptext3:
   798                           	opt stack 0
   799  000D8E                     _initInterrupt:
   800                           	opt stack 29
   801                           
   802                           ;main.c: 53: INTCON = 0b11100000;
   803                           
   804                           ;incstack = 0
   805  000D8E  0EE0               	movlw	224
   806  000D90  6EF2               	movwf	intcon,c	;volatile
   807                           
   808                           ;main.c: 54: INTCON2 = 0b10000000;
   809  000D92  0E80               	movlw	128
   810  000D94  6EF1               	movwf	intcon2,c	;volatile
   811                           
   812                           ;main.c: 55: INTCON3 = 0b00000000;
   813  000D96  0E00               	movlw	0
   814  000D98  6EF0               	movwf	intcon3,c	;volatile
   815                           
   816                           ;main.c: 56: CCP1CON = 0b00000101;
   817  000D9A  0E05               	movlw	5
   818  000D9C  6EBD               	movwf	4029,c	;volatile
   819                           
   820                           ;main.c: 57: PIR1 = 0b00000000;
   821  000D9E  0E00               	movlw	0
   822  000DA0  6E9E               	movwf	3998,c	;volatile
   823                           
   824                           ;main.c: 58: PIR2 = 0b00000000;
   825  000DA2  0E00               	movlw	0
   826  000DA4  6EA1               	movwf	4001,c	;volatile
   827                           
   828                           ;main.c: 59: PIE1 = 0b00000100;
   829  000DA6  0E04               	movlw	4
   830  000DA8  6E9D               	movwf	3997,c	;volatile
   831                           
   832                           ;main.c: 60: PIE2 = 0b00000000;
   833  000DAA  0E00               	movlw	0
   834  000DAC  6EA0               	movwf	4000,c	;volatile
   835                           
   836                           ;main.c: 61: IPR1 = 0b00000000;
   837  000DAE  0E00               	movlw	0
   838  000DB0  6E9F               	movwf	3999,c	;volatile
   839                           
   840                           ;main.c: 62: IPR2 = 0b00000000;
   841  000DB2  0E00               	movlw	0
   842  000DB4  6EA2               	movwf	4002,c	;volatile
   843                           
   844                           ;main.c: 63: RCON = 0b00000000;
   845  000DB6  0E00               	movlw	0
   846  000DB8  6ED0               	movwf	4048,c	;volatile
   847  000DBA  0012               	return		;funcret
   848  000DBC                     __end_of_initInterrupt:
   849                           	opt stack 0
   850                           tblptru	equ	0xFF8
   851                           tblptrh	equ	0xFF7
   852                           tblptrl	equ	0xFF6
   853                           tablat	equ	0xFF5
   854                           prodh	equ	0xFF4
   855                           prodl	equ	0xFF3
   856                           intcon	equ	0xFF2
   857                           intcon2	equ	0xFF1
   858                           intcon3	equ	0xFF0
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           postdec1	equ	0xFE5
   862                           fsr1l	equ	0xFE1
   863                           indf2	equ	0xFDF
   864                           fsr2h	equ	0xFDA
   865                           fsr2l	equ	0xFD9
   866                           status	equ	0xFD8
   867                           
   868 ;; *************** function _initHw *****************
   869 ;; Defined at:
   870 ;;		line 65 in file "main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;		None
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, status,2
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   884 ;;      Params:         0       0       0       0       0       0       0       0       0
   885 ;;      Locals:         0       0       0       0       0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0       0       0       0       0
   887 ;;      Totals:         0       0       0       0       0       0       0       0       0
   888 ;;Total ram usage:        0 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    1
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_main
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text4
   899  000D10                     __ptext4:
   900                           	opt stack 0
   901  000D10                     _initHw:
   902                           	opt stack 29
   903                           
   904                           ;main.c: 67: TRISA = 0x00;
   905                           
   906                           ;incstack = 0
   907  000D10  0E00               	movlw	0
   908  000D12  6E92               	movwf	3986,c	;volatile
   909                           
   910                           ;main.c: 68: TRISB = 0x00;
   911  000D14  0E00               	movlw	0
   912  000D16  6E93               	movwf	3987,c	;volatile
   913                           
   914                           ;main.c: 69: TRISC = 0x00;
   915  000D18  0E00               	movlw	0
   916  000D1A  6E94               	movwf	3988,c	;volatile
   917                           
   918                           ;main.c: 70: TRISCbits.RC2 = 1;
   919  000D1C  8494               	bsf	3988,2,c	;volatile
   920                           
   921                           ;main.c: 71: TRISD = 0x00;
   922  000D1E  0E00               	movlw	0
   923  000D20  6E95               	movwf	3989,c	;volatile
   924                           
   925                           ;main.c: 72: TRISE = 0x0F;
   926  000D22  0E0F               	movlw	15
   927  000D24  6E96               	movwf	3990,c	;volatile
   928                           
   929                           ;main.c: 74: ADCON0 = 0b00000001;
   930  000D26  0E01               	movlw	1
   931  000D28  6EC2               	movwf	4034,c	;volatile
   932                           
   933                           ;main.c: 75: ADCON1 = 0b00001101;
   934  000D2A  0E0D               	movlw	13
   935  000D2C  6EC1               	movwf	4033,c	;volatile
   936                           
   937                           ;main.c: 76: ADCON2 = 0b10000100;
   938  000D2E  0E84               	movlw	132
   939  000D30  6EC0               	movwf	4032,c	;volatile
   940                           
   941                           ;main.c: 78: PORTEbits.RE0 = 0;
   942  000D32  9084               	bcf	3972,0,c	;volatile
   943                           
   944                           ;main.c: 81: LATA = 0x00;
   945  000D34  0E00               	movlw	0
   946  000D36  6E89               	movwf	3977,c	;volatile
   947                           
   948                           ;main.c: 82: LATB = 0x00;
   949  000D38  0E00               	movlw	0
   950  000D3A  6E8A               	movwf	3978,c	;volatile
   951                           
   952                           ;main.c: 83: LATD = 0x00;
   953  000D3C  0E00               	movlw	0
   954  000D3E  6E8C               	movwf	3980,c	;volatile
   955                           
   956                           ;main.c: 85: T0CON = 0b01000101;
   957  000D40  0E45               	movlw	69
   958  000D42  6ED5               	movwf	4053,c	;volatile
   959                           
   960                           ;main.c: 86: CCP1CON = 0b00000101;
   961  000D44  0E05               	movlw	5
   962  000D46  6EBD               	movwf	4029,c	;volatile
   963                           
   964                           ;main.c: 87: T1CON = 0b01000100;
   965  000D48  0E44               	movlw	68
   966  000D4A  6ECD               	movwf	4045,c	;volatile
   967                           
   968                           ;main.c: 88: T3CONbits.T3CCP1 = 0;
   969  000D4C  96B1               	bcf	4017,3,c	;volatile
   970                           
   971                           ;main.c: 89: INTCONbits.GIE = 1;
   972  000D4E  8EF2               	bsf	intcon,7,c	;volatile
   973                           
   974                           ;main.c: 90: INTCONbits.PEIE = 1;
   975  000D50  8CF2               	bsf	intcon,6,c	;volatile
   976  000D52  0012               	return		;funcret
   977  000D54                     __end_of_initHw:
   978                           	opt stack 0
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           prodh	equ	0xFF4
   984                           prodl	equ	0xFF3
   985                           intcon	equ	0xFF2
   986                           intcon2	equ	0xFF1
   987                           intcon3	equ	0xFF0
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           postdec1	equ	0xFE5
   991                           fsr1l	equ	0xFE1
   992                           indf2	equ	0xFDF
   993                           fsr2h	equ	0xFDA
   994                           fsr2l	equ	0xFD9
   995                           status	equ	0xFD8
   996                           
   997 ;; *************** function _display *****************
   998 ;; Defined at:
   999 ;;		line 93 in file "main.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;		None
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;		None
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1013 ;;      Params:         0       0       0       0       0       0       0       0       0
  1014 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1016 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1017 ;;Total ram usage:        0 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    4
  1020 ;; This function calls:
  1021 ;;		_EscreveFraseRamLCD
  1022 ;;		_PosicaoCursorLCD
  1023 ;; This function is called by:
  1024 ;;		_main
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           	psect	text5
  1029  000C64                     __ptext5:
  1030                           	opt stack 0
  1031  000C64                     _display:
  1032                           	opt stack 26
  1033                           
  1034                           ;main.c: 94: PosicaoCursorLCD(1, 7);
  1035                           
  1036                           ;incstack = 0
  1037  000C64  0E07               	movlw	7
  1038  000C66  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1039  000C68  0E01               	movlw	1
  1040  000C6A  EC92  F005         	call	_PosicaoCursorLCD
  1041                           
  1042                           ;main.c: 95: EscreveFraseRamLCD(odoTotal);
  1043  000C6E  0E25               	movlw	low _odoTotal
  1044  000C70  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1045  000C72  0E00               	movlw	high _odoTotal
  1046  000C74  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1047  000C76  EC5F  F006         	call	_EscreveFraseRamLCD	;wreg free
  1048                           
  1049                           ;main.c: 96: PosicaoCursorLCD(2, 7);
  1050  000C7A  0E07               	movlw	7
  1051  000C7C  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1052  000C7E  0E02               	movlw	2
  1053  000C80  EC92  F005         	call	_PosicaoCursorLCD
  1054                           
  1055                           ;main.c: 97: EscreveFraseRamLCD(odoParcial);
  1056  000C84  0E1E               	movlw	low _odoParcial
  1057  000C86  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1058  000C88  0E00               	movlw	high _odoParcial
  1059  000C8A  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1060  000C8C  EC5F  F006         	call	_EscreveFraseRamLCD	;wreg free
  1061                           
  1062                           ;main.c: 98: PosicaoCursorLCD(1, 14);
  1063  000C90  0E0E               	movlw	14
  1064  000C92  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1065  000C94  0E01               	movlw	1
  1066  000C96  EC92  F005         	call	_PosicaoCursorLCD
  1067                           
  1068                           ;main.c: 99: EscreveFraseRamLCD("Km");
  1069  000C9A  0E01               	movlw	low STR_1
  1070  000C9C  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1071  000C9E  0E08               	movlw	high STR_1
  1072  000CA0  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1073  000CA2  EC5F  F006         	call	_EscreveFraseRamLCD	;wreg free
  1074                           
  1075                           ;main.c: 100: PosicaoCursorLCD(2, 14);
  1076  000CA6  0E0E               	movlw	14
  1077  000CA8  6E12               	movwf	PosicaoCursorLCD@coluna,c
  1078  000CAA  0E02               	movlw	2
  1079  000CAC  EC92  F005         	call	_PosicaoCursorLCD
  1080                           
  1081                           ;main.c: 101: EscreveFraseRamLCD("Km");
  1082  000CB0  0E01               	movlw	low STR_1
  1083  000CB2  6E12               	movwf	EscreveFraseRamLCD@buffer,c
  1084  000CB4  0E08               	movlw	high STR_1
  1085  000CB6  6E13               	movwf	EscreveFraseRamLCD@buffer+1,c
  1086  000CB8  EC5F  F006         	call	_EscreveFraseRamLCD	;wreg free
  1087  000CBC  0012               	return		;funcret
  1088  000CBE                     __end_of_display:
  1089                           	opt stack 0
  1090                           tblptru	equ	0xFF8
  1091                           tblptrh	equ	0xFF7
  1092                           tblptrl	equ	0xFF6
  1093                           tablat	equ	0xFF5
  1094                           prodh	equ	0xFF4
  1095                           prodl	equ	0xFF3
  1096                           intcon	equ	0xFF2
  1097                           intcon2	equ	0xFF1
  1098                           intcon3	equ	0xFF0
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           postdec1	equ	0xFE5
  1102                           fsr1l	equ	0xFE1
  1103                           indf2	equ	0xFDF
  1104                           fsr2h	equ	0xFDA
  1105                           fsr2l	equ	0xFD9
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function _PosicaoCursorLCD *****************
  1109 ;; Defined at:
  1110 ;;		line 287 in file "displayLCD.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  linha           1    wreg     unsigned char 
  1113 ;;  coluna          1   17[COMRAM] unsigned char 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  linha           1   18[COMRAM] unsigned char 
  1116 ;;  EnderecoLCD     1   19[COMRAM] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, status,2, status,0, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1126 ;;      Params:         1       0       0       0       0       0       0       0       0
  1127 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1129 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1130 ;;Total ram usage:        3 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    3
  1133 ;; This function calls:
  1134 ;;		_EnderecoCursor
  1135 ;; This function is called by:
  1136 ;;		_odometroTotal
  1137 ;;		_odometroParcial
  1138 ;;		_display
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text6
  1143  000B24                     __ptext6:
  1144                           	opt stack 0
  1145  000B24                     _PosicaoCursorLCD:
  1146                           	opt stack 26
  1147                           
  1148                           ;incstack = 0
  1149                           ;PosicaoCursorLCD@linha stored from wreg
  1150  000B24  6E13               	movwf	PosicaoCursorLCD@linha,c
  1151                           
  1152                           ;displayLCD.c: 295: unsigned char EnderecoLCD = 0x00;
  1153  000B26  0E00               	movlw	0
  1154  000B28  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1155                           
  1156                           ;displayLCD.c: 299: if(coluna <= 16)
  1157  000B2A  0E11               	movlw	17
  1158  000B2C  6012               	cpfslt	PosicaoCursorLCD@coluna,c
  1159  000B2E  D02F               	goto	l1471
  1160  000B30  D01E               	goto	l1467
  1161  000B32                     l70:
  1162                           
  1163                           ;displayLCD.c: 306: EnderecoLCD = 0x00 + coluna;
  1164  000B32  C012  F014         	movff	PosicaoCursorLCD@coluna,PosicaoCursorLCD@EnderecoLCD
  1165                           
  1166                           ;displayLCD.c: 307: EnderecoCursor(EnderecoLCD);
  1167  000B36  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1168  000B38  ECCA  F005         	call	_EnderecoCursor
  1169                           
  1170                           ;displayLCD.c: 308: break;
  1171  000B3C  D026               	goto	l1469
  1172  000B3E                     l1451:
  1173                           
  1174                           ;displayLCD.c: 311: EnderecoLCD = 0x40 + coluna;
  1175  000B3E  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1176  000B40  0F40               	addlw	64
  1177  000B42  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1178                           
  1179                           ;displayLCD.c: 312: EnderecoCursor(EnderecoLCD);
  1180  000B44  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1181  000B46  ECCA  F005         	call	_EnderecoCursor
  1182                           
  1183                           ;displayLCD.c: 313: break;
  1184  000B4A  D01F               	goto	l1469
  1185  000B4C                     l1455:
  1186                           
  1187                           ;displayLCD.c: 316: EnderecoLCD = 0x14 + coluna;
  1188  000B4C  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1189  000B4E  0F14               	addlw	20
  1190  000B50  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1191                           
  1192                           ;displayLCD.c: 317: EnderecoCursor(EnderecoLCD);
  1193  000B52  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1194  000B54  ECCA  F005         	call	_EnderecoCursor
  1195                           
  1196                           ;displayLCD.c: 318: break;
  1197  000B58  D018               	goto	l1469
  1198  000B5A                     l1459:
  1199                           
  1200                           ;displayLCD.c: 321: EnderecoLCD = 0x54 + coluna;
  1201  000B5A  5012               	movf	PosicaoCursorLCD@coluna,w,c
  1202  000B5C  0F54               	addlw	84
  1203  000B5E  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1204                           
  1205                           ;displayLCD.c: 322: EnderecoCursor(EnderecoLCD);
  1206  000B60  5014               	movf	PosicaoCursorLCD@EnderecoLCD,w,c
  1207  000B62  ECCA  F005         	call	_EnderecoCursor
  1208                           
  1209                           ;displayLCD.c: 323: break;
  1210  000B66  D011               	goto	l1469
  1211  000B68                     l1463:
  1212                           
  1213                           ;displayLCD.c: 326: EnderecoLCD = 0x00;
  1214  000B68  0E00               	movlw	0
  1215  000B6A  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1216                           
  1217                           ;displayLCD.c: 328: }
  1218                           
  1219                           ;displayLCD.c: 327: break;
  1220  000B6C  D00E               	goto	l1469
  1221  000B6E                     l1467:
  1222  000B6E  5013               	movf	PosicaoCursorLCD@linha,w,c
  1223                           
  1224                           ; Switch size 1, requested type "space"
  1225                           ; Number of cases is 4, Range of values is 1 to 4
  1226                           ; switch strategies available:
  1227                           ; Name         Instructions Cycles
  1228                           ; simple_byte           13     7 (average)
  1229                           ;	Chosen strategy is simple_byte
  1230  000B70  0A01               	xorlw	1	; case 1
  1231  000B72  B4D8               	btfsc	status,2,c
  1232  000B74  D7DE               	goto	l70
  1233  000B76  0A03               	xorlw	3	; case 2
  1234  000B78  B4D8               	btfsc	status,2,c
  1235  000B7A  D7E1               	goto	l1451
  1236  000B7C  0A01               	xorlw	1	; case 3
  1237  000B7E  B4D8               	btfsc	status,2,c
  1238  000B80  D7E5               	goto	l1455
  1239  000B82  0A07               	xorlw	7	; case 4
  1240  000B84  B4D8               	btfsc	status,2,c
  1241  000B86  D7E9               	goto	l1459
  1242  000B88  D7EF               	goto	l1463
  1243  000B8A                     l1469:
  1244                           
  1245                           ;displayLCD.c: 330: coluna++;
  1246  000B8A  2A12               	incf	PosicaoCursorLCD@coluna,f,c
  1247                           
  1248                           ;displayLCD.c: 331: }
  1249  000B8C  0012               	return	
  1250  000B8E                     l1471:
  1251                           
  1252                           ;displayLCD.c: 332: else
  1253                           ;displayLCD.c: 333: {
  1254                           ;displayLCD.c: 334: EnderecoLCD = 0x00;
  1255  000B8E  0E00               	movlw	0
  1256  000B90  6E14               	movwf	PosicaoCursorLCD@EnderecoLCD,c
  1257  000B92  0012               	return	
  1258  000B94                     __end_of_PosicaoCursorLCD:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           prodh	equ	0xFF4
  1265                           prodl	equ	0xFF3
  1266                           intcon	equ	0xFF2
  1267                           intcon2	equ	0xFF1
  1268                           intcon3	equ	0xFF0
  1269                           postinc0	equ	0xFEE
  1270                           wreg	equ	0xFE8
  1271                           postdec1	equ	0xFE5
  1272                           fsr1l	equ	0xFE1
  1273                           indf2	equ	0xFDF
  1274                           fsr2h	equ	0xFDA
  1275                           fsr2l	equ	0xFD9
  1276                           status	equ	0xFD8
  1277                           
  1278 ;; *************** function _EnderecoCursor *****************
  1279 ;; Defined at:
  1280 ;;		line 236 in file "displayLCD.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;  endereco        1    wreg     unsigned char 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  endereco        1   16[COMRAM] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1294 ;;      Params:         0       0       0       0       0       0       0       0       0
  1295 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1296 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1297 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1298 ;;Total ram usage:        1 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    2
  1301 ;; This function calls:
  1302 ;;		_Delay
  1303 ;; This function is called by:
  1304 ;;		_PosicaoCursorLCD
  1305 ;;		_CriaCaractereLCD
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text7
  1310  000B94                     __ptext7:
  1311                           	opt stack 0
  1312  000B94                     _EnderecoCursor:
  1313                           	opt stack 26
  1314                           
  1315                           ;incstack = 0
  1316                           ;EnderecoCursor@endereco stored from wreg
  1317  000B94  6E11               	movwf	EnderecoCursor@endereco,c
  1318                           
  1319                           ;displayLCD.c: 239: PORTDbits.RD2 = 0;
  1320  000B96  9483               	bcf	3971,2,c	;volatile
  1321                           
  1322                           ;displayLCD.c: 240: PORTDbits.RD1 = 0;
  1323  000B98  9283               	bcf	3971,1,c	;volatile
  1324                           
  1325                           ;displayLCD.c: 241: PORTDbits.RD0 = 0;
  1326  000B9A  9083               	bcf	3971,0,c	;volatile
  1327                           
  1328                           ;displayLCD.c: 244: PORTDbits.RD7 = 1;
  1329  000B9C  8E83               	bsf	3971,7,c	;volatile
  1330                           
  1331                           ;displayLCD.c: 245: if(endereco&0b00010000){PORTDbits.RD4=1;}
  1332  000B9E  A811               	btfss	EnderecoCursor@endereco,4,c
  1333  000BA0  D002               	goto	l51
  1334  000BA2  8883               	bsf	3971,4,c	;volatile
  1335  000BA4  D001               	goto	l975
  1336  000BA6                     l51:
  1337                           
  1338                           ;displayLCD.c: 246: else {PORTDbits.RD4=0;}
  1339  000BA6  9883               	bcf	3971,4,c	;volatile
  1340  000BA8                     l975:
  1341                           
  1342                           ;displayLCD.c: 247: if(endereco&0b00100000){PORTDbits.RD5=1;}
  1343  000BA8  AA11               	btfss	EnderecoCursor@endereco,5,c
  1344  000BAA  D002               	goto	l53
  1345  000BAC  8A83               	bsf	3971,5,c	;volatile
  1346  000BAE  D001               	goto	l979
  1347  000BB0                     l53:
  1348                           
  1349                           ;displayLCD.c: 248: else {PORTDbits.RD5=0;}
  1350  000BB0  9A83               	bcf	3971,5,c	;volatile
  1351  000BB2                     l979:
  1352                           
  1353                           ;displayLCD.c: 249: if(endereco&0b01000000){PORTDbits.RD6=1;}
  1354  000BB2  AC11               	btfss	EnderecoCursor@endereco,6,c
  1355  000BB4  D002               	goto	l55
  1356  000BB6  8C83               	bsf	3971,6,c	;volatile
  1357  000BB8  D001               	goto	l56
  1358  000BBA                     l55:
  1359                           
  1360                           ;displayLCD.c: 250: else {PORTDbits.RD6=0;}
  1361  000BBA  9C83               	bcf	3971,6,c	;volatile
  1362  000BBC                     l56:
  1363                           
  1364                           ;displayLCD.c: 253: PORTDbits.RD0 = 1;
  1365  000BBC  8083               	bsf	3971,0,c	;volatile
  1366                           
  1367                           ;displayLCD.c: 254: Delay();
  1368  000BBE  ECDE  F006         	call	_Delay	;wreg free
  1369                           
  1370                           ;displayLCD.c: 255: PORTDbits.RD0 = 0;
  1371  000BC2  9083               	bcf	3971,0,c	;volatile
  1372                           
  1373                           ;displayLCD.c: 256: Delay();
  1374  000BC4  ECDE  F006         	call	_Delay	;wreg free
  1375                           
  1376                           ;displayLCD.c: 259: if(endereco&0b00000001){PORTDbits.RD4=1;}
  1377  000BC8  A011               	btfss	EnderecoCursor@endereco,0,c
  1378  000BCA  D002               	goto	l57
  1379  000BCC  8883               	bsf	3971,4,c	;volatile
  1380  000BCE  D001               	goto	l58
  1381  000BD0                     l57:
  1382                           
  1383                           ;displayLCD.c: 260: else {PORTDbits.RD4=0;}
  1384  000BD0  9883               	bcf	3971,4,c	;volatile
  1385  000BD2                     l58:
  1386                           
  1387                           ;displayLCD.c: 261: if(endereco&0b00000010){PORTDbits.RD5=1;}
  1388  000BD2  A211               	btfss	EnderecoCursor@endereco,1,c
  1389  000BD4  D002               	goto	l59
  1390  000BD6  8A83               	bsf	3971,5,c	;volatile
  1391  000BD8  D001               	goto	l60
  1392  000BDA                     l59:
  1393                           
  1394                           ;displayLCD.c: 262: else {PORTDbits.RD5=0;}
  1395  000BDA  9A83               	bcf	3971,5,c	;volatile
  1396  000BDC                     l60:
  1397                           
  1398                           ;displayLCD.c: 263: if(endereco&0b00000100){PORTDbits.RD6=1;}
  1399  000BDC  A411               	btfss	EnderecoCursor@endereco,2,c
  1400  000BDE  D002               	goto	l61
  1401  000BE0  8C83               	bsf	3971,6,c	;volatile
  1402  000BE2  D001               	goto	l62
  1403  000BE4                     l61:
  1404                           
  1405                           ;displayLCD.c: 264: else {PORTDbits.RD6=0;}
  1406  000BE4  9C83               	bcf	3971,6,c	;volatile
  1407  000BE6                     l62:
  1408                           
  1409                           ;displayLCD.c: 265: if(endereco&0b00001000){PORTDbits.RD7=1;}
  1410  000BE6  A611               	btfss	EnderecoCursor@endereco,3,c
  1411  000BE8  D002               	goto	l63
  1412  000BEA  8E83               	bsf	3971,7,c	;volatile
  1413  000BEC  D001               	goto	l64
  1414  000BEE                     l63:
  1415                           
  1416                           ;displayLCD.c: 266: else {PORTDbits.RD7=0;}
  1417  000BEE  9E83               	bcf	3971,7,c	;volatile
  1418  000BF0                     l64:
  1419                           
  1420                           ;displayLCD.c: 269: PORTDbits.RD0 = 1;
  1421  000BF0  8083               	bsf	3971,0,c	;volatile
  1422                           
  1423                           ;displayLCD.c: 270: Delay();
  1424  000BF2  ECDE  F006         	call	_Delay	;wreg free
  1425                           
  1426                           ;displayLCD.c: 271: PORTDbits.RD0 = 0;
  1427  000BF6  9083               	bcf	3971,0,c	;volatile
  1428                           
  1429                           ;displayLCD.c: 272: Delay();
  1430  000BF8  ECDE  F006         	call	_Delay	;wreg free
  1431  000BFC  0012               	return		;funcret
  1432  000BFE                     __end_of_EnderecoCursor:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           prodh	equ	0xFF4
  1439                           prodl	equ	0xFF3
  1440                           intcon	equ	0xFF2
  1441                           intcon2	equ	0xFF1
  1442                           intcon3	equ	0xFF0
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postdec1	equ	0xFE5
  1446                           fsr1l	equ	0xFE1
  1447                           indf2	equ	0xFDF
  1448                           fsr2h	equ	0xFDA
  1449                           fsr2l	equ	0xFD9
  1450                           status	equ	0xFD8
  1451                           
  1452 ;; *************** function _EscreveFraseRamLCD *****************
  1453 ;; Defined at:
  1454 ;;		line 470 in file "displayLCD.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  buffer          2   17[COMRAM] PTR unsigned char 
  1457 ;;		 -> STR_2(3), STR_1(3), odoParcial(7), odoTotal(7), 
  1458 ;;		 -> EscreveInteiroLCD@texto(7), 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1470 ;;      Params:         2       0       0       0       0       0       0       0       0
  1471 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1473 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1474 ;;Total ram usage:        2 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    3
  1477 ;; This function calls:
  1478 ;;		_EscreveCaractereLCD
  1479 ;; This function is called by:
  1480 ;;		_odometroTotal
  1481 ;;		_odometroParcial
  1482 ;;		_display
  1483 ;;		_EscreveInteiroLCD
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text8
  1488  000CBE                     __ptext8:
  1489                           	opt stack 0
  1490  000CBE                     _EscreveFraseRamLCD:
  1491                           	opt stack 26
  1492                           
  1493                           ;displayLCD.c: 472: while(*buffer)
  1494                           
  1495                           ;incstack = 0
  1496  000CBE  D014               	goto	l1479
  1497  000CC0                     l1475:
  1498                           
  1499                           ;displayLCD.c: 473: {
  1500                           ;displayLCD.c: 474: EscreveCaractereLCD(*buffer);
  1501  000CC0  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1502  000CC4  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1503  000CC8  6AF8               	clrf	tblptru,c
  1504  000CCA  0E07               	movlw	(high __ramtop+-1)
  1505  000CCC  64F7               	cpfsgt	tblptrh,c
  1506  000CCE  D003               	bra	u677
  1507  000CD0  0008               	tblrd		*
  1508  000CD2  50F5               	movf	tablat,w,c
  1509  000CD4  D005               	bra	u670
  1510  000CD6                     u677:
  1511  000CD6  CFF6 FFE9          	movff	tblptrl,fsr0l
  1512  000CDA  CFF7 FFEA          	movff	tblptrh,fsr0h
  1513  000CDE  50EF               	movf	indf0,w,c
  1514  000CE0                     u670:
  1515  000CE0  EC59  F005         	call	_EscreveCaractereLCD
  1516                           
  1517                           ;displayLCD.c: 475: buffer++;
  1518  000CE4  4A12               	infsnz	EscreveFraseRamLCD@buffer,f,c
  1519  000CE6  2A13               	incf	EscreveFraseRamLCD@buffer+1,f,c
  1520  000CE8                     l1479:
  1521  000CE8  C012  FFF6         	movff	EscreveFraseRamLCD@buffer,tblptrl
  1522  000CEC  C013  FFF7         	movff	EscreveFraseRamLCD@buffer+1,tblptrh
  1523  000CF0  6AF8               	clrf	tblptru,c
  1524  000CF2  0E07               	movlw	(high __ramtop+-1)
  1525  000CF4  64F7               	cpfsgt	tblptrh,c
  1526  000CF6  D003               	bra	u687
  1527  000CF8  0008               	tblrd		*
  1528  000CFA  50F5               	movf	tablat,w,c
  1529  000CFC  D005               	bra	u680
  1530  000CFE                     u687:
  1531  000CFE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1532  000D02  CFF7 FFEA          	movff	tblptrh,fsr0h
  1533  000D06  50EF               	movf	indf0,w,c
  1534  000D08                     u680:
  1535  000D08  0900               	iorlw	0
  1536  000D0A  B4D8               	btfsc	status,2,c
  1537  000D0C  0012               	return	
  1538  000D0E  D7D8               	goto	l1475
  1539  000D10                     __end_of_EscreveFraseRamLCD:
  1540                           	opt stack 0
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           prodh	equ	0xFF4
  1546                           prodl	equ	0xFF3
  1547                           intcon	equ	0xFF2
  1548                           intcon2	equ	0xFF1
  1549                           intcon3	equ	0xFF0
  1550                           indf0	equ	0xFEF
  1551                           postinc0	equ	0xFEE
  1552                           fsr0h	equ	0xFEA
  1553                           fsr0l	equ	0xFE9
  1554                           wreg	equ	0xFE8
  1555                           postdec1	equ	0xFE5
  1556                           fsr1l	equ	0xFE1
  1557                           indf2	equ	0xFDF
  1558                           fsr2h	equ	0xFDA
  1559                           fsr2l	equ	0xFD9
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _EscreveCaractereLCD *****************
  1563 ;; Defined at:
  1564 ;;		line 348 in file "displayLCD.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  data            1    wreg     unsigned char 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  data            1   16[COMRAM] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1581 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1582 ;;Total ram usage:        1 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    2
  1585 ;; This function calls:
  1586 ;;		_Delay
  1587 ;; This function is called by:
  1588 ;;		_EscreveFraseRamLCD
  1589 ;;		_EscreveFloatLCD
  1590 ;;		_EscreveFraseLCD
  1591 ;;		_CriaCaractereLCD
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text9
  1596  000AB2                     __ptext9:
  1597                           	opt stack 0
  1598  000AB2                     _EscreveCaractereLCD:
  1599                           	opt stack 26
  1600                           
  1601                           ;incstack = 0
  1602                           ;EscreveCaractereLCD@data stored from wreg
  1603  000AB2  6E11               	movwf	EscreveCaractereLCD@data,c
  1604                           
  1605                           ;displayLCD.c: 351: PORTDbits.RD2 = 0;
  1606  000AB4  9483               	bcf	3971,2,c	;volatile
  1607                           
  1608                           ;displayLCD.c: 352: PORTDbits.RD1 = 1;
  1609  000AB6  8283               	bsf	3971,1,c	;volatile
  1610                           
  1611                           ;displayLCD.c: 353: PORTDbits.RD0 = 0;
  1612  000AB8  9083               	bcf	3971,0,c	;volatile
  1613                           
  1614                           ;displayLCD.c: 356: if(data&0b00010000){PORTDbits.RD4=1;}
  1615  000ABA  A811               	btfss	EscreveCaractereLCD@data,4,c
  1616  000ABC  D002               	goto	l80
  1617  000ABE  8883               	bsf	3971,4,c	;volatile
  1618  000AC0  D001               	goto	l1007
  1619  000AC2                     l80:
  1620                           
  1621                           ;displayLCD.c: 357: else {PORTDbits.RD4=0;}
  1622  000AC2  9883               	bcf	3971,4,c	;volatile
  1623  000AC4                     l1007:
  1624                           
  1625                           ;displayLCD.c: 358: if(data&0b00100000){PORTDbits.RD5=1;}
  1626  000AC4  AA11               	btfss	EscreveCaractereLCD@data,5,c
  1627  000AC6  D002               	goto	l82
  1628  000AC8  8A83               	bsf	3971,5,c	;volatile
  1629  000ACA  D001               	goto	l1011
  1630  000ACC                     l82:
  1631                           
  1632                           ;displayLCD.c: 359: else {PORTDbits.RD5=0;}
  1633  000ACC  9A83               	bcf	3971,5,c	;volatile
  1634  000ACE                     l1011:
  1635                           
  1636                           ;displayLCD.c: 360: if(data&0b01000000){PORTDbits.RD6=1;}
  1637  000ACE  AC11               	btfss	EscreveCaractereLCD@data,6,c
  1638  000AD0  D002               	goto	l84
  1639  000AD2  8C83               	bsf	3971,6,c	;volatile
  1640  000AD4  D001               	goto	l1015
  1641  000AD6                     l84:
  1642                           
  1643                           ;displayLCD.c: 361: else {PORTDbits.RD6=0;}
  1644  000AD6  9C83               	bcf	3971,6,c	;volatile
  1645  000AD8                     l1015:
  1646                           
  1647                           ;displayLCD.c: 362: if(data&0b10000000){PORTDbits.RD7=1;}
  1648  000AD8  AE11               	btfss	EscreveCaractereLCD@data,7,c
  1649  000ADA  D002               	goto	l86
  1650  000ADC  8E83               	bsf	3971,7,c	;volatile
  1651  000ADE  D001               	goto	l87
  1652  000AE0                     l86:
  1653                           
  1654                           ;displayLCD.c: 363: else {PORTDbits.RD7=0;}
  1655  000AE0  9E83               	bcf	3971,7,c	;volatile
  1656  000AE2                     l87:
  1657                           
  1658                           ;displayLCD.c: 366: PORTDbits.RD0 = 1;
  1659  000AE2  8083               	bsf	3971,0,c	;volatile
  1660                           
  1661                           ;displayLCD.c: 367: Delay();
  1662  000AE4  ECDE  F006         	call	_Delay	;wreg free
  1663                           
  1664                           ;displayLCD.c: 368: PORTDbits.RD0 = 0;
  1665  000AE8  9083               	bcf	3971,0,c	;volatile
  1666                           
  1667                           ;displayLCD.c: 369: Delay();
  1668  000AEA  ECDE  F006         	call	_Delay	;wreg free
  1669                           
  1670                           ;displayLCD.c: 373: if(data&0b00000001){PORTDbits.RD4=1;}
  1671  000AEE  A011               	btfss	EscreveCaractereLCD@data,0,c
  1672  000AF0  D002               	goto	l88
  1673  000AF2  8883               	bsf	3971,4,c	;volatile
  1674  000AF4  D001               	goto	l89
  1675  000AF6                     l88:
  1676                           
  1677                           ;displayLCD.c: 374: else {PORTDbits.RD4=0;}
  1678  000AF6  9883               	bcf	3971,4,c	;volatile
  1679  000AF8                     l89:
  1680                           
  1681                           ;displayLCD.c: 375: if(data&0b00000010){PORTDbits.RD5=1;}
  1682  000AF8  A211               	btfss	EscreveCaractereLCD@data,1,c
  1683  000AFA  D002               	goto	l90
  1684  000AFC  8A83               	bsf	3971,5,c	;volatile
  1685  000AFE  D001               	goto	l91
  1686  000B00                     l90:
  1687                           
  1688                           ;displayLCD.c: 376: else {PORTDbits.RD5=0;}
  1689  000B00  9A83               	bcf	3971,5,c	;volatile
  1690  000B02                     l91:
  1691                           
  1692                           ;displayLCD.c: 377: if(data&0b00000100){PORTDbits.RD6=1;}
  1693  000B02  A411               	btfss	EscreveCaractereLCD@data,2,c
  1694  000B04  D002               	goto	l92
  1695  000B06  8C83               	bsf	3971,6,c	;volatile
  1696  000B08  D001               	goto	l93
  1697  000B0A                     l92:
  1698                           
  1699                           ;displayLCD.c: 378: else {PORTDbits.RD6=0;}
  1700  000B0A  9C83               	bcf	3971,6,c	;volatile
  1701  000B0C                     l93:
  1702                           
  1703                           ;displayLCD.c: 379: if(data&0b00001000){PORTDbits.RD7=1;}
  1704  000B0C  A611               	btfss	EscreveCaractereLCD@data,3,c
  1705  000B0E  D002               	goto	l94
  1706  000B10  8E83               	bsf	3971,7,c	;volatile
  1707  000B12  D001               	goto	l95
  1708  000B14                     l94:
  1709                           
  1710                           ;displayLCD.c: 380: else {PORTDbits.RD7=0;}
  1711  000B14  9E83               	bcf	3971,7,c	;volatile
  1712  000B16                     l95:
  1713                           
  1714                           ;displayLCD.c: 383: PORTDbits.RD0 = 1;
  1715  000B16  8083               	bsf	3971,0,c	;volatile
  1716                           
  1717                           ;displayLCD.c: 384: Delay();
  1718  000B18  ECDE  F006         	call	_Delay	;wreg free
  1719                           
  1720                           ;displayLCD.c: 385: PORTDbits.RD0 = 0;
  1721  000B1C  9083               	bcf	3971,0,c	;volatile
  1722                           
  1723                           ;displayLCD.c: 386: Delay();
  1724  000B1E  ECDE  F006         	call	_Delay	;wreg free
  1725  000B22  0012               	return		;funcret
  1726  000B24                     __end_of_EscreveCaractereLCD:
  1727                           	opt stack 0
  1728                           tblptru	equ	0xFF8
  1729                           tblptrh	equ	0xFF7
  1730                           tblptrl	equ	0xFF6
  1731                           tablat	equ	0xFF5
  1732                           prodh	equ	0xFF4
  1733                           prodl	equ	0xFF3
  1734                           intcon	equ	0xFF2
  1735                           intcon2	equ	0xFF1
  1736                           intcon3	equ	0xFF0
  1737                           indf0	equ	0xFEF
  1738                           postinc0	equ	0xFEE
  1739                           fsr0h	equ	0xFEA
  1740                           fsr0l	equ	0xFE9
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1l	equ	0xFE1
  1744                           indf2	equ	0xFDF
  1745                           fsr2h	equ	0xFDA
  1746                           fsr2l	equ	0xFD9
  1747                           status	equ	0xFD8
  1748                           
  1749 ;; *************** function _Init_EEPROM *****************
  1750 ;; Defined at:
  1751 ;;		line 5 in file "EEPROM.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, status,2
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1765 ;;      Params:         0       0       0       0       0       0       0       0       0
  1766 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1768 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    1
  1772 ;; This function calls:
  1773 ;;		Nothing
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text10
  1780  000E14                     __ptext10:
  1781                           	opt stack 0
  1782  000E14                     _Init_EEPROM:
  1783                           	opt stack 29
  1784                           
  1785                           ;EEPROM.c: 7: EECON1 = 0b00000100;
  1786                           
  1787                           ;incstack = 0
  1788  000E14  0E04               	movlw	4
  1789  000E16  6EA6               	movwf	4006,c	;volatile
  1790  000E18  0012               	return		;funcret
  1791  000E1A                     __end_of_Init_EEPROM:
  1792                           	opt stack 0
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           prodh	equ	0xFF4
  1798                           prodl	equ	0xFF3
  1799                           intcon	equ	0xFF2
  1800                           intcon2	equ	0xFF1
  1801                           intcon3	equ	0xFF0
  1802                           indf0	equ	0xFEF
  1803                           postinc0	equ	0xFEE
  1804                           fsr0h	equ	0xFEA
  1805                           fsr0l	equ	0xFE9
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           indf2	equ	0xFDF
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _ConfiguraLCD *****************
  1815 ;; Defined at:
  1816 ;;		line 87 in file "displayLCD.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, status,2, status,0, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1830 ;;      Params:         0       0       0       0       0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1832 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1833 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1834 ;;Total ram usage:        1 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    3
  1837 ;; This function calls:
  1838 ;;		_Delay
  1839 ;;		_EscreveComandoLCD
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text11
  1846  000988                     __ptext11:
  1847                           	opt stack 0
  1848  000988                     _ConfiguraLCD:
  1849                           	opt stack 27
  1850                           
  1851                           ;displayLCD.c: 90: TRISDbits.RD2 = 0;
  1852                           
  1853                           ;incstack = 0
  1854  000988  9495               	bcf	3989,2,c	;volatile
  1855                           
  1856                           ;displayLCD.c: 91: TRISDbits.RD1 = 0;
  1857  00098A  9295               	bcf	3989,1,c	;volatile
  1858                           
  1859                           ;displayLCD.c: 92: TRISDbits.RD0 = 0;
  1860  00098C  9095               	bcf	3989,0,c	;volatile
  1861                           
  1862                           ;displayLCD.c: 95: TRISDbits.RD4=0;
  1863  00098E  9895               	bcf	3989,4,c	;volatile
  1864                           
  1865                           ;displayLCD.c: 96: TRISDbits.RD5=0;
  1866  000990  9A95               	bcf	3989,5,c	;volatile
  1867                           
  1868                           ;displayLCD.c: 97: TRISDbits.RD6=0;
  1869  000992  9C95               	bcf	3989,6,c	;volatile
  1870                           
  1871                           ;displayLCD.c: 98: TRISDbits.RD7=0;
  1872  000994  9E95               	bcf	3989,7,c	;volatile
  1873                           
  1874                           ;displayLCD.c: 105: PORTDbits.RD2 = 0;
  1875  000996  9483               	bcf	3971,2,c	;volatile
  1876                           
  1877                           ;displayLCD.c: 106: PORTDbits.RD1 = 0;
  1878  000998  9283               	bcf	3971,1,c	;volatile
  1879                           
  1880                           ;displayLCD.c: 107: PORTDbits.RD0 = 0;
  1881  00099A  9083               	bcf	3971,0,c	;volatile
  1882                           
  1883                           ;displayLCD.c: 111: PORTDbits.RD7=0;
  1884  00099C  9E83               	bcf	3971,7,c	;volatile
  1885                           
  1886                           ;displayLCD.c: 112: PORTDbits.RD6=0;
  1887  00099E  9C83               	bcf	3971,6,c	;volatile
  1888                           
  1889                           ;displayLCD.c: 113: PORTDbits.RD5=1;
  1890  0009A0  8A83               	bsf	3971,5,c	;volatile
  1891                           
  1892                           ;displayLCD.c: 114: PORTDbits.RD4=1;
  1893  0009A2  8883               	bsf	3971,4,c	;volatile
  1894                           
  1895                           ;displayLCD.c: 119: _delay((unsigned long)((15)*(48000000/4000.0)));
  1896  0009A4  0EEA               	movlw	234
  1897  0009A6  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  1898  0009A8  0EC3               	movlw	195
  1899  0009AA                     u937:
  1900  0009AA  2EE8               	decfsz	wreg,f,c
  1901  0009AC  D7FE               	bra	u937
  1902  0009AE  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  1903  0009B0  D7FC               	bra	u937
  1904  0009B2  F000               	nop	
  1905                           
  1906                           ;displayLCD.c: 123: PORTDbits.RD0 = 1;
  1907  0009B4  8083               	bsf	3971,0,c	;volatile
  1908                           
  1909                           ;displayLCD.c: 124: Delay();
  1910  0009B6  ECDE  F006         	call	_Delay	;wreg free
  1911                           
  1912                           ;displayLCD.c: 125: PORTDbits.RD0 = 0;
  1913  0009BA  9083               	bcf	3971,0,c	;volatile
  1914                           
  1915                           ;displayLCD.c: 126: Delay();
  1916  0009BC  ECDE  F006         	call	_Delay	;wreg free
  1917                           
  1918                           ;displayLCD.c: 131: _delay((unsigned long)((5)*(48000000/4000.0)));
  1919  0009C0  0E4E               	movlw	78
  1920  0009C2  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  1921  0009C4  0EEB               	movlw	235
  1922  0009C6                     u947:
  1923  0009C6  2EE8               	decfsz	wreg,f,c
  1924  0009C8  D7FE               	bra	u947
  1925  0009CA  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  1926  0009CC  D7FC               	bra	u947
  1927  0009CE  F000               	nop	
  1928                           
  1929                           ;displayLCD.c: 134: PORTDbits.RD0 = 1;
  1930  0009D0  8083               	bsf	3971,0,c	;volatile
  1931                           
  1932                           ;displayLCD.c: 135: Delay();
  1933  0009D2  ECDE  F006         	call	_Delay	;wreg free
  1934                           
  1935                           ;displayLCD.c: 136: PORTDbits.RD0 = 0;
  1936  0009D6  9083               	bcf	3971,0,c	;volatile
  1937                           
  1938                           ;displayLCD.c: 137: Delay();
  1939  0009D8  ECDE  F006         	call	_Delay	;wreg free
  1940                           
  1941                           ;displayLCD.c: 142: _delay((unsigned long)((5)*(48000000/4000.0)));
  1942  0009DC  0E4E               	movlw	78
  1943  0009DE  6E12               	movwf	??_ConfiguraLCD& (0+255),c
  1944  0009E0  0EEB               	movlw	235
  1945  0009E2                     u957:
  1946  0009E2  2EE8               	decfsz	wreg,f,c
  1947  0009E4  D7FE               	bra	u957
  1948  0009E6  2E12               	decfsz	??_ConfiguraLCD& (0+255),f,c
  1949  0009E8  D7FC               	bra	u957
  1950  0009EA  F000               	nop	
  1951                           
  1952                           ;displayLCD.c: 145: PORTDbits.RD0 = 1;
  1953  0009EC  8083               	bsf	3971,0,c	;volatile
  1954                           
  1955                           ;displayLCD.c: 146: Delay();
  1956  0009EE  ECDE  F006         	call	_Delay	;wreg free
  1957                           
  1958                           ;displayLCD.c: 147: PORTDbits.RD0 = 0;
  1959  0009F2  9083               	bcf	3971,0,c	;volatile
  1960                           
  1961                           ;displayLCD.c: 148: Delay();
  1962  0009F4  ECDE  F006         	call	_Delay	;wreg free
  1963                           
  1964                           ;displayLCD.c: 151: PORTDbits.RD7=0;
  1965  0009F8  9E83               	bcf	3971,7,c	;volatile
  1966                           
  1967                           ;displayLCD.c: 152: PORTDbits.RD6=0;
  1968  0009FA  9C83               	bcf	3971,6,c	;volatile
  1969                           
  1970                           ;displayLCD.c: 153: PORTDbits.RD5=1;
  1971  0009FC  8A83               	bsf	3971,5,c	;volatile
  1972                           
  1973                           ;displayLCD.c: 154: PORTDbits.RD4=0;
  1974  0009FE  9883               	bcf	3971,4,c	;volatile
  1975                           
  1976                           ;displayLCD.c: 158: PORTDbits.RD0 = 1;
  1977  000A00  8083               	bsf	3971,0,c	;volatile
  1978                           
  1979                           ;displayLCD.c: 159: Delay();
  1980  000A02  ECDE  F006         	call	_Delay	;wreg free
  1981                           
  1982                           ;displayLCD.c: 160: PORTDbits.RD0 = 0;
  1983  000A06  9083               	bcf	3971,0,c	;volatile
  1984                           
  1985                           ;displayLCD.c: 161: Delay();
  1986  000A08  ECDE  F006         	call	_Delay	;wreg free
  1987                           
  1988                           ;displayLCD.c: 165: EscreveComandoLCD(0b00101000);
  1989  000A0C  0E28               	movlw	40
  1990  000A0E  EC13  F005         	call	_EscreveComandoLCD
  1991                           
  1992                           ;displayLCD.c: 166: EscreveComandoLCD(0b00000110);
  1993  000A12  0E06               	movlw	6
  1994  000A14  EC13  F005         	call	_EscreveComandoLCD
  1995                           
  1996                           ;displayLCD.c: 167: EscreveComandoLCD(0b00001110);
  1997  000A18  0E0E               	movlw	14
  1998  000A1A  EC13  F005         	call	_EscreveComandoLCD
  1999                           
  2000                           ;displayLCD.c: 168: EscreveComandoLCD(0b00000001);
  2001  000A1E  0E01               	movlw	1
  2002  000A20  EC13  F005         	call	_EscreveComandoLCD
  2003  000A24  0012               	return		;funcret
  2004  000A26                     __end_of_ConfiguraLCD:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           intcon2	equ	0xFF1
  2014                           intcon3	equ	0xFF0
  2015                           indf0	equ	0xFEF
  2016                           postinc0	equ	0xFEE
  2017                           fsr0h	equ	0xFEA
  2018                           fsr0l	equ	0xFE9
  2019                           wreg	equ	0xFE8
  2020                           postdec1	equ	0xFE5
  2021                           fsr1l	equ	0xFE1
  2022                           indf2	equ	0xFDF
  2023                           fsr2h	equ	0xFDA
  2024                           fsr2l	equ	0xFD9
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _EscreveComandoLCD *****************
  2028 ;; Defined at:
  2029 ;;		line 179 in file "displayLCD.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;  cmd             1    wreg     unsigned char 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  cmd             1   16[COMRAM] unsigned char 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      void 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2043 ;;      Params:         0       0       0       0       0       0       0       0       0
  2044 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2046 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2047 ;;Total ram usage:        1 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    2
  2050 ;; This function calls:
  2051 ;;		_Delay
  2052 ;; This function is called by:
  2053 ;;		_ConfiguraLCD
  2054 ;;		_CriaCaractereLCD
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text12
  2059  000A26                     __ptext12:
  2060                           	opt stack 0
  2061  000A26                     _EscreveComandoLCD:
  2062                           	opt stack 27
  2063                           
  2064                           ;incstack = 0
  2065                           ;EscreveComandoLCD@cmd stored from wreg
  2066  000A26  6E11               	movwf	EscreveComandoLCD@cmd,c
  2067                           
  2068                           ;displayLCD.c: 182: PORTDbits.RD2 = 0;
  2069  000A28  9483               	bcf	3971,2,c	;volatile
  2070                           
  2071                           ;displayLCD.c: 183: PORTDbits.RD1 = 0;
  2072  000A2A  9283               	bcf	3971,1,c	;volatile
  2073                           
  2074                           ;displayLCD.c: 184: PORTDbits.RD0 = 0;
  2075  000A2C  9083               	bcf	3971,0,c	;volatile
  2076                           
  2077                           ;displayLCD.c: 187: if(cmd&0b00010000){PORTDbits.RD4=1;}
  2078  000A2E  A811               	btfss	EscreveComandoLCD@cmd,4,c
  2079  000A30  D002               	goto	l29
  2080  000A32  8883               	bsf	3971,4,c	;volatile
  2081  000A34  D001               	goto	l1043
  2082  000A36                     l29:
  2083                           
  2084                           ;displayLCD.c: 188: else {PORTDbits.RD4=0;}
  2085  000A36  9883               	bcf	3971,4,c	;volatile
  2086  000A38                     l1043:
  2087                           
  2088                           ;displayLCD.c: 189: if(cmd&0b00100000){PORTDbits.RD5=1;}
  2089  000A38  AA11               	btfss	EscreveComandoLCD@cmd,5,c
  2090  000A3A  D002               	goto	l31
  2091  000A3C  8A83               	bsf	3971,5,c	;volatile
  2092  000A3E  D001               	goto	l1047
  2093  000A40                     l31:
  2094                           
  2095                           ;displayLCD.c: 190: else {PORTDbits.RD5=0;}
  2096  000A40  9A83               	bcf	3971,5,c	;volatile
  2097  000A42                     l1047:
  2098                           
  2099                           ;displayLCD.c: 191: if(cmd&0b01000000){PORTDbits.RD6=1;}
  2100  000A42  AC11               	btfss	EscreveComandoLCD@cmd,6,c
  2101  000A44  D002               	goto	l33
  2102  000A46  8C83               	bsf	3971,6,c	;volatile
  2103  000A48  D001               	goto	l1051
  2104  000A4A                     l33:
  2105                           
  2106                           ;displayLCD.c: 192: else {PORTDbits.RD6=0;}
  2107  000A4A  9C83               	bcf	3971,6,c	;volatile
  2108  000A4C                     l1051:
  2109                           
  2110                           ;displayLCD.c: 193: if(cmd&0b10000000){PORTDbits.RD7=1;}
  2111  000A4C  AE11               	btfss	EscreveComandoLCD@cmd,7,c
  2112  000A4E  D002               	goto	l35
  2113  000A50  8E83               	bsf	3971,7,c	;volatile
  2114  000A52  D001               	goto	l36
  2115  000A54                     l35:
  2116                           
  2117                           ;displayLCD.c: 194: else {PORTDbits.RD7=0;}
  2118  000A54  9E83               	bcf	3971,7,c	;volatile
  2119  000A56                     l36:
  2120                           
  2121                           ;displayLCD.c: 197: PORTDbits.RD0 = 1;
  2122  000A56  8083               	bsf	3971,0,c	;volatile
  2123                           
  2124                           ;displayLCD.c: 198: Delay();
  2125  000A58  ECDE  F006         	call	_Delay	;wreg free
  2126                           
  2127                           ;displayLCD.c: 199: PORTDbits.RD0 = 0;
  2128  000A5C  9083               	bcf	3971,0,c	;volatile
  2129                           
  2130                           ;displayLCD.c: 200: Delay();
  2131  000A5E  ECDE  F006         	call	_Delay	;wreg free
  2132                           
  2133                           ;displayLCD.c: 203: if(cmd&0b00000001){PORTDbits.RD4=1;}
  2134  000A62  A011               	btfss	EscreveComandoLCD@cmd,0,c
  2135  000A64  D002               	goto	l37
  2136  000A66  8883               	bsf	3971,4,c	;volatile
  2137  000A68  D001               	goto	l38
  2138  000A6A                     l37:
  2139                           
  2140                           ;displayLCD.c: 204: else {PORTDbits.RD4=0;}
  2141  000A6A  9883               	bcf	3971,4,c	;volatile
  2142  000A6C                     l38:
  2143                           
  2144                           ;displayLCD.c: 205: if(cmd&0b00000010){PORTDbits.RD5=1;}
  2145  000A6C  A211               	btfss	EscreveComandoLCD@cmd,1,c
  2146  000A6E  D002               	goto	l39
  2147  000A70  8A83               	bsf	3971,5,c	;volatile
  2148  000A72  D001               	goto	l40
  2149  000A74                     l39:
  2150                           
  2151                           ;displayLCD.c: 206: else {PORTDbits.RD5=0;}
  2152  000A74  9A83               	bcf	3971,5,c	;volatile
  2153  000A76                     l40:
  2154                           
  2155                           ;displayLCD.c: 207: if(cmd&0b00000100){PORTDbits.RD6=1;}
  2156  000A76  A411               	btfss	EscreveComandoLCD@cmd,2,c
  2157  000A78  D002               	goto	l41
  2158  000A7A  8C83               	bsf	3971,6,c	;volatile
  2159  000A7C  D001               	goto	l42
  2160  000A7E                     l41:
  2161                           
  2162                           ;displayLCD.c: 208: else {PORTDbits.RD6=0;}
  2163  000A7E  9C83               	bcf	3971,6,c	;volatile
  2164  000A80                     l42:
  2165                           
  2166                           ;displayLCD.c: 209: if(cmd&0b00001000){PORTDbits.RD7=1;}
  2167  000A80  A611               	btfss	EscreveComandoLCD@cmd,3,c
  2168  000A82  D002               	goto	l43
  2169  000A84  8E83               	bsf	3971,7,c	;volatile
  2170  000A86  D001               	goto	l44
  2171  000A88                     l43:
  2172                           
  2173                           ;displayLCD.c: 210: else {PORTDbits.RD7=0;}
  2174  000A88  9E83               	bcf	3971,7,c	;volatile
  2175  000A8A                     l44:
  2176                           
  2177                           ;displayLCD.c: 213: PORTDbits.RD0 = 1;
  2178  000A8A  8083               	bsf	3971,0,c	;volatile
  2179                           
  2180                           ;displayLCD.c: 214: Delay();
  2181  000A8C  ECDE  F006         	call	_Delay	;wreg free
  2182                           
  2183                           ;displayLCD.c: 215: PORTDbits.RD0 = 0;
  2184  000A90  9083               	bcf	3971,0,c	;volatile
  2185                           
  2186                           ;displayLCD.c: 216: Delay();
  2187  000A92  ECDE  F006         	call	_Delay	;wreg free
  2188                           
  2189                           ;displayLCD.c: 221: if (cmd==0x01 || cmd==0x02 || cmd==0x03)
  2190  000A96  0411               	decf	EscreveComandoLCD@cmd,w,c
  2191  000A98  B4D8               	btfsc	status,2,c
  2192  000A9A  D008               	goto	l1079
  2193  000A9C  0E02               	movlw	2
  2194  000A9E  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2195  000AA0  B4D8               	btfsc	status,2,c
  2196  000AA2  D004               	goto	l1079
  2197  000AA4  0E03               	movlw	3
  2198  000AA6  1811               	xorwf	EscreveComandoLCD@cmd,w,c
  2199  000AA8  A4D8               	btfss	status,2,c
  2200  000AAA  0012               	return	
  2201  000AAC                     l1079:
  2202                           
  2203                           ;displayLCD.c: 222: { Delay(); }
  2204  000AAC  ECDE  F006         	call	_Delay	;wreg free
  2205  000AB0  0012               	return	
  2206  000AB2                     __end_of_EscreveComandoLCD:
  2207                           	opt stack 0
  2208                           tblptru	equ	0xFF8
  2209                           tblptrh	equ	0xFF7
  2210                           tblptrl	equ	0xFF6
  2211                           tablat	equ	0xFF5
  2212                           prodh	equ	0xFF4
  2213                           prodl	equ	0xFF3
  2214                           intcon	equ	0xFF2
  2215                           intcon2	equ	0xFF1
  2216                           intcon3	equ	0xFF0
  2217                           indf0	equ	0xFEF
  2218                           postinc0	equ	0xFEE
  2219                           fsr0h	equ	0xFEA
  2220                           fsr0l	equ	0xFE9
  2221                           wreg	equ	0xFE8
  2222                           postdec1	equ	0xFE5
  2223                           fsr1l	equ	0xFE1
  2224                           indf2	equ	0xFDF
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _Delay *****************
  2230 ;; Defined at:
  2231 ;;		line 61 in file "displayLCD.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  Cnt2            1   15[COMRAM] unsigned char 
  2236 ;;  Cnt1            1   14[COMRAM] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2246 ;;      Params:         0       0       0       0       0       0       0       0       0
  2247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2249 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2250 ;;Total ram usage:        2 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_ConfiguraLCD
  2257 ;;		_EscreveComandoLCD
  2258 ;;		_EnderecoCursor
  2259 ;;		_EscreveCaractereLCD
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text13
  2264  000DBC                     __ptext13:
  2265                           	opt stack 0
  2266  000DBC                     _Delay:
  2267                           	opt stack 26
  2268                           
  2269                           ;displayLCD.c: 63: unsigned char Cnt1, Cnt2;
  2270                           ;displayLCD.c: 65: for(Cnt1 = 0; Cnt1<100; Cnt1++)
  2271                           
  2272                           ;incstack = 0
  2273  000DBC  0E00               	movlw	0
  2274  000DBE  6E0F               	movwf	Delay@Cnt1,c
  2275  000DC0                     l951:
  2276  000DC0  0E63               	movlw	99
  2277  000DC2  640F               	cpfsgt	Delay@Cnt1,c
  2278  000DC4  D001               	goto	l19
  2279  000DC6  0012               	return	
  2280  000DC8                     l19:
  2281                           
  2282                           ;displayLCD.c: 66: {
  2283                           ;displayLCD.c: 67: __nop();
  2284  000DC8  F000               	nop	
  2285                           
  2286                           ;displayLCD.c: 68: for(Cnt2 = 0; Cnt2<50; Cnt2++)
  2287  000DCA  0E00               	movlw	0
  2288  000DCC  6E10               	movwf	Delay@Cnt2,c
  2289  000DCE                     l957:
  2290  000DCE  0E31               	movlw	49
  2291  000DD0  6410               	cpfsgt	Delay@Cnt2,c
  2292  000DD2  D001               	goto	l21
  2293  000DD4  D003               	goto	l965
  2294  000DD6                     l21:
  2295                           
  2296                           ;displayLCD.c: 69: {
  2297                           ;displayLCD.c: 70: __nop();
  2298  000DD6  F000               	nop	
  2299  000DD8  2A10               	incf	Delay@Cnt2,f,c
  2300  000DDA  D7F9               	goto	l957
  2301  000DDC                     l965:
  2302  000DDC  2A0F               	incf	Delay@Cnt1,f,c
  2303  000DDE  D7F0               	goto	l951
  2304  000DE0                     __end_of_Delay:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           prodh	equ	0xFF4
  2311                           prodl	equ	0xFF3
  2312                           intcon	equ	0xFF2
  2313                           intcon2	equ	0xFF1
  2314                           intcon3	equ	0xFF0
  2315                           indf0	equ	0xFEF
  2316                           postinc0	equ	0xFEE
  2317                           fsr0h	equ	0xFEA
  2318                           fsr0l	equ	0xFE9
  2319                           wreg	equ	0xFE8
  2320                           postdec1	equ	0xFE5
  2321                           fsr1l	equ	0xFE1
  2322                           indf2	equ	0xFDF
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _isr *****************
  2328 ;; Defined at:
  2329 ;;		line 19 in file "main.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;		None
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      void 
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, status,0
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2343 ;;      Params:         0       0       0       0       0       0       0       0       0
  2344 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2345 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2346 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2347 ;;Total ram usage:       14 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		Interrupt level 2
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	intcode
  2357  000008                     __pintcode:
  2358                           	opt stack 0
  2359  000008                     _isr:
  2360                           	opt stack 26
  2361                           
  2362                           ;incstack = 0
  2363  000008  8235               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2364  00000A  ED64  F004         	call	int_func,f	;refresh shadow registers
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           prodh	equ	0xFF4
  2370                           prodl	equ	0xFF3
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           intcon3	equ	0xFF0
  2374                           indf0	equ	0xFEF
  2375                           postinc0	equ	0xFEE
  2376                           fsr0h	equ	0xFEA
  2377                           fsr0l	equ	0xFE9
  2378                           wreg	equ	0xFE8
  2379                           postdec1	equ	0xFE5
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386                           	psect	intcode_body
  2387  0008C8                     __pintcode_body:
  2388                           	opt stack 26
  2389  0008C8                     int_func:
  2390                           	opt stack 26
  2391  0008C8  0006               	pop		; remove dummy address from shadow register refresh
  2392  0008CA  CFFA F001          	movff	pclath,??_isr
  2393  0008CE  CFFB F002          	movff	pclatu,??_isr+1
  2394  0008D2  CFE9 F003          	movff	fsr0l,??_isr+2
  2395  0008D6  CFEA F004          	movff	fsr0h,??_isr+3
  2396  0008DA  CFE1 F005          	movff	fsr1l,??_isr+4
  2397  0008DE  CFE2 F006          	movff	fsr1h,??_isr+5
  2398  0008E2  CFD9 F007          	movff	fsr2l,??_isr+6
  2399  0008E6  CFDA F008          	movff	fsr2h,??_isr+7
  2400  0008EA  CFF3 F009          	movff	prodl,??_isr+8
  2401  0008EE  CFF4 F00A          	movff	prodh,??_isr+9
  2402  0008F2  CFF6 F00B          	movff	tblptrl,??_isr+10
  2403  0008F6  CFF7 F00C          	movff	tblptrh,??_isr+11
  2404  0008FA  CFF8 F00D          	movff	tblptru,??_isr+12
  2405  0008FE  CFF5 F00E          	movff	tablat,??_isr+13
  2406                           
  2407                           ;main.c: 20: if ((PIR1bits.CCP1IF) && (PIE1bits.CCP1IE)){
  2408  000902  B49E               	btfsc	3998,2,c	;volatile
  2409  000904  A49D               	btfss	3997,2,c	;volatile
  2410  000906  D022               	goto	i2l302
  2411                           
  2412                           ;main.c: 21: bordaParcial++;
  2413  000908  4A30               	infsnz	_bordaParcial,f,c
  2414  00090A  2A31               	incf	_bordaParcial+1,f,c
  2415                           
  2416                           ;main.c: 22: bordaTotal++;
  2417  00090C  4A32               	infsnz	_bordaTotal,f,c
  2418  00090E  2A33               	incf	_bordaTotal+1,f,c
  2419                           
  2420                           ;main.c: 23: if (bordaParcial == 500){
  2421  000910  0EF4               	movlw	244
  2422  000912  1830               	xorwf	_bordaParcial,w,c
  2423  000914  E10B               	bnz	i2l1423
  2424  000916  0431               	decf	_bordaParcial+1,w,c
  2425  000918  A4D8               	btfss	status,2,c
  2426  00091A  D008               	goto	i2l1423
  2427                           
  2428                           ;main.c: 24: atualizaOdoParcial = 1;
  2429  00091C  0E00               	movlw	0
  2430  00091E  6E2D               	movwf	_atualizaOdoParcial+1,c
  2431  000920  0E01               	movlw	1
  2432  000922  6E2C               	movwf	_atualizaOdoParcial,c
  2433                           
  2434                           ;main.c: 25: bordaParcial = 0;
  2435  000924  0E00               	movlw	0
  2436  000926  6E31               	movwf	_bordaParcial+1,c
  2437  000928  0E00               	movlw	0
  2438  00092A  6E30               	movwf	_bordaParcial,c
  2439  00092C                     i2l1423:
  2440                           
  2441                           ;main.c: 26: }
  2442                           ;main.c: 27: if (bordaTotal == 5000){
  2443  00092C  0E88               	movlw	136
  2444  00092E  1832               	xorwf	_bordaTotal,w,c
  2445  000930  E10C               	bnz	i2l1427
  2446  000932  0E13               	movlw	19
  2447  000934  1833               	xorwf	_bordaTotal+1,w,c
  2448  000936  A4D8               	btfss	status,2,c
  2449  000938  D008               	goto	i2l1427
  2450                           
  2451                           ;main.c: 28: atualizaOdoTotal = 1;
  2452  00093A  0E00               	movlw	0
  2453  00093C  6E2F               	movwf	_atualizaOdoTotal+1,c
  2454  00093E  0E01               	movlw	1
  2455  000940  6E2E               	movwf	_atualizaOdoTotal,c
  2456                           
  2457                           ;main.c: 29: bordaTotal = 0;
  2458  000942  0E00               	movlw	0
  2459  000944  6E33               	movwf	_bordaTotal+1,c
  2460  000946  0E00               	movlw	0
  2461  000948  6E32               	movwf	_bordaTotal,c
  2462  00094A                     i2l1427:
  2463                           
  2464                           ;main.c: 30: }
  2465                           ;main.c: 31: PIR1bits.CCP1IF = 0;
  2466  00094A  949E               	bcf	3998,2,c	;volatile
  2467  00094C                     i2l302:
  2468  00094C  C00E  FFF5         	movff	??_isr+13,tablat
  2469  000950  C00D  FFF8         	movff	??_isr+12,tblptru
  2470  000954  C00C  FFF7         	movff	??_isr+11,tblptrh
  2471  000958  C00B  FFF6         	movff	??_isr+10,tblptrl
  2472  00095C  C00A  FFF4         	movff	??_isr+9,prodh
  2473  000960  C009  FFF3         	movff	??_isr+8,prodl
  2474  000964  C008  FFDA         	movff	??_isr+7,fsr2h
  2475  000968  C007  FFD9         	movff	??_isr+6,fsr2l
  2476  00096C  C006  FFE2         	movff	??_isr+5,fsr1h
  2477  000970  C005  FFE1         	movff	??_isr+4,fsr1l
  2478  000974  C004  FFEA         	movff	??_isr+3,fsr0h
  2479  000978  C003  FFE9         	movff	??_isr+2,fsr0l
  2480  00097C  C002  FFFB         	movff	??_isr+1,pclatu
  2481  000980  C001  FFFA         	movff	??_isr,pclath
  2482  000984  9235               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2483  000986  0011               	retfie		f
  2484  000988                     __end_of_isr:
  2485                           	opt stack 0
  2486                           pclatu	equ	0xFFB
  2487                           pclath	equ	0xFFA
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           prodh	equ	0xFF4
  2493                           prodl	equ	0xFF3
  2494                           intcon	equ	0xFF2
  2495                           intcon2	equ	0xFF1
  2496                           intcon3	equ	0xFF0
  2497                           indf0	equ	0xFEF
  2498                           postinc0	equ	0xFEE
  2499                           fsr0h	equ	0xFEA
  2500                           fsr0l	equ	0xFE9
  2501                           wreg	equ	0xFE8
  2502                           postdec1	equ	0xFE5
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           fsr2h	equ	0xFDA
  2507                           fsr2l	equ	0xFD9
  2508                           status	equ	0xFD8
  2509                           pclatu	equ	0xFFB
  2510                           pclath	equ	0xFFA
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon	equ	0xFF2
  2518                           intcon2	equ	0xFF1
  2519                           intcon3	equ	0xFF0
  2520                           indf0	equ	0xFEF
  2521                           postinc0	equ	0xFEE
  2522                           fsr0h	equ	0xFEA
  2523                           fsr0l	equ	0xFE9
  2524                           wreg	equ	0xFE8
  2525                           postdec1	equ	0xFE5
  2526                           fsr1h	equ	0xFE2
  2527                           fsr1l	equ	0xFE1
  2528                           indf2	equ	0xFDF
  2529                           fsr2h	equ	0xFDA
  2530                           fsr2l	equ	0xFD9
  2531                           status	equ	0xFD8
  2532                           
  2533                           	psect	rparam
  2534  0000                     pclatu	equ	0xFFB
  2535                           pclath	equ	0xFFA
  2536                           tblptru	equ	0xFF8
  2537                           tblptrh	equ	0xFF7
  2538                           tblptrl	equ	0xFF6
  2539                           tablat	equ	0xFF5
  2540                           prodh	equ	0xFF4
  2541                           prodl	equ	0xFF3
  2542                           intcon	equ	0xFF2
  2543                           intcon2	equ	0xFF1
  2544                           intcon3	equ	0xFF0
  2545                           indf0	equ	0xFEF
  2546                           postinc0	equ	0xFEE
  2547                           fsr0h	equ	0xFEA
  2548                           fsr0l	equ	0xFE9
  2549                           wreg	equ	0xFE8
  2550                           postdec1	equ	0xFE5
  2551                           fsr1h	equ	0xFE2
  2552                           fsr1l	equ	0xFE1
  2553                           indf2	equ	0xFDF
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558                           	psect	temp
  2559  000035                     btemp:
  2560                           	opt stack 0
  2561  000035                     	ds	1
  2562  0000                     int$flags	set	btemp
  2563                           pclatu	equ	0xFFB
  2564                           pclath	equ	0xFFA
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           prodh	equ	0xFF4
  2570                           prodl	equ	0xFF3
  2571                           intcon	equ	0xFF2
  2572                           intcon2	equ	0xFF1
  2573                           intcon3	equ	0xFF0
  2574                           indf0	equ	0xFEF
  2575                           postinc0	equ	0xFEE
  2576                           fsr0h	equ	0xFEA
  2577                           fsr0l	equ	0xFE9
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           fsr1h	equ	0xFE2
  2581                           fsr1l	equ	0xFE1
  2582                           indf2	equ	0xFDF
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        21
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     22      52
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    EscreveFraseRamLCD@buffer	PTR unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[3]), STR_1(CODE[3]), odoParcial(COMRAM[7]), odoTotal(COMRAM[7]), 
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> EscreveInteiroLCD@texto(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_odometroParcial
    _odometroTotal->_PosicaoCursorLCD
    _odometroParcial->_PosicaoCursorLCD
    _display->_PosicaoCursorLCD
    _PosicaoCursorLCD->_EnderecoCursor
    _EnderecoCursor->_Delay
    _EscreveFraseRamLCD->_EscreveCaractereLCD
    _EscreveCaractereLCD->_Delay
    _ConfiguraLCD->_EscreveComandoLCD
    _EscreveComandoLCD->_Delay

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4683
                       _ConfiguraLCD
                        _Init_EEPROM
                            _display
                             _initHw
                      _initInterrupt
                    _odometroParcial
                      _odometroTotal
 ---------------------------------------------------------------------------------
 (1) _odometroTotal                                        0     0      0    1450
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (1) _odometroParcial                                      2     2      0    1498
                                             20 COMRAM     2     2      0
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initHw                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              0     0      0    1450
                 _EscreveFraseRamLCD
                   _PosicaoCursorLCD
 ---------------------------------------------------------------------------------
 (2) _PosicaoCursorLCD                                     3     2      1     777
                                             17 COMRAM     3     2      1
                     _EnderecoCursor
 ---------------------------------------------------------------------------------
 (3) _EnderecoCursor                                       1     1      0     165
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _EscreveFraseRamLCD                                   2     0      2     673
                                             17 COMRAM     2     0      2
                _EscreveCaractereLCD
 ---------------------------------------------------------------------------------
 (3) _EscreveCaractereLCD                                  1     1      0     180
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _Init_EEPROM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0     285
                                             17 COMRAM     1     1      0
                              _Delay
                  _EscreveComandoLCD
 ---------------------------------------------------------------------------------
 (2) _EscreveComandoLCD                                    1     1      0     225
                                             16 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     2      0      60
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfiguraLCD
     _Delay
     _EscreveComandoLCD
       _Delay
   _Init_EEPROM
   _display
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _initHw
   _initInterrupt
   _odometroParcial
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay
   _odometroTotal
     _EscreveFraseRamLCD
       _EscreveCaractereLCD
         _Delay
     _PosicaoCursorLCD
       _EnderecoCursor
         _Delay

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     16      34       1       55.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      34      20        0.0%
DATA                 0      0      34       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Nov 24 23:15:33 2019

                          l21 0DD6                            l31 0A40                            l40 0A76  
                          l41 0A7E                            l33 0A4A                            l42 0A80  
                          l19 0DC8                            l43 0A88                            l35 0A54  
                          l51 0BA6                            l44 0A8A                            l36 0A56  
                          l60 0BDC                            l37 0A6A                            l29 0A36  
                          l61 0BE4                            l53 0BB0                            l38 0A6C  
                          l62 0BE6                            l70 0B32                            l39 0A74  
                          l63 0BEE                            l55 0BBA                            l80 0AC2  
                          l64 0BF0                            l56 0BBC                            l57 0BD0  
                          l90 0B00                            l82 0ACC                            l58 0BD2  
                          l91 0B02                            l59 0BDA                            l92 0B0A  
                          l84 0AD6                            l93 0B0C                            l94 0B14  
                          l86 0AE0                            l95 0B16                            l87 0AE2  
                          l88 0AF6                            l89 0AF8                           l203 08B8  
                         l951 0DC0                           l965 0DDC                           l957 0DCE  
                         l975 0BA8                           l979 0BB2                           u670 0CE0  
                         u680 0D08                           u677 0CD6                           u687 0CFE  
                         u937 09AA                           u947 09C6                           u957 09E2  
                         _isr 0008                           prod 000FF3                           wreg 000FE8  
                        l1011 0ACE                          l1015 0AD8                          l1007 0AC4  
                        l1051 0A4C                          l1043 0A38                          l1047 0A42  
                        l1079 0AAC                          l1451 0B3E                          l1523 0C44  
                        l1463 0B68                          l1455 0B4C                          l1471 0B8E  
                        l1475 0CC0                          l1459 0B5A                          l1467 0B6E  
                        l1563 0852                          l1469 0B8A                          l1479 0CE8  
                        l1567 085A                          l1575 0876                          l1639 0DF4  
                        ?_isr 0001                          STR_1 0801                          STR_2 0801  
                        _LATA 000F89                          _LATB 000F8A                          _LATD 000F8C  
                        _IPR1 000F9F                          _IPR2 000FA2                          _PIE1 000F9D  
                        _PIE2 000FA0                          _PIR1 000F9E                          _PIR2 000FA1  
                        _RCON 000FD0                 ??_Init_EEPROM 000F                          _main 0DE0  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0035  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
                ___param_bank 000000    __end_of_EscreveFraseRamLCD 0D10                         ??_isr 0001  
                       ?_main 0001                         _EEADR 000FA9                         _T0CON 000FD5  
                       _T1CON 000FCD                         i2l302 094C                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                         _Delay 0DBC               __end_of_display 0CBE  
        EscreveComandoLCD@cmd 0011                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8              ?_odometroParcial 0001           __end_of_Init_EEPROM 0E1A  
             __initialization 0D54        __size_of_initInterrupt 002E                  __end_of_main 0DFE  
                      ??_main 0017          __end_of_ConfiguraLCD 0A26                 __activetblptr 000002  
           _EscreveComandoLCD 0A26                        ?_Delay 0001            ?_EscreveComandoLCD 0001  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      _EEDATA 000FA8                        _EECON1 000FA6                        _EECON2 000FA7  
                      i2l1423 092C                        i2l1427 094A                        _INTCON 000FF2  
         ??_EscreveComandoLCD 0011            _atualizaOdoParcial 002C             ?_PosicaoCursorLCD 0012  
__size_of_EscreveCaractereLCD 0072            ??_PosicaoCursorLCD 0013                        _initHw 0D10  
                      clear_0 0D7A     __end_of_EscreveComandoLCD 0AB2                     ??_display 0015  
                __pdataCOMRAM 0017                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8       __size_of_EnderecoCursor 006A  
               _initInterrupt 0D8E                   _Init_EEPROM 0E14                    __accesstop 0060  
     __end_of__initialization 0D80                 ___rparam_used 000001                 __end_of_Delay 0DE0  
              __pcstackCOMRAM 0001                       ??_Delay 000F                ?_initInterrupt 0001  
       __size_of_ConfiguraLCD 009E                       _CCP1CON 000FBD                       ?_initHw 0001  
  __size_of_EscreveComandoLCD 008C                    _bordaTotal 0032                       _INTCON2 000FF1  
                     _INTCON3 000FF0            _EscreveFraseRamLCD 0CBE        __size_of_odometroTotal 0066  
         ?_EscreveFraseRamLCD 0012                  _ConfiguraLCD 0988       odometroParcial@position 0015  
                     __Hparam 0000                       __Lparam 0000                    _odoParcial 001E  
        ??_EscreveFraseRamLCD 0014                  __psmallconst 0800               __size_of_initHw 0044  
                     __pcinit 0D54                  _bordaParcial 0030                       __ramtop 0800  
                     __ptext0 0DE0                       __ptext1 0BFE                       __ptext2 0806  
                     __ptext3 0D8E                       __ptext4 0D10                       __ptext5 0C64  
                     __ptext6 0B24                       __ptext7 0B94                       __ptext8 0CBE  
                     __ptext9 0AB2                       _display 0C64          odometroParcial@trava 0016  
             ??_initInterrupt 000F                  __size_of_isr 0980                     _T3CONbits 000FB1  
              _EnderecoCursor 0B94                     Delay@Cnt1 000F                     Delay@Cnt2 0010  
              __pintcode_body 08C8           _EscreveCaractereLCD 0AB2          end_of_initialization 0D80  
               __Lmediumconst 0000                       int_func 08C8                 _odometroTotal 0BFE  
                     postdec1 000FE5                       postinc0 000FEE          ?_EscreveCaractereLCD 0001  
    __size_of_odometroParcial 00C2   PosicaoCursorLCD@EnderecoLCD 0014                     _PORTDbits 000F83  
                   _PORTEbits 000F84        __end_of_EnderecoCursor 0BFE                     _TRISCbits 000F94  
                   _TRISDbits 000F95     __size_of_PosicaoCursorLCD 0070                  ?_Init_EEPROM 0001  
              ?_odometroTotal 0001         ??_EscreveCaractereLCD 0011                 __pidataCOMRAM 0DFE  
            _atualizaOdoTotal 002E                __end_of_initHw 0D54               ?_EnderecoCursor 0001  
         start_initialization 0D54                   __end_of_isr 0988      EscreveFraseRamLCD@buffer 0012  
                    ??_initHw 000F             ??_odometroParcial 0015                   __pbssCOMRAM 002C  
            odometroParcial@i 0034               ??_odometroTotal 0015                     __pintcode 0008  
      EscreveInteiroLCD@F3948 0017                      ?_display 0001                   __smallconst 0800  
              __size_of_Delay 0024              _PosicaoCursorLCD 0B24        EnderecoCursor@endereco 0011  
        __size_of_Init_EEPROM 0006                      _PIE1bits 000F9D                      _PIR1bits 000F9E  
     EscreveCaractereLCD@data 0011   __size_of_EscreveFraseRamLCD 0052         __end_of_initInterrupt 0DBC  
                   copy_data0 0D68                    _EECON1bits 000FA6                      __Hrparam 0000  
                    __Lrparam 0000              ??_EnderecoCursor 0011              __size_of_display 005A  
                    __ptext10 0E14                      __ptext11 0988                      __ptext12 0A26  
                    __ptext13 0DBC                      _odoTotal 0025                 __size_of_main 001E  
 __end_of_EscreveCaractereLCD 0B24               _odometroParcial 0806                      int$flags 0035  
                  _INTCONbits 000FF2                      intlevel2 0000                 ?_ConfiguraLCD 0001  
    __end_of_PosicaoCursorLCD 0B94        PosicaoCursorLCD@coluna 0012         PosicaoCursorLCD@linha 0013  
              ??_ConfiguraLCD 0012       __end_of_odometroParcial 08C8         __end_of_odometroTotal 0C64  
